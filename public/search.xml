<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS下安装部署Gitlab</title>
      <link href="/2019/04/17/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Gitlab/"/>
      <url>/2019/04/17/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Gitlab/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitlab简介"><a href="#Gitlab简介" class="headerlink" title="Gitlab简介"></a>Gitlab简介</h1><blockquote><p>GitLab是一个开源的git仓库管理平台,方便团队协作开发和管理.在GitLab上可以实现完成的CI(持续集成)和CD(持续发布).而且还提供了免费使用的社区版本(<a href="https://gitlab.com/gitlab-org/gitlab-ce" target="_blank" rel="noopener">https://gitlab.com/gitlab-org/gitlab-ce</a>)</p></blockquote><p>官网:<a href="https://about.gitlab.com" target="_blank" rel="noopener">https://about.gitlab.com</a></p><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><table><thead><tr><th>工具/环境</th><th>版本</th></tr></thead><tbody><tr><td>Linux Server</td><td>CentOS 7</td></tr><tr><td>GitLab</td><td>11.9.8</td></tr></tbody></table><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装基础依赖"><a href="#安装基础依赖" class="headerlink" title="安装基础依赖"></a>安装基础依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装技术依赖</span></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动ssh服务&amp;设置为开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br></pre></td></tr></table></figure><h2 id="安装Postfix"><a href="#安装Postfix" class="headerlink" title="安装Postfix"></a>安装Postfix</h2><p>Postfix是一个邮件服务器,Gitlab发送邮件需要用到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装postfix</span></span><br><span class="line">sudo yum install -y postfix</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动postfix并设置为开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br></pre></td></tr></table></figure><h2 id="开放ssh以及http服务-80端口"><a href="#开放ssh以及http服务-80端口" class="headerlink" title="开放ssh以及http服务(80端口)"></a>开放ssh以及http服务(80端口)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开放ssh、http服务</span></span><br><span class="line">sudo firewall-cmd --add-service=ssh --permanent</span><br><span class="line">sudo firewall-cmd --add-service=http --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">#重载防火墙规则</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h1><p>本次安装部署的士社区办:gitlab-ce,如果要部署商业版可以把关键字替换为:gitlab-ee</p><h2 id="Yum安装GitLab"><a href="#Yum安装GitLab" class="headerlink" title="Yum安装GitLab"></a>Yum安装GitLab</h2><ul><li>添加GitLba社区版Package</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><ul><li>安装GitLab社区版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><p>安装成功后可以看到终端输出GitLab的Logo</p><h2 id="配置GitLab站点Url"><a href="#配置GitLab站点Url" class="headerlink" title="配置GitLab站点Url"></a>配置GitLab站点Url</h2><ul><li>GitLab默认的配置文件路径是<code>/etc/gitlab/gitlab.rb</code></li><li>默认的站点Url配置项是:<code>external_url &#39;http://gitlab.example.com&#39;</code></li></ul><p>根据需求修改站点URL配置.</p><p>修改完成后需要在终端输入一下命令使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h1 id="启动访问"><a href="#启动访问" class="headerlink" title="启动访问"></a>启动访问</h1><p>启动GitLab的终端命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">sudo gitlab-ce start</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">sudo gitlab-ce stop</span><br></pre></td></tr></table></figure><blockquote><p>注:查看GitLab版本号:<code>cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</code></p></blockquote><p>参考:<a href="https://ken.io/note/centos7-gitlab-install-tutorial" target="_blank" rel="noopener">CentOS 7 下 GitLab安装部署教程</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA使用教程</title>
      <link href="/2018/12/26/IDEA%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2018/12/26/IDEA%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用iconfont资源</title>
      <link href="/2018/10/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8iconfont%E8%B5%84%E6%BA%90/"/>
      <url>/2018/10/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8iconfont%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>iconfont的图标资源非常丰富，可以在网页中直接使用。</p><h1 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a>下载资源</h1><p>在iconfont上找到所需要的图标资源，并加入购物车</p><h1 id="引入资源文件"><a href="#引入资源文件" class="headerlink" title="引入资源文件"></a>引入资源文件</h1><h1 id="使用资源的三种方式"><a href="#使用资源的三种方式" class="headerlink" title="使用资源的三种方式"></a>使用资源的三种方式</h1>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之复杂度分析</title>
      <link href="/2018/10/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>/2018/10/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是复杂度分析"><a href="#一、什么是复杂度分析" class="headerlink" title="一、什么是复杂度分析"></a>一、什么是复杂度分析</h1><ol><li>数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。</li><li>因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。</li><li>分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。</li><li>复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。</li></ol><h2 id="大O复杂度表示法"><a href="#大O复杂度表示法" class="headerlink" title="大O复杂度表示法"></a>大O复杂度表示法</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Python数据分析</title>
      <link href="/2018/09/26/%E5%88%9D%E8%AF%86Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2018/09/26/%E5%88%9D%E8%AF%86Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fzgcb7v0efj31cn0u0ngy.jpg" alt="数据分析"></p><h1 id="初识Python数据分析"><a href="#初识Python数据分析" class="headerlink" title="初识Python数据分析"></a>初识Python数据分析</h1><blockquote><p>使用Python进行数据分析，本次使用Python爬取淘宝网全网月饼销售数据，并依据此数据生成词云。</p></blockquote><a id="more"></a><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>目标链接：<a href="https://s.taobao.com/search?q=月饼" target="_blank" rel="noopener">https://s.taobao.com/search?q=月饼</a></p><p>模块：requests、jieba、matplotlib、wordcloud、imread、pandas等</p><h2 id="代码及知识点"><a href="#代码及知识点" class="headerlink" title="代码及知识点"></a>代码及知识点</h2><h3 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据"></a>获取数据</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html_text</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        res.raise_for_status()</span><br><span class="line">        res.encoding = res.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r'\"view_price\"\:\"[\d\.]*\"'</span>, html)</span><br><span class="line">        tlt = re.findall(<span class="string">r'\"raw_title\"\:\".*?\"'</span>, html)</span><br><span class="line">        loc = re.findall(<span class="string">r'\"item_loc\"\:\".*?\"'</span>, html)</span><br><span class="line">        sale = re.findall(<span class="string">r'\"view_sales\"\:\".*?\"'</span>, html)</span><br><span class="line">        <span class="comment"># print(plt)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt)):</span><br><span class="line">            price = eval(plt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            title = eval(tlt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            location = eval(loc[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            location = location.split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">            sales = eval(sale[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            sales = re.match(<span class="string">r'\d+'</span>, sales).group(<span class="number">0</span>)</span><br><span class="line">            print(price)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"月饼数据.txt"</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                print(f)</span><br><span class="line">                f.write(title + <span class="string">','</span> + price + <span class="string">','</span> + sales + <span class="string">','</span> + location + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    goods = <span class="string">'月饼'</span></span><br><span class="line">    depth = <span class="number">100</span></span><br><span class="line">    start_url = <span class="string">'https://s.taobao.com/search?q='</span> + goods</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">'&amp;s='</span> + str(<span class="number">44</span> * i)</span><br><span class="line">            print(<span class="string">'url='</span>,url)</span><br><span class="line">            html = get_html_text(url)</span><br><span class="line">            parse_page(html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Geo,Style,Line,Bar,Overlap</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">r'月饼数据.txt'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(f,sep=<span class="string">','</span>,names=[<span class="string">'title'</span>,<span class="string">'price'</span>,<span class="string">'sales'</span>,<span class="string">'location'</span>])</span><br><span class="line"></span><br><span class="line">print(df.describe())</span><br></pre></td></tr></table></figure><h3 id="生成词云"><a href="#生成词云" class="headerlink" title="生成词云"></a>生成词云</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'月饼数据.txt'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(f,sep=<span class="string">','</span>,names=[<span class="string">'title'</span>,<span class="string">'price'</span>,<span class="string">'sales'</span>,<span class="string">'location'</span>])</span><br><span class="line"></span><br><span class="line">title = df.title.values.tolist()</span><br><span class="line"></span><br><span class="line">title_s = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> title:</span><br><span class="line">    title_cut = jieba.lcut(line)</span><br><span class="line">    title_s.append(title_cut)</span><br><span class="line"></span><br><span class="line">title_clean = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停用词表</span></span><br><span class="line">stopwords = [<span class="string">"月饼"</span>,<span class="string">"礼品"</span>,<span class="string">"口味"</span>,<span class="string">"礼盒"</span>,<span class="string">"包邮"</span>,<span class="string">"【"</span>,<span class="string">"】"</span>,<span class="string">"送礼"</span>,<span class="string">"大"</span>,<span class="string">"中秋节"</span>,<span class="string">"中秋月饼"</span>,<span class="string">"2"</span>,<span class="string">"饼"</span>,<span class="string">"蓉"</span>,<span class="string">"多"</span>,<span class="string">"个"</span>,<span class="string">"味"</span>,<span class="string">"斤"</span>,<span class="string">"送"</span>,<span class="string">" "</span>,<span class="string">"老"</span>,<span class="string">"北京"</span>,<span class="string">"云南"</span>,<span class="string">"网红老"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除停用词表</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> title_s:</span><br><span class="line">    line_clean = []</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span>  line:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</span><br><span class="line">            line_clean.append(word)</span><br><span class="line">    title_clean.append(line_clean)</span><br><span class="line"></span><br><span class="line">title_clean_dist = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行去重</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> title_clean:</span><br><span class="line">    line_dist = []</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> line:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> line_dist:</span><br><span class="line">            line_dist.append(word)</span><br><span class="line">    title_clean_dist.append(line_dist)</span><br><span class="line"></span><br><span class="line">allwords_clean_dist = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> title_clean_dist:</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> line:</span><br><span class="line">        allwords_clean_dist.append(word)</span><br><span class="line"></span><br><span class="line">df_allwords_clean_dist = pd.DataFrame(&#123;<span class="string">'allwords'</span>:allwords_clean_dist&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对过滤去重词汇进行统一汇总</span></span><br><span class="line">word_count = df_allwords_clean_dist.allwords.value_counts().reset_index()</span><br><span class="line">word_count.columns = [<span class="string">'word'</span>,<span class="string">'count'</span>]</span><br><span class="line"><span class="comment"># backgroud_image = plt.imread('man.jpeg')</span></span><br><span class="line"><span class="comment"># 设置词云样式</span></span><br><span class="line">wc = WordCloud(width=<span class="number">1920</span>,height=<span class="number">1080</span>,max_words=<span class="number">2000</span>,background_color=<span class="string">'white'</span>,font_path=<span class="string">'simhei.ttf'</span>,max_font_size=<span class="number">400</span>,random_state=<span class="number">50</span>)</span><br><span class="line">wc = wc.fit_words(&#123;x[<span class="number">0</span>]:x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> word_count.head(<span class="number">100</span>).values&#125;)</span><br><span class="line">plt.imshow(wc,interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br><span class="line">wc.to_file(<span class="string">"data.png"</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fvn9yrox5lj30sg0lc45p.jpg" alt="wordcloud"></p><blockquote><p>以上参考来源：</p><ul><li>公众号<strong>恋习Python</strong>-<code>Python分析今年的月饼之王花落谁家？</code></li><li><a href="https://blog.csdn.net/fly910905/article/details/77763086" target="_blank" rel="noopener">https://blog.csdn.net/fly910905/article/details/77763086</a></li><li></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Problems_Docker</title>
      <link href="/2018/09/23/Problems-Docker/"/>
      <url>/2018/09/23/Problems-Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Problems-Docker"><a href="#Problems-Docker" class="headerlink" title="Problems_Docker"></a>Problems_Docker</h1><h2 id="Docker-pull-training-web-显示unauthorized-incorrect-username-or-password"><a href="#Docker-pull-training-web-显示unauthorized-incorrect-username-or-password" class="headerlink" title="Docker pull training/web 显示unauthorized: incorrect username or password"></a>Docker pull training/web 显示unauthorized: incorrect username or password</h2><blockquote><p>A：使用docker login进行登录之后再使用docker pull下载镜像</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Problems </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Problems_Python</title>
      <link href="/2018/09/22/Problems-Python/"/>
      <url>/2018/09/22/Problems-Python/</url>
      
        <content type="html"><![CDATA[<h1 id="Problems-of-Python"><a href="#Problems-of-Python" class="headerlink" title="Problems of Python"></a>Problems of Python</h1><h2 id="1-PyCharm-AttributeError-module-‘pip’-has-no-attribute-‘main’"><a href="#1-PyCharm-AttributeError-module-‘pip’-has-no-attribute-‘main’" class="headerlink" title="1. PyCharm:AttributeError: module ‘pip’ has no attribute ‘main’"></a>1. PyCharm:AttributeError: module ‘pip’ has no attribute ‘main’</h2><ul><li><p>解决步骤</p><ul><li><p>打开/Applications/PyCharm.app/Contents/helpers/packaging_tool.py</p></li><li><p>修改do_install和do_uninstall</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">原来：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_install</span><span class="params">(pkgs)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> pip</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        error_no_pip()</span><br><span class="line">    <span class="keyword">return</span> pip.main([<span class="string">'install'</span>] + pkgs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_uninstall</span><span class="params">(pkgs)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> pip</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        error_no_pip()</span><br><span class="line">    <span class="keyword">return</span> pip.main([<span class="string">'uninstall'</span>, <span class="string">'-y'</span>] + pkgs)</span><br><span class="line"></span><br><span class="line">修改后</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_install</span><span class="params">(pkgs)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#import pip</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">from</span> pip._internal <span class="keyword">import</span> main</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">from</span> pip <span class="keyword">import</span> main</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        error_no_pip()</span><br><span class="line">    <span class="keyword">return</span> main([<span class="string">'install'</span>] + pkgs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_uninstall</span><span class="params">(pkgs)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#import pip</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">from</span> pip._internal <span class="keyword">import</span> main</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">from</span> pip <span class="keyword">import</span> main</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        error_no_pip()</span><br><span class="line">    <span class="keyword">return</span> main([<span class="string">'uninstall'</span>, <span class="string">'-y'</span>] + pkgs)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-安装pyspider失败，提示PycURL-how-to-specify-the-SSL-backend-manually"><a href="#2-安装pyspider失败，提示PycURL-how-to-specify-the-SSL-backend-manually" class="headerlink" title="2. 安装pyspider失败，提示PycURL how to specify the SSL backend manually."></a>2. 安装pyspider失败，提示PycURL how to specify the SSL backend manually.</h2><ul><li><p>卸载已存在pycurl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 uninstall pycurl</span><br></pre></td></tr></table></figure></li><li><p>使用link-time ssl后端导出变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PYCURL_SSL_LIBRARY=openssl</span><br></pre></td></tr></table></figure></li><li><p>重新安装pycurl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install pycurl</span><br></pre></td></tr></table></figure></li><li><p>参考</p><p><a href="https://stackoverflow.com/questions/21096436/ssl-backend-error-when-using-openssl" target="_blank" rel="noopener">https://stackoverflow.com/questions/21096436/ssl-backend-error-when-using-openssl</a></p></li></ul><h2 id="3-运行pyspider提示async-True-get-object-False-no-input-False"><a href="#3-运行pyspider提示async-True-get-object-False-no-input-False" class="headerlink" title="3. 运行pyspider提示async=True, get_object=False, no_input=False"></a>3. 运行pyspider提示async=True, get_object=False, no_input=False</h2><ul><li>因为async和await从python3.7开始已经加入保留关键字中，参考<a href="https://docs.python.org/3.7/whatsnew/3.7.html" target="_blank" rel="noopener">What’s New Python3.7</a>，所以async和await不能作为函数的参数名</li><li>需要降低python版本至3.6</li></ul><h2 id="4-Curl-is-configured-to-use-SSL-but-we-have-not-been-able-to-determine-which-SSL-backend-it-is-using"><a href="#4-Curl-is-configured-to-use-SSL-but-we-have-not-been-able-to-determine-which-SSL-backend-it-is-using" class="headerlink" title="4. Curl is configured to use SSL, but we have not been able to determine which SSL backend it is using."></a>4. Curl is configured to use SSL, but we have not been able to determine which SSL backend it is using.</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 uninstall pycurl</span><br><span class="line"><span class="built_in">export</span> PYCURL_SSL_LIBRARY=openssl</span><br><span class="line"><span class="built_in">export</span> LDFLAGS=-L/usr/<span class="built_in">local</span>/opt/openssl/lib;<span class="built_in">export</span> CPPFLAGS=-I/usr/<span class="built_in">local</span>/opt/openssl/include;pip install pycurl --compile --no-cache-dir</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的系统编程工具</title>
      <link href="/2018/09/17/Python%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/09/17/Python%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="Python的系统编程工具"><a href="#Python的系统编程工具" class="headerlink" title="Python的系统编程工具"></a>Python的系统编程工具</h1><a id="more"></a><h2 id="介绍sys模块"><a href="#介绍sys模块" class="headerlink" title="介绍sys模块"></a>介绍sys模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="comment"># 分别有287和84个属性</span></span><br><span class="line">len(dir(os))</span><br><span class="line"><span class="number">287</span></span><br><span class="line">len(dir(sys))</span><br><span class="line"><span class="number">84</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.platform,sys.version,sys.maxsize</span><br><span class="line">(<span class="string">'darwin'</span>, <span class="string">'3.6.6 (v3.6.6:4cf1f54eb7, Jun 26 2018, 19:50:54) \n[GCC 4.2.1 Compatible Apple LLVM6.0 (clang-600.0.57)]'</span>, <span class="number">9223372036854775807</span>)</span><br></pre></td></tr></table></figure><ul><li><p>模块搜索路径</p><p>  sys模块使得我们可以在Python程序内部或者交互地常看模块搜索路径。sys.path是一个由目录名称字符串组成的列表，每个目录名称字符串代表正在运行的Python解释器的真正的搜索路径。</p><p>  sys.path可以用程序进程更改，比如append、extend、insert、pop、remove和del。</p><p>  <code>sys.path.append(r&#39;C:\mydir&#39;)</code></p></li><li><p>sys模块导出的其他工具</p><ul><li>显示为由字符串组成的列表的命令行参数，称为sys.argv</li><li>标准流，包括sys.stdin、sys.stdout和sys.stderr</li><li>程序可以通过调用sys.exit强制退出</li></ul></li></ul><h2 id="介绍os模块"><a href="#介绍os模块" class="headerlink" title="介绍os模块"></a>介绍os模块</h2><ul><li><p>常用的os模块</p><p>| 任务               | 工具                                                         |<br>| —————— | ———————————————————— |<br>| Shell变量          | os.environ                                                   |<br>| 运行程序           | os.system,os.popen,os.execv,os.spawnv                        |<br>| 派生进程           | os.fork,os.pipe,os.waitpid,os.kill                           |<br>| 文件描述符，文件锁 | os.open,os.read,os.write                                     |<br>| 文件处理           | os.remove,os.rename,os.mkdir,os.rmdir                        |<br>| 管理工具           | os.getcwd,os.chdir,os.chmod,os.getpid,os.listdir,os.access   |<br>| 移植工具           | os.sep,os.pathsep,os.curdir,os.path.split,os.path.join       |<br>| 路径名工具         | os.path.exists(‘path’),os.path.isdir(‘path’),os.path.getsize(‘path’) |</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">dir(os)</span><br><span class="line">len(dir(os))</span><br><span class="line">[<span class="string">'CLD_CONTINUED'</span>, <span class="string">'CLD_DUMPED'</span>, <span class="string">'CLD_EXITED'</span>, <span class="string">'CLD_TRAPPED'</span>, <span class="string">'DirEntry'</span>, <span class="string">'EX_CANTCREAT'</span>, <span class="string">'EX_CONFIG'</span>, <span class="string">'EX_DATAERR'</span>, <span class="string">'EX_IOERR'</span>, <span class="string">'EX_NOHOST'</span>, <span class="string">'EX_NOINPUT'</span>, </span><br><span class="line"> ...</span><br><span class="line"> <span class="string">'sync'</span>, <span class="string">'sys'</span>, <span class="string">'sysconf'</span>, <span class="string">'sysconf_names'</span>, <span class="string">'system'</span>, <span class="string">'tcgetpgrp'</span>, <span class="string">'tcsetpgrp'</span>, <span class="string">'terminal_size'</span>, <span class="string">'times'</span>, <span class="string">'times_result'</span>, <span class="string">'truncate'</span>, <span class="string">'ttyname'</span>, <span class="string">'umask'</span>, <span class="string">'uname'</span>, <span class="string">'uname_result'</span>, <span class="string">'unlink'</span>, <span class="string">'unsetenv'</span>, <span class="string">'urandom'</span>, <span class="string">'utime'</span>, <span class="string">'wait'</span>, <span class="string">'wait3'</span>, <span class="string">'wait4'</span>, <span class="string">'waitpid'</span>, <span class="string">'walk'</span>, <span class="string">'write'</span>, <span class="string">'writev'</span>]</span><br><span class="line"><span class="number">287</span></span><br><span class="line">dir(os.path)</span><br><span class="line">len(dir(os.path))</span><br><span class="line">[<span class="string">'__all__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'_get_sep'</span>, <span class="string">'_joinrealpath'</span>, <span class="string">'_varprog'</span>, </span><br><span class="line"> ...</span><br><span class="line"> <span class="string">'sep'</span>, <span class="string">'split'</span>, <span class="string">'splitdrive'</span>, <span class="string">'splitext'</span>, <span class="string">'stat'</span>, <span class="string">'supports_unicode_filenames'</span>, <span class="string">'sys'</span>]</span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure></li><li><p>管理工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getpid() <span class="comment"># 给出调用函数的进程IDI</span></span><br><span class="line"><span class="number">1210</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd() <span class="comment"># 返回当前的工作目录</span></span><br><span class="line"><span class="string">'/Users/entercoder'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">'/Users/entercoder/Documents'</span>) <span class="comment"># 更改当前工作目录</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/Users/entercoder/Documents'</span></span><br></pre></td></tr></table></figure></li><li><p>可移植的常量</p><p>os模块同时导出了一组用于简化跨平台编程的名称，包括具体平台相关的路径和目录分隔符、父目录和当前目录的指示器，以及底层计算机所采用的换行符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.sep <span class="comment"># 运行平台所采用的目录分隔符</span></span><br><span class="line"><span class="string">'/'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.pathsep <span class="comment"># 在目录列表中分隔目录的字符</span></span><br><span class="line"><span class="string">':'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.pardir <span class="comment"># 上一级目录</span></span><br><span class="line"><span class="string">'..'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.curdir <span class="comment"># 当前目录</span></span><br><span class="line"><span class="string">'.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.linesep <span class="comment"># 换行符</span></span><br><span class="line"><span class="string">'\n'</span></span><br></pre></td></tr></table></figure><h3 id="常见的os-path工具"><a href="#常见的os-path工具" class="headerlink" title="常见的os.path工具"></a>常见的os.path工具</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断文件类型</span></span><br><span class="line">os.path.isdir(<span class="string">'/Users/entercoder/Documents/entercoder1993.github.io_back'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">os.path.isfile(<span class="string">'/Users/entercoder/Documents/entercoder1993.github.io_back'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="comment"># 判断文件是否存在</span></span><br><span class="line">os.path.exists(<span class="string">'/Users/entercoder/Documents/entercoder1993.github.io_back'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># 获取文件的大小</span></span><br><span class="line">os.path.getsize(<span class="string">'/Users/entercoder/Documents/entercoder1993.github.io_back'</span>)</span><br><span class="line"><span class="number">512</span></span><br><span class="line"><span class="comment"># 分离目录和文件名</span></span><br><span class="line">os.path.split(<span class="string">'/Users/entercoder/Documents/entercoder1993.github.io_back'</span>) </span><br><span class="line">(<span class="string">'/Users/entercoder/Documents'</span>, <span class="string">'entercoder1993.github.io_back'</span>)</span><br><span class="line"><span class="comment"># 合并目录和文件名</span></span><br><span class="line">os.path.join(<span class="string">'/Users/entercoder/Documents'</span>, <span class="string">'entercoder1993.github.io_back'</span>)</span><br><span class="line"><span class="string">'/Users/entercoder/Documents/entercoder1993.github.io_back'</span></span><br><span class="line"><span class="comment"># 返回目录名</span></span><br><span class="line">os.path.dirname(<span class="string">'/Users/entercoder/Documents/Note-Book/README.md'</span>)</span><br><span class="line"><span class="string">'/Users/entercoder/Documents/Note-Book/'</span></span><br><span class="line"><span class="comment"># 返回文件名</span></span><br><span class="line">os.path.basename(<span class="string">'/Users/entercoder/Documents/Note-Book/README.md'</span>)</span><br><span class="line"><span class="string">'README.md'</span></span><br><span class="line"><span class="comment"># 分离文件的扩展名</span></span><br><span class="line">os.path.splitext(<span class="string">'/Users/entercoder/Documents/Note-Book/README.md'</span>)</span><br><span class="line">(<span class="string">'/Users/entercoder/Documents/Note-Book/README'</span>，<span class="string">'.md'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之进程和线程</title>
      <link href="/2018/09/13/Python%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/09/13/Python%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Python之进程和线程"><a href="#Python之进程和线程" class="headerlink" title="Python之进程和线程"></a>Python之进程和线程</h1><blockquote><p>对于操作系统来说，一个任务就是一个进程(Process)，比如打开浏览器就是启动一个浏览器进程，打开记事本，就启动了记事本进程。而且有些进程还能同时做几件事情，要同时做几件事，就需要同步运行多个“子任务”，进程内的这些“子任务”称为线程(Thread)。</p></blockquote><p>Python执行多进程有以下两种解决方案：</p><ol><li>多进程模式；</li><li>多线程模式；</li><li>多进程+多线程模式</li></ol><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>Unix/Linux提供了一个fork()系统调用。fork()调用一次返回两次，因为操作系统自动把当前进程(父进程)复制了一份(称为子进程)，然后分别在父进程和紫禁城内返回。</p><p>子进程永远返回<code>0</code>，父进程返回子进程的ID。因为一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Process (%s) start...'</span> % os.getpid())</span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'i am process (%s) and my parent is %s.'</span> % (os.getpid(),os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'I (%s) just created a child process (%s).'</span> % (os.getpid(), pid))</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Process (<span class="number">2291</span>) start...</span><br><span class="line">I (<span class="number">2291</span>) just created a child process (<span class="number">2294</span>).</span><br><span class="line">i am process (<span class="number">2294</span>) <span class="keyword">and</span> my parent <span class="keyword">is</span> <span class="number">2291.</span></span><br></pre></td></tr></table></figure><p>有了fork调用，一个进程在接到新的任务时就可以复制出一个子进程来处理新任务，常见的Apache服务器就是由父进程监听端口，每当有新的http请求时，就fork出子进程来处理新的http请求。</p><p>缺点：因为Windows没有fork调用，所以上述代码在Windows上无法运行。</p><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><p>multiprocessing提供了一个Process类来代表一个进程对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run child process %s (%s)...'</span> % (name,os.getpid()))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s. '</span> % os.getpid())</span><br><span class="line">    p = Process(target=run_proc,args=(<span class="string">'test'</span>,))</span><br><span class="line">    print(<span class="string">'Child process will start.'</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'Child process end'</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parent process <span class="number">2357.</span></span><br><span class="line">Child process will start.</span><br><span class="line">Run child process test (<span class="number">2360</span>)...</span><br><span class="line">Child process end</span><br></pre></td></tr></table></figure><p>创建子进程时，只需要传入一个执行函数和函数参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()简单多了。</p><h3 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h3><p>Pool可以启动大量的子进程，可以用进程池的方式批量创建子进程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run task %s (%s)...'</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    <span class="comment"># 调用close后就不能添加新的Process了</span></span><br><span class="line">    p.close()</span><br><span class="line">    <span class="comment"># Pool对象调用join方法会等待所有进程执行完毕</span></span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All subprocesses done.'</span>)</span><br></pre></td></tr></table></figure><h3 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h3><p>subprocess模块可以非常方便地启动一个子进程，然后控制其输入和输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">print(<span class="string">'$ nslookup www.python.org'</span>)</span><br><span class="line">r = subprocess.call([<span class="string">'nslookup'</span>,<span class="string">'www.python.org'</span>])</span><br><span class="line">print(<span class="string">'Exit code:'</span>,r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入可以通过communicate()</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">print(<span class="string">'$ nslookup'</span>)</span><br><span class="line">p = subprocess.Popen([<span class="string">'nslookup'</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">output, err = p.communicate(<span class="string">b'set q=mx\npython.org\nexit\n'</span>)</span><br><span class="line">print(output.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(<span class="string">'Exit code:'</span>, p.returncode)</span><br></pre></td></tr></table></figure><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>Python的multiprocessing模块包装了底层的机制，通过了Queue、Pipes等多种方式交换数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以Queue为例</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        value = q.get(<span class="keyword">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from eue.'</span> % value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。Python的标准库提供了<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块。绝大多数，我们只需使用<code>threading</code>这个高级模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name,n))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</span><br><span class="line">t = threading.Thread(target=loop, name=<span class="string">'LoopThread'</span>)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</span><br></pre></td></tr></table></figure><p>任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的threading模块里有个current_thread()函数，它就永远返回当前线程的实例。主线程实例的名字叫MainThread，子线程的名字在创建时指定，我们用LoopThread命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为Thread-1，Thread-2……</p><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置静态IP地址</title>
      <link href="/2018/09/12/CentOS7%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/09/12/CentOS7%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-配置静态IP地址"><a href="#CentOS-7-配置静态IP地址" class="headerlink" title="CentOS 7 配置静态IP地址"></a>CentOS 7 配置静态IP地址</h1><a id="more"></a><ol><li><p>切换到网卡列表目录</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> /etc/sysconfig/network-scripts/</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fv76u0bmesj30nn08o3zi.jpg" alt="network"></p><p>一般第一个就是你的网卡，若是服务器，可能会有多个以ifcfg-em开头的网卡，分别对应服务器的网卡接口，在这里我的网卡为<code>ifcfg-eth0</code></p><ol start="2"><li><p>编辑网卡</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vi</span> ifcfg-eth0</span><br><span class="line"></span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=yes</span><br><span class="line"><span class="comment"># IP地址</span></span><br><span class="line">IPADDR=102.168.1.100</span><br><span class="line"><span class="comment"># 子网掩码</span></span><br><span class="line">PREFIX=24</span><br><span class="line"><span class="comment"># 网关地址</span></span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line"><span class="comment"># 设置DNS地址</span></span><br><span class="line">DNS1=202.96.134.133</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fv7739ctbgj30fn0enwf8.jpg" alt="ipconfig"></p><p>退出vi，使用<code>:wq</code>命令</p><ol start="3"><li><p>保存退出，重启网络服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$service</span> network restart</span><br></pre></td></tr></table></figure></li></ol><p>若成功，则出现如下提示<br><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fv77633a05j30of01kgll.jpg" alt="success"></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫开发实战</title>
      <link href="/2018/09/11/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
      <url>/2018/09/11/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Python网络爬虫开发实战"><a href="#Python网络爬虫开发实战" class="headerlink" title="Python网络爬虫开发实战"></a>Python网络爬虫开发实战</h1><h2 id="一、开发环境配置"><a href="#一、开发环境配置" class="headerlink" title="一、开发环境配置"></a>一、开发环境配置</h2><h3 id="1-1-Python3"><a href="#1-1-Python3" class="headerlink" title="1.1 Python3"></a>1.1 Python3</h3><ul><li>相关链接<ul><li>官方网站：<a href="https://www.python.org" target="_blank" rel="noopener">https://www.python.org</a></li><li>下载地址：<a href="https://www.python.org/downloads" target="_blank" rel="noopener">https://www.python.org/downloads</a></li><li>第三方库：<a href="https://pypi.org" target="_blank" rel="noopener">https://pypi.org</a></li><li>官方文档：<a href="https://docs.python.org/3" target="_blank" rel="noopener">https://docs.python.org/3</a> <a href="http://docspy3zh.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">中文文档</a></li><li>中文教程：<ul><li><a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰Python3教程</a></li></ul></li></ul></li></ul><h3 id="1-2-请求库的安装"><a href="#1-2-请求库的安装" class="headerlink" title="1.2 请求库的安装"></a>1.2 请求库的安装</h3><h4 id="Request的安装"><a href="#Request的安装" class="headerlink" title="Request的安装"></a>Request的安装</h4><ul><li>相关链接<ul><li>GitHub：<a href="https://github.com/requests/requests" target="_blank" rel="noopener">https://github.com/requests/requests</a></li><li>PyPI：<a href="https://pypi.org/project/requests/" target="_blank" rel="noopener">https://pypi.org/project/requests/</a></li><li>官方文档：<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="noopener">http://docs.python-requests.org/en/master/</a></li><li>中文文档：<a href="http://cn.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener">http://cn.python-requests.org/zh_CN/latest/</a></li></ul></li></ul><h4 id="Selenium的安装"><a href="#Selenium的安装" class="headerlink" title="Selenium的安装"></a>Selenium的安装</h4><ul><li>相关链接<ul><li>官方网站：<a href="https://www.seleniumhq.org/" target="_blank" rel="noopener">https://www.seleniumhq.org/</a></li><li>GitHub：<a href="https://github.com/SeleniumHQ/Selenium" target="_blank" rel="noopener">https://github.com/SeleniumHQ/Selenium</a></li><li>PyPI：<a href="https://pypi.org/project/selenium/" target="_blank" rel="noopener">https://pypi.org/project/selenium/</a></li><li>官方文档：<a href="http://selenium-python.readthedocs.io/" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/</a></li><li>中文文档：<a href="http://selenium-python-zh.readthedocs.io" target="_blank" rel="noopener">http://selenium-python-zh.readthedocs.io</a></li></ul></li></ul><h4 id="ChromeDriver的安装"><a href="#ChromeDriver的安装" class="headerlink" title="ChromeDriver的安装"></a>ChromeDriver的安装</h4><ul><li>相关链接<ul><li>官方地址：<a href="http://chromedriver.chromium.org/" target="_blank" rel="noopener">http://chromedriver.chromium.org/</a></li><li>下载地址：<a href="https://chromedriver.storage.googleapis.com/index.html?path=2.40/（需根据Chrome的版本下载对应的ChromeDriver）" target="_blank" rel="noopener">https://chromedriver.storage.googleapis.com/index.html?path=2.40/（需根据Chrome的版本下载对应的ChromeDriver）</a></li></ul></li><li>环境变量配置：<ul><li>Windows：将chromedriver.exe文件拖到Python的Scripts目录下即可。</li><li>Linux和Mac下<ul><li>将文件移动到<code>/usr/bin</code>目录下<code>suod mv chromedriver /usr/bin</code></li><li>或者将ChromeDriver配置到<code>$PATH export PATH=&quot;$PATH:/usr/local/chromedriver&quot;</code></li></ul></li></ul></li></ul><h4 id="GeckoDriver的安装"><a href="#GeckoDriver的安装" class="headerlink" title="GeckoDriver的安装"></a>GeckoDriver的安装</h4><ul><li>相关链接<ul><li>Github：<a href="https://github.com/mozilla/geckodriver" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver</a></li><li>下载地址：<a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases</a></li></ul></li></ul><h4 id="PhantomJS的安装"><a href="#PhantomJS的安装" class="headerlink" title="PhantomJS的安装"></a>PhantomJS的安装</h4><ul><li>相关链接<ul><li>官方网站：<a href="http://phantomjs.org" target="_blank" rel="noopener">http://phantomjs.org</a></li><li>官方文档：<a href="http://phantomjs.org/quick-start.html" target="_blank" rel="noopener">http://phantomjs.org/quick-start.html</a></li><li>下载地址：<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">http://phantomjs.org/download.html</a></li><li>API接口说明：<a href="http://phantomjs.org/api/command-line.html" target="_blank" rel="noopener">http://phantomjs.org/api/command-line.html</a></li></ul></li></ul><h4 id="aiohttp的安装"><a href="#aiohttp的安装" class="headerlink" title="aiohttp的安装"></a>aiohttp的安装</h4><ul><li>相关链接<ul><li>官方文档：<a href="https://docs.aiohttp.org/en/stable/" target="_blank" rel="noopener">https://docs.aiohttp.org/en/stable/</a></li><li>GitHub：<a href="https://github.com/aio-libs/aiohttp" target="_blank" rel="noopener">https://github.com/aio-libs/aiohttp</a></li><li>PyPI：<a href="https://pypi.org/project/aiohttp/" target="_blank" rel="noopener">https://pypi.org/project/aiohttp/</a></li></ul></li></ul><h3 id="1-3-解析库的安装"><a href="#1-3-解析库的安装" class="headerlink" title="1.3 解析库的安装"></a>1.3 解析库的安装</h3><h4 id="lxml的安装"><a href="#lxml的安装" class="headerlink" title="lxml的安装"></a>lxml的安装</h4><ul><li>相关链接<ul><li>官方网站：<a href="https://lxml.de/" target="_blank" rel="noopener">https://lxml.de/</a></li><li>GitHub：<a href="https://github.com/lxml/lxml" target="_blank" rel="noopener">https://github.com/lxml/lxml</a></li><li>PyPI：<a href="https://pypi.org/project/lxml/" target="_blank" rel="noopener">https://pypi.org/project/lxml/</a></li></ul></li></ul><h4 id="Beautiful-Soup4的安装"><a href="#Beautiful-Soup4的安装" class="headerlink" title="Beautiful Soup4的安装"></a>Beautiful Soup4的安装</h4><ul><li>相关链接<ul><li>官方网站：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/</a></li><li>中文文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</a></li><li>PyPI：<a href="https://pypi.org/project/beautifulsoup4/" target="_blank" rel="noopener">https://pypi.org/project/beautifulsoup4/</a></li></ul></li></ul><h4 id="pyquery的安装"><a href="#pyquery的安装" class="headerlink" title="pyquery的安装"></a>pyquery的安装</h4><ul><li>相关链接<ul><li>官方网站：<a href="https://pythonhosted.org/pyquery/" target="_blank" rel="noopener">https://pythonhosted.org/pyquery/</a></li><li>GitHub：<a href="https://github.com/gawel/pyquery/" target="_blank" rel="noopener">https://github.com/gawel/pyquery/</a></li><li>PyPI：<a href="https://pypi.org/project/pyquery/" target="_blank" rel="noopener">https://pypi.org/project/pyquery/</a></li></ul></li></ul><h4 id="tesserocr的安装"><a href="#tesserocr的安装" class="headerlink" title="tesserocr的安装"></a>tesserocr的安装</h4><ul><li>相关链接<ul><li>tesserocr GitHub：<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract</a></li><li>tesserocr PyPI：<a href="https://pypi.org/project/tesserocr/" target="_blank" rel="noopener">https://pypi.org/project/tesserocr/</a></li><li>tesseract 下载地址：<a href="https://github.com/tesseract-ocr/tesseract/wiki" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki</a></li><li>tesseract GitHub：<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract</a></li><li>tesseract语言包：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tessdata</a></li><li>tesseract文档：<a href="https://github.com/tesseract-ocr/tesseract/wiki/Documentation" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Documentation</a></li></ul></li></ul><h3 id="1-4-数据库的安装"><a href="#1-4-数据库的安装" class="headerlink" title="1.4 数据库的安装"></a>1.4 数据库的安装</h3><h4 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h4><h4 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h4><h4 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h4><h3 id="1-5-存储库的安装"><a href="#1-5-存储库的安装" class="headerlink" title="1.5 存储库的安装"></a>1.5 存储库的安装</h3><h4 id="PyMySQL的安装"><a href="#PyMySQL的安装" class="headerlink" title="PyMySQL的安装"></a>PyMySQL的安装</h4><h4 id="PyMongo的安装"><a href="#PyMongo的安装" class="headerlink" title="PyMongo的安装"></a>PyMongo的安装</h4><h4 id="redis-py的安装"><a href="#redis-py的安装" class="headerlink" title="redis-py的安装"></a>redis-py的安装</h4><h4 id="RedisDump的安装"><a href="#RedisDump的安装" class="headerlink" title="RedisDump的安装"></a>RedisDump的安装</h4><h3 id="1-6-Web库的安装"><a href="#1-6-Web库的安装" class="headerlink" title="1.6 Web库的安装"></a>1.6 Web库的安装</h3><h4 id="Flask的安装"><a href="#Flask的安装" class="headerlink" title="Flask的安装"></a>Flask的安装</h4><h4 id="Tornado的安装"><a href="#Tornado的安装" class="headerlink" title="Tornado的安装"></a>Tornado的安装</h4><h3 id="1-7-App爬取相关的库安装"><a href="#1-7-App爬取相关的库安装" class="headerlink" title="1.7 App爬取相关的库安装"></a>1.7 App爬取相关的库安装</h3><h4 id="Charles的安装"><a href="#Charles的安装" class="headerlink" title="Charles的安装"></a>Charles的安装</h4><h4 id="mitmproxy的安装"><a href="#mitmproxy的安装" class="headerlink" title="mitmproxy的安装"></a>mitmproxy的安装</h4><h3 id="1-8-爬虫框架的安装"><a href="#1-8-爬虫框架的安装" class="headerlink" title="1.8 爬虫框架的安装"></a>1.8 爬虫框架的安装</h3><h4 id="pyspider的安装"><a href="#pyspider的安装" class="headerlink" title="pyspider的安装"></a>pyspider的安装</h4><p>安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyspider</span><br></pre></td></tr></table></figure><p>问题：</p><p>Curl is configured to use SSL, but we have not been able to determine which SSL backend it is using.</p><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 uninstall pycurl</span><br><span class="line"><span class="built_in">export</span> PYCURL_SSL_LIBRARY=openssl</span><br><span class="line"><span class="built_in">export</span> LDFLAGS=-L/usr/<span class="built_in">local</span>/opt/openssl/lib;<span class="built_in">export</span> CPPFLAGS=-I/usr/<span class="built_in">local</span>/opt/openssl/include;pip install pycurl --compile --no-cache-dir</span><br></pre></td></tr></table></figure><h4 id="Scrapy的安装"><a href="#Scrapy的安装" class="headerlink" title="Scrapy的安装"></a>Scrapy的安装</h4><h4 id="Scrapy-Splash的安装"><a href="#Scrapy-Splash的安装" class="headerlink" title="Scrapy-Splash的安装"></a>Scrapy-Splash的安装</h4><h4 id="Scrapy-Redis的安装"><a href="#Scrapy-Redis的安装" class="headerlink" title="Scrapy-Redis的安装"></a>Scrapy-Redis的安装</h4><h3 id="1-9-部署库相关的库的安装"><a href="#1-9-部署库相关的库的安装" class="headerlink" title="1.9 部署库相关的库的安装"></a>1.9 部署库相关的库的安装</h3><h4 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h4><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brew</span> cask install docker</span><br></pre></td></tr></table></figure></li></ul><h4 id="Scrapyd的安装"><a href="#Scrapyd的安装" class="headerlink" title="Scrapyd的安装"></a>Scrapyd的安装</h4><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pip3</span> install scrapyd</span><br></pre></td></tr></table></figure></li><li><p>配置</p><ul><li>新建配置文件/etc/scrapyd/scrapyd.conf</li></ul></li></ul><h4 id="Scrapyd的安装-1"><a href="#Scrapyd的安装-1" class="headerlink" title="Scrapyd的安装"></a>Scrapyd的安装</h4><h4 id="Scrapyd-Client的安装"><a href="#Scrapyd-Client的安装" class="headerlink" title="Scrapyd-Client的安装"></a>Scrapyd-Client的安装</h4><h4 id="Scrapyd-API的安装"><a href="#Scrapyd-API的安装" class="headerlink" title="Scrapyd API的安装"></a>Scrapyd API的安装</h4><h4 id="Scrapyrt的安装"><a href="#Scrapyrt的安装" class="headerlink" title="Scrapyrt的安装"></a>Scrapyrt的安装</h4><h4 id="Gerapy的安装"><a href="#Gerapy的安装" class="headerlink" title="Gerapy的安装"></a>Gerapy的安装</h4><h2 id="二、爬虫基础"><a href="#二、爬虫基础" class="headerlink" title="二、爬虫基础"></a>二、爬虫基础</h2><h3 id="2-1-HTTP基本原理"><a href="#2-1-HTTP基本原理" class="headerlink" title="2.1 HTTP基本原理"></a>2.1 HTTP基本原理</h3><blockquote><p><strong>请求</strong>网站并<strong>提取</strong>数据的<strong>自动化</strong>程序</p></blockquote><ul><li><p>URI和URL</p><ul><li><p>URI全称Uniform Resource Identifier，即统一资源标志符</p></li><li><p>URL全称Universal Resource Locator，即统一资源定位符</p></li><li><p>URL是URI的子集</p></li><li><p>另一个子类为URN全称Universal Resource Name，即统一资源名称</p></li><li><p>关系</p><p>  <img src="https://ws2.sinaimg.cn/large/006tNc79gy1ft42wp69kxj308704c74c.jpg" alt="img"></p></li></ul></li><li><p>超文本(hypertext)，网页就是超文本解析而成的。</p></li><li><p>HTTP和HTTPS</p><ul><li>HTTP全称Hyper Text Transfer Protocol，中文名称:超文本传输协议。是用于从网络传输文本数据到本地浏览器的传送协议，它能保证高效而准确地传送超文本文档。</li><li>HTTPS全称Hyper Text Transfer Protocol voer Secure  Socket Layer，是以安全为目标的HTTP通道，即HTTP的安全版，HTTP下加入SSL层，简称HTTPS<ul><li>作用:<ul><li>建立一个信息安全通道来保证数据传输的安全</li><li>确认网站的真实性，凡是使用了HTTPS的网站，都可以通过点击浏览地址栏的锁头标志来查看网站认证之后的真实信息，也可以通过CA机构颁发的安全签章来查询。</li></ul></li></ul></li></ul></li><li><p>HTTP请求过程</p><ol><li>浏览器向网站所在的服务器发送一个请求</li><li>网站服务器接受到这个请求后进行处理和解析</li><li>返回对应的响应（响应包含页面的源代码等内容）</li><li>传回给浏览器（浏览器对其进行解析，便将网页呈现出来）</li></ol><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1ft4s5tla9lj30c204o3yt.jpg" alt="img"></p><ol start="5"><li><p>Chrome浏览器</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1ft4s9daqiqj31hb0budj9.jpg" alt="image-20180710151010965"></p><ul><li>Name：请求的名称，一般会将URL的最后一部分内容当做名称</li><li>Status：响应的状态码，200代表响应是正常的</li><li>Type：请求的文档类型</li><li>Initiator：请求源。用来标记请求是由哪个对象或进程发起的</li><li>Size：从服务器下载的文件和请求的资源大小。如果从缓存中取得的数据，则该列会像是from cache</li><li>Time：发起请求到获取响应所用的总时间</li><li>Waterfall：网络请求的可视化瀑布流</li></ul></li></ol></li><li><p>请求</p><ul><li><p>请求方法</p><ul><li>GET</li><li>POST</li><li>区别<ul><li>GET请求中的参数包含在URL里面，数据可以在URL中看到，而POST请求的URL不会包含这些数据，数据都是通过表单形式传输的，会包含在请求体中</li><li>GET请求提交的数据最多只有1024字节，而POST方式没有限制</li></ul></li><li>其他方法：<ul><li>GET、HEAD、POST、PUT、DELETE、OPTIONS、CONNECT、TRACE等</li></ul></li></ul><p>| 方法    | 描述                                                         |<br>| ——- | ———————————————————— |<br>| GET     | 请求页面，并返回页面内容                                     |<br>| HEAD    | 类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头 |<br>| POST    | 大多用于提交表单或上传文件，数据包含在请求体中               |<br>| PUT     | 从客户端向服务器传送的数据取代指定文档中的内容               |<br>| DELETE  | 请求服务器删除指定的页面                                     |<br>| CONNECT | 把服务器当做跳板，让服务器代替客户端访问其他网页             |<br>| OPTIONS | 允许客户端查看服务器的性能                                   |<br>| TRACE   | 回显服务器收到的请求，主要用于测试或诊断                     |</p></li><li><p>请求的网址：即统一资源定位符URL，它可以唯一确定我们想请求的资源</p></li><li><p>请求头</p><ul><li>Accept：请求报头域，用于指定客户端可接受哪些类型的信息</li><li>Accept-Language：制定客户端可接受的语言类型</li><li>Accept-Encoding：指定客户端可接受的内容编码</li><li>Host：用于请求资源的主机IP和端口号，其内容为请求URL的原始服务器或网关的位置</li><li>Cookie：常用复数形式Cookies，这是网站为了辨别用户进行会话跟踪而存储在用户本地的数据。主要功能是维持当前访问会话。</li><li>Referer：便是请求是从哪个页面发过来的，服务器可以拿到这一信息并做相应的处理，如做来源统计、防盗链处理等。</li><li>User-Agent：简称UA，它是一个特殊的字符串头，可以使服务器识别客户使用的操作系统及版本、浏览器及版本等信息。在做爬虫时加上此信息，可以伪装为浏览器；如果不加，很可能会被识别为爬虫。</li><li>Content-Type：也叫互联网媒体类型或者MIME类型，如HTTP协议消息头中，它用来表示具体请求中的媒体类型信息。text\html代表HTML格式，image/gif代表GIF图片，application/json代表JSON类型等。</li></ul></li><li><p>请求体：登录之前，填写的用户名和密码信息，提交时这些内容就会以表单数据的形式提交给服务器，只有有设置Request Headers中的Content-Type为application/x-www-form-urlencoded时，才会以表单数据的形式提交。</p><p>| Content-Type                      | 提交数据的方式 |<br>| ——————————— | ————– |<br>| application/x-www-form-urlencoded | 表单数据       |<br>| mulitipart/form-data              | 表单文件上传   |<br>| application/json                  | 序列化JSON数据 |<br>| text/xml                          | XML数据        |</p></li></ul></li><li><p>响应</p><ul><li><p>响应状态码（Response Status Code）</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ft6aro73clj30is0o4wix.jpg" alt="img"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ft6arvf6lcj30in03q74u.jpg" alt="img"></p></li><li><p>响应头（Response Headers）</p><ul><li>Date：标识响应产生的时间</li><li>Last-Moidfied：指定资源的最后修改时间</li><li>Content-Encoding：指定响应内容的编码</li><li>Server：包含服务器的信息，比如名称、版本号等</li><li>Content-Type：文档类型，指定返回的数据类型是什么就返回什么类型</li><li>Set-Cookie：设置Cookies。响应头中的Set-Cookie告诉浏览器需要将此内容放在Cooikes中，下次请求携带Cookies请求</li><li>Expires：指定响应的过期时间，可以使代理服务器或浏览器将加载的内容更新到缓存中。如再次访问时，就可以直接从缓存中加载。</li></ul></li><li><p>响应体（Response Body）：响应的正文数据都在响应体重，比如请求网页时，它的响应就是网页的HTML代码。爬虫请求网页后，要解析的内容就是响应体。</p></li></ul></li></ul><h3 id="2-2-网页基础"><a href="#2-2-网页基础" class="headerlink" title="2.2 网页基础"></a>2.2 网页基础</h3><ul><li><p>网页可以分成三大部分：HTML、CSS和JavaScript</p><ul><li>HTML（Hyper Text Markup Language，即超文本标记语言）：是用来描述网页的一种协议</li><li>CSS（Cascading Sytle Sheet，即层叠样式表）：“层叠”是指当在HTML中引用了数个样式文件，并且样式发生冲突时，浏览器能依据层叠顺序处理。“样式”指网页中文字大小、颜色、元素间距、排列等格式</li><li>JavaScript：简称JS，是一种脚本语言。HTML和CSS配合使用，提供给用户的只是一种静态信息，缺乏交互性。网页里的交互和动画效果，通常都是JavaScript的功劳。它的出现使得用户与信息之间不只是一种浏览与显示的关系，而是实现了一种实时、动态、交互的页面功能。</li></ul></li><li><p>网页的结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义文档类型 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- head标签内定义了一些页面的配置和引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定网页编码为utf-8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 网页的标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- div标签定义了网页中的区块，id是container，id的内容在网页中是唯一的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- class所谓wrapper --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                    Hello World</span><br><span class="line">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    Hello,This iis a paragraph.</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>节点树及节点间的关系：在HTML中，所有标签定义的内容都是节点，它们构成了HTML DOM树</p><blockquote><p>DOM(Document Object Model)文档对象模型。它定义了访问HTML和XML文档的标准</p></blockquote><ul><li><p>W3C DOM标准被分为3个不同的部分</p><ol><li>核心DOM：针对任何结构化文档的标准模型</li><li>XML DOM：针对XML文档的标准模型</li><li>HTML DOM：针对HTML文档的标准模型</li></ol></li><li><p>根据W3C的HTML DOM标准，HTML文档中的所有内容都是节点</p><ul><li>整个文档是一个文档节点</li><li>每个HTML元素是元素节点</li><li>HTML元素内的文本是文本节点</li><li>每个HTML属性都是属性节点</li><li>注释是注释节点</li></ul></li><li><p>节点树</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1ftnbc6u3r1j30di078mxt.jpg" alt="img"></p></li><li><p>节点树及节点之间的关系</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1ftnbdr0yg5j30au078aaf.jpg" alt="img"></p></li></ul></li><li><p>CSS选择器的语法规则</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftnbi5yxaaj30le04c0tf.jpg" alt="img"></p></li></ul><ul><li><p>节点树</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1ftnbc6u3r1j30di078mxt.jpg" alt="img"></p></li><li><p>节点树及节点之间的关系</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1ftnbdr0yg5j30au078aaf.jpg" alt="img"></p></li></ul><ul><li><p>CSS选择器的语法规则</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftnbi5yxaaj30le04c0tf.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1ftnbjot2cdj30ld0n80y2.jpg" alt="img"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftnblw5mb1j30lq02wgm4.jpg" alt="img"></p></li></ul><h3 id="2-3-爬虫的基本原理"><a href="#2-3-爬虫的基本原理" class="headerlink" title="2.3 爬虫的基本原理"></a>2.3 爬虫的基本原理</h3><ul><li><p>爬虫概述：爬虫就是获取网页并提取和保存信息的自动化程序。</p><ol><li>获取网页：获取网页的源代码，并从源代码中提取想要的信息</li><li>提取信息：分析网页源代码，从中提取我们想要的数据。<ul><li>正则表达式提取，这是一个万能的方法，但是在构造时比较复杂且易出错。</li><li>根据网页节点属性、CSS选择器或XPath来提取网页信息的库：如Beautiful Soup、pyquery、lxml。</li></ul></li><li>保存数据：可以简单保存为文本或JSON文本，也可以保存到数据库，如MySQL和MongoDB等，也可以保存至远程服务器。</li><li>自动化程序：爬虫可以替代我们来完成爬取工作的自动化程序，他可以在爬取过程中进行各种异常处理、错误重试等操作，以确保爬取持续高效地运行。</li></ol></li><li><p>能抓怎样的数据：HTML源代码、二进制数据、JSON字符串等，只要在浏览器里面可以访问得到，就可以将其抓取下来。</p></li><li><p>JavaScript渲染页面</p><p>网页越来越多地采用Ajax、前端模块化工具来构建，整个网页可能都是由JavaScript渲染出来的，原始的HTML代码就是一个空壳。使用urlib或requests请求当前页面时，我们只能得到这个HTML代码，它不会帮助我们去继续加载这个JavaScript文件。</p><ul><li>解决方法<ul><li>分析Ajax接口</li><li>使用Selenium、Splash等库实现模拟JavaScript渲染</li></ul></li></ul></li></ul><h3 id="2-4-会话和Cookies"><a href="#2-4-会话和Cookies" class="headerlink" title="2.4 会话和Cookies"></a>2.4 会话和Cookies</h3><h4 id="无状态HTTP"><a href="#无状态HTTP" class="headerlink" title="无状态HTTP"></a>无状态HTTP</h4><p>HTTP协议对事务处理是没有记忆能力的，即服务器不知道客户端是什么状态。当我们向服务器发送请求后，服务器解析请求，然后返回对应的响应，服务器负责完成这个过程，该过程是完全独立的，服务器不会记录前后状态的变化，缺少状态记录。若后续需要处理前面的信息，则必须重传，这导致需要额外传递一些前面的重复请求，才能获取后续响应。</p><p>会话和Cookies可以保持HTTP连接的状态，会话在服务端，Cookies在客户端。浏览器在下次访问网页时会自动附带上Cookies发送给服务器，服务器通过识别Cookies并鉴定出是哪个用户，然后再判断用户是否是登录状态，然后返回对应的响应。</p><p>会话和Cookies可以保持HTTP连接的状态，会话在服务端，Cookies在客户端。浏览器在下次访问网页时会自动附带上Cookies发送给服务器，服务器通过识别Cookies并鉴定出是哪个用户，然后再判断用户是否是登录状态，然后返回对应的响应。</p><ul><li>会话：在Web中，会话对象用来存储特定用户会话所需的属性及配置信息。当用户在应用程序的Web也之间跳转存储在会话对象中的变量将不会丢失，而是在用户会话中一直存在下去。当用户请求来自应用程序的Web页时，如果该用户还没有会话，则Web服务器自动创建一个会话对象。当会话过期或被放弃后，服务器将终止该会话。</li><li>Cookies：Cookies指某些网站为了辨别用户身份、进行会话跟踪而存储在用户本地端上的数据。<ul><li>会话维持</li><li>属性结构<ul><li>Name：Cookies的名称，一旦创建不可更改</li><li>Value：该Cookies的值。如果值为Unicode字符，需要为字符编码。如果为二进制数据，则需要用BASE64编码</li><li>Domain：可以访问该Cookie的域名</li><li>Max Age：Cookie失效的时间，单位为秒，若为正数，则Cookie在Max Age秒之后失效。若为负数，关闭浏览器即失效。</li><li>Path：该Cookie的使用路径。若设置为/，则本域名下所有页面都可以访问该Cookie</li><li>Size：Cookie的大小</li><li>HTTP：Cookie的httponly属性。若为True，则只有在HTTP头中带有此Cookie的信息，而不能通过document.cookie来访问此Cookie</li><li>Secure：该Cookie是否仅被使用安全协议传输。安全协议有HTTPS和SSL等，在网络上传输数据之间先将数据加密。默认为false</li></ul></li></ul></li><li>常见误区<ul><li>除非程序通知服务器删除一个会话，否则服务器会一直保留。</li><li>关闭浏览器不会导致会话被删除，这就需要服务器为会话设置一个失效时间，当距离客户端上一次使用会话的时间超过这个失效时间时，服务器就可以认为客户端已停止活动，然后才会将会话删除。</li></ul></li></ul><h3 id="2-5-代理的基本原理"><a href="#2-5-代理的基本原理" class="headerlink" title="2.5 代理的基本原理"></a>2.5 代理的基本原理</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>代理实际上是指代理服务器，英文叫作proxy server，他的功能是代理网络用户去取得网络信息。形象地说，它是网络信息的中转站。如果设置了代理服务器，本机不是直接向Web服务器发起请求，而是向代理服务器发出请求，请求会发送给代理服务器，然后代理服务器再发送给Web服务器，接着由代理服务器再把Web服务器返回的响应转发给本机。<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><ul><li><p>作用</p><ul><li>突破IP访问限制，访问一些平时不能访问的站点</li><li>访问一些单位或团体内部资源：比如使用教育网内地址段免费代理服务器，就可以对教育网开放的各类FTP下载上传，以及各类资料查询共享等服务</li><li>提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外接的信息通过时，同时也将其保存在缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度。</li><li>隐藏真实IP</li></ul></li><li><p>爬虫代理</p></li><li><p>作用</p><ul><li>突破IP访问限制，访问一些平时不能访问的站点</li><li>访问一些单位或团体内部资源：比如使用教育网内地址段免费代理服务器，就可以对教育网开放的各类FTP下载上传，以及各类资料查询共享等服务</li><li>提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外接的信息通过时，同时也将其保存在缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度。</li><li>隐藏真实IP</li></ul></li><li><p>爬虫代理</p><p>对于爬虫来说，由于爬虫爬取速度过快，在爬取过程中可能遇到同一个IP访问过于频繁的问题，此时网站就会让我们输入验证码登录后者直接封锁IP。</p><p>使用代理隐藏真实的IP，让服务器以为是代理服务器在请求自己。这样再爬取过程中通过不断更换代理，就不会被封锁。</p></li><li><p>代理分类</p><ul><li>根据协议<ul><li>FTP代理服务器：主要用于访问FTP服务器，一般有上传、下载及缓存功能，端口一般为21、2121等</li><li>HTTP代理服务器：主要用于访问网页，一般有内容过滤和缓存功能，端口一般为80、8080、3128</li><li>SSL/TLS代理：主要用于访问加密网站，一般有SSL或TLS加密功能（最高支持128位加密强度），端口一般为443</li><li>RTSP代理：主要用于访问Real流媒体服务器，一般有缓存功能，端口一般为554</li><li>Telnet代理：主要用于telnet远程控制（黑客入侵计算机时常用语隐藏身份），端口一般为23</li><li>POP3/SMTP代理：主要用户POP3/SMTP方式收发邮件，一般有缓存功能，端口一般为110/25</li><li>SOCKS代理：单纯传递数据包，速度快，一般有缓存功能，端口一般为1080<ul><li>SOCKS4：只支持TCP</li><li>SOCKS5：支持TCP和UDP，还支持各种身份验证机制、服务器域名解析等</li></ul></li></ul></li><li>根据匿名程度<ul><li>高度匿名代理：数据包原封不动地转发</li><li>普通匿名代理：会在数据包上做一些改动，服务端有可能发现这个是代理服务器，也有一定几率追查到真实IP。代理服务器通常会加入的HTTP头有HTTP_VIA和HTTP_X_FORWARDED_FOR</li><li>透明代理：不但改动数据包，还有告诉服务器客户端的真实IP。这种代理除了能用缓存技术提高浏览速度，能将内容过滤提高安全性之外，并无其他显著作用，最常见的例子是内网中的硬件防火墙</li><li>间谍代理：指组织或个人创建的用于记录用户传输的数据，然后进行研究、监控等目的的代理服务器</li></ul></li></ul></li><li><p>常见代理设置</p><ul><li>使用网上的免费代理</li><li>使用付费代理服务</li><li>ADSL拨号</li></ul></li></ul><h2 id="三、基本库的使用"><a href="#三、基本库的使用" class="headerlink" title="三、基本库的使用"></a>三、基本库的使用</h2><h3 id="3-1-使用urllib"><a href="#3-1-使用urllib" class="headerlink" title="3.1 使用urllib"></a>3.1 使用urllib</h3><blockquote><p><a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><ul><li><p>四个模块</p><ul><li>request：最基本的HTTP请求模块，用来模拟发送请求</li><li>error：异常处理模块，若出现请求错误，可以捕获这些异常，然后进行重试或其他操作保证程序不会意外终止</li><li>parse：工具模块，提供URL处理方法，比如拆分、解析、合并等</li><li>robotparser：识别网站的robots.txt文件</li></ul></li><li><p>发送请求</p><ul><li><p>urlopen()</p><p>urllib.request.urlopen(url,data=None,[timeout,]*,cafile=None,capath=None,cadefault=False,context=None)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出为HTTPResponse类型对象，主要包含read()、readinto()、getheader(name)、getheaders()、fileno()等方法</span></span><br><span class="line"><span class="comment"># msg、version、status、reason、debuglevel、closed属性等</span></span><br><span class="line">print(type(response))</span><br><span class="line">print(response.status)</span><br><span class="line">print(response.getheaders())</span><br><span class="line">print(response.getheader(<span class="string">'Server'</span>))</span><br></pre></td></tr></table></figure><ul><li>data参数</li><li>timeout参数</li><li>其他参数</li></ul></li><li><p>Request</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(<span class="string">'https://python.org'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>依然通过urlopen()方法来发送请求，但是该方法的参数不再是URL。而是一个request类型的对象。这样可以将请求独立成一个对象，也可以灵活地配置参数。</p><p>class urllib.request.Request(url,data=None,headers={},origin_req_host=None,unverifiable=False,method=None)</p><ul><li>url：用于请求URL，这是必传参数，其他都是可选参数。</li><li>data：必须传bytes(字节流)类型的参数。如果是字典，可以通过rullib.parse模块里的urlencode()编码。</li><li>headers：该参数是一个字典，它就是请求头，可以直接构造，也可以通过调用请求实例的add_headers()方法添加。</li><li>origin_req_host：指的是请求方的host名称或IP地址。</li><li>unverifiable：表示这个请求是否是无法验证的，默认是False。例如，我们请求一个HTML文档中的图片，但是我们没有自动抓取图像的权限，这时unverifiable的值就是True。</li><li>method：用来指示请求使用的方法，比如GET、POST和PUT等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.rog/post'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'...'</span>,</span><br><span class="line">    <span class="string">'Host'</span>:<span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'Germey'</span></span><br><span class="line">&#125;</span><br><span class="line">data = bytes(parse.urlencode(dict),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">req = request.Request(url=urll,data=data,headers=headers,method=<span class="string">'POST'</span>)</span><br><span class="line"><span class="comment"># 使用add_headers()方法添加</span></span><br><span class="line"><span class="comment"># req = request.Request(url=urll,data=data,method='POST')</span></span><br><span class="line"><span class="comment"># req.add_headers('User-Agent','Mozilla/4.0...')</span></span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></li><li><p>高级用法</p></li></ul></li><li><p>处理异常</p><ul><li>URLError</li><li>HTTPError</li></ul></li><li><p>解析链接</p></li><li><p>分析Robots协议</p></li></ul><h3 id="3-2-使用requests"><a href="#3-2-使用requests" class="headerlink" title="3.2 使用requests"></a>3.2 使用requests</h3><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pip3</span> install requests</span><br></pre></td></tr></table></figure></li><li><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">print(type(r))</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(type(r.text))</span><br><span class="line">print(r.text)</span><br><span class="line">print(r.cookies)</span><br><span class="line"></span><br><span class="line">r= requests.post(<span class="string">'http://httpbin.org/post'</span>)</span><br><span class="line">r= requests.put(<span class="string">'http://httpbin.org/put'</span>)</span><br><span class="line">r= requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line">r= requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">r= requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure></li><li><p>GET请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://www.httpbin.org/get'</span>)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'germey'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'http://httpbin.org/get'</span>,params=data)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接解析返回结果，可以得到一个字典格式的结果</span></span><br><span class="line">print(r.json())</span><br><span class="line">print(type(r.json()))</span><br></pre></td></tr></table></figure><ul><li><p>抓取知乎发现页标题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://www.zhihu.com/explore'</span>,headers=headers)</span><br><span class="line">pattern = re.compile(<span class="string">'explore-feed.*?question_link.*?&gt;(.*?)&lt;/a&gt;'</span>,re.S)</span><br><span class="line">titles = re.findall(pattern,r.text)</span><br><span class="line">print(titles)</span><br></pre></td></tr></table></figure></li><li><p>抓取二进制数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://github.com/favicon'</span>)</span><br><span class="line">print(r.content)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pic.jpg'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>POST请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>:<span class="string">'germey'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="comment"># 提交数据到form，说明POST请求成功</span></span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>,data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li><li><p>响应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'http://www.jianshu.com'</span>,headers=headers)</span><br><span class="line">print(type(r.status_code),r.status_code)</span><br><span class="line"><span class="comment"># headers属性得到的结果CaseInsensitiveDict</span></span><br><span class="line">print(type(r.headers),r.headers)</span><br><span class="line"><span class="comment"># cookies属性得到的结果RequestsCookieJar</span></span><br><span class="line">print(type(r.cookies),r.cookies)</span><br><span class="line">print(type(r.url),r.url)</span><br><span class="line">print(type(r.history),r.history)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置的状态码查询对象requests.codes</span></span><br><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> r.status_code == requests.codes.ok <span class="keyword">else</span> print(<span class="string">'successs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print('fault') if r.status_code == requests.codes.not_found else exit()</span></span><br></pre></td></tr></table></figure></li><li><p>高级用法</p><ul><li><p>文件上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>:open(<span class="string">'favicon.icon'</span>,<span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>,files=files)</span><br><span class="line">print(r.text)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></li><li><p>Cookies设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">print(r.cookies)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> r.cookies.items():</span><br><span class="line">    print(key + <span class="string">'='</span> + value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用Cookies维持登录状态</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>:<span class="string">'......'</span>,</span><br><span class="line">    <span class="string">'Host'</span>:<span class="string">'www.zhihu.com'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://www.zhihu.com'</span>,headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li><li><p>会话维持</p><p>使用Session对象维持会话，可以做到模拟同一个会话二不用担心Cookies的问题。通常用于模拟登录成功后再进行下一步的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li><li><p>SSL证书验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># from requests.packages import urllib3</span></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line"><span class="comment"># urllib3.disable_warnings()</span></span><br><span class="line"><span class="comment"># 捕获警告到日志</span></span><br><span class="line">logging.captureWarnings(<span class="keyword">True</span>)</span><br><span class="line">r = requests.get(<span class="string">'https://www.12306.cn'</span>,verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># 或指定本地证书用作客户端证书</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></li><li><p>代理设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#proxies = &#123;</span></span><br><span class="line"><span class="comment">#    'http':'http://10.10.1.10:3128',</span></span><br><span class="line"><span class="comment">#    'https':'http://10.10.1.10:1080'</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>:<span class="string">'http://user:password@10.10.1.10:3128/'</span>,</span><br><span class="line">&#125;</span><br><span class="line">requests.get(<span class="string">'https://www.taobao.com'</span>,proxies=proxies)</span><br></pre></td></tr></table></figure></li><li><p>超时设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># timeout=None则为永久等待，或直接不加参数</span></span><br><span class="line">r = requests.get(<span class="string">'https://www.taobao.com'</span>,timeout = <span class="number">1</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></li><li><p>身份认证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http:localhost:5000'</span>,auth=(<span class="string">'username'</span>,<span class="string">'password'</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Prepared Requests</p><p>在requests中将请求表示为数据结构，这个数据结构就叫Prepared Requests</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request,Session</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'germey'</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">s = Session()</span><br><span class="line">req = Request(<span class="string">'POST'</span>,url,data=data,headers=headers)</span><br><span class="line">prepped = s.prepare_request(req)</span><br><span class="line">r = s.send(prepped)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-正则表达式"><a href="#3-3-正则表达式" class="headerlink" title="3.3 正则表达式"></a>3.3 正则表达式</h3><ul><li><p>常用匹配规则</p><p>| 模式   | 描述                                                         |<br>| —— | ———————————————————— |<br>| \w     | 匹配字母、数字及下划线                                       |<br>| \W     | 匹配不是字母、数字及下划线的字符                             |<br>| \s     | 匹配任意空白字符，等价于[\t\n\r\f]                           |<br>| \S     | 匹配任意非空字符                                             |<br>| \d     | 匹配任意数字，等价于[0-9]                                    |<br>| \D     | 匹配任意非数字字符                                           |<br>| \A     | 匹配字符串开头                                               |<br>| \Z     | 匹配字符串结尾，若存在换行，只匹配到换行前的结束字符串       |<br>| \z     | 匹配字符串结尾，若存在换行，同时还会匹配换行符               |<br>| \G     | 匹配最后匹配完成的位置                                       |<br>| \n     | 匹配一个换行符                                               |<br>| \t     | 匹配一个制表符                                               |<br>| ^      | 匹配一行字符串的开头                                         |<br>| $      | 匹配一行字符串的结尾                                         |<br>| .      | 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符 |<br>| […]  | 用来表示一组字符串，单独列出，比如[amk]匹配a、m或k           |<br>| [^…] | 不在[]中的字符，比如[^abc]匹配除了a、b、c之外的字符         |<br>| *      | 匹配0个或多个表达式                                          |<br>| +      | 匹配1个或多个表达式                                          |<br>| ?      | 匹配0个或1个前面的正则表达式定义的片段，非贪婪方式           |<br>| {n}    | 精确匹配n个前面的正则表达式                                  |<br>| {n,m}  | 匹配n到m次由前面正则表达式定义的片段，贪婪方式               |<br>| a|b   | 匹配a或b                                                     |<br>| ()     | 匹配括号内的表达式，页表示一个组                             |</p></li><li><p>match()</p><p>match()会从字符串的起始位置匹配正则表达式，如果匹配，返回匹配成功的结果；若不匹配，则返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></span><br><span class="line">print(len(content))</span><br><span class="line"></span><br><span class="line">result = re.match(<span class="string">'^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># group()可以输出匹配到的内容</span></span><br><span class="line">print(result.group())</span><br><span class="line"><span class="comment"># span()输出匹配结果在原字符串中的的位置范围，</span></span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><ul><li><p>匹配目标</p><p>可以使用括号()将想要提取的子字符串括起来。()实际上标记了一个表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用group()方法传入分组的索引即可获取提取的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">result = re.match(<span class="string">'^Hello\s(.*?)\sWorld'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></li><li><p>通用匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># .*可以匹配任意字符</span></span><br><span class="line">result = re.match(<span class="string">'^Hello.*Demo$'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></li><li><p>贪婪与非贪婪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果只得到7，在贪婪匹配中，.*会匹配尽可能多的字符，\d+代表至少一个数字，</span></span><br><span class="line"><span class="comment"># 所以.*尽可能的匹配多的字符，因此只留下一个可满足条件的数字7</span></span><br><span class="line">result = re.match(<span class="string">'^He.*(\d+).*Demo$'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># .*?是非贪婪匹配，就是尽可能匹配少的字符</span></span><br><span class="line">result = re.match(<span class="string">'^He.*?(\d+).*Demo$'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">content = <span class="string">'http://weibo.com/comment/kEraCN'</span></span><br><span class="line">result1 = re.match(<span class="string">'http.*?comment/(.*?)'</span>,comment)</span><br><span class="line">result2 = re.match(<span class="string">'http.*?comment/(.*)'</span>,comment)</span><br><span class="line">print(<span class="string">'result1'</span>,result1.group(<span class="number">1</span>))</span><br><span class="line">print(<span class="string">'result2'</span>,result1.group(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 运行结果为</span></span><br><span class="line"><span class="comment"># result1</span></span><br><span class="line"><span class="comment"># result2 kEraCN</span></span><br><span class="line"><span class="comment"># .*?没有匹配到任何结果，.*尽量匹配多的内容，因此成功匹配</span></span><br></pre></td></tr></table></figure></li><li><p>修饰符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">''''Hello 1234567 World_This </span></span><br><span class="line"><span class="string">is a Regex Demo'''</span></span><br><span class="line"><span class="comment"># 运行报错，因为这个正则表达式无法匹配到换行符，所以返回结果None</span></span><br><span class="line"><span class="comment"># result = re.match('^He.*?(\d+).*?Demo$',content)</span></span><br><span class="line"><span class="comment"># print((result.group(1)))</span></span><br><span class="line"><span class="comment"># 添加re.S即可修正此错误，这个修饰符可以匹配包括换行符在内的所有字符</span></span><br><span class="line">result = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>,content，re.S)</span><br><span class="line">print((result.group(<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><p>| 修饰符 | 描述                                                       |<br>| —— | ———————————————————- |<br>| re.I   | 使匹配对大小写不敏感                                       |<br>| re.L   | 做本地化识别匹配                                           |<br>| re.M   | 多行匹配，影响^和$                                         |<br>| re.S   | 使.匹配包括换行在内的所有字符                              |<br>| re.U   | 根据Unicode字符集解析字符。这个标志影响\w、\W、\b、\B      |<br>| re.X   | 该标志通过给予更灵活的格式以便你将正则表达式写得更易于理解 |</p></li><li><p>转义匹配</p><p>若目标字符串里包含.,，则需要用到转义匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'(百度)www.baidu.com'</span></span><br><span class="line">result = re.match(<span class="string">'\(百度\)www\.baidu\.com'</span>,content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>search()</p><p>match()方法是从字符串的开头开始匹配的，一旦开头不匹配，name整个匹配就失败了。search()在匹配时会扫描整个字符串，然后返回第一个成功匹配的结果。若搜索完成还未找打，则返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">result = re.match(<span class="string">'Hello.*?(\d+).*?Demo'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"></span><br><span class="line">result = re.search(<span class="string">'Hello.*?(\d+).*?Demo'</span>,content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">            经典老歌列表</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">            &lt;li data-view="2"&gt;一路有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">                &lt;a&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">                &lt;a href="/5.mp3" singer="齐秦"&gt;随风往事&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li data-view="6"&gt;</span></span><br><span class="line"><span class="string">                &lt;a href="/5.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li  data-view="5"&gt;</span></span><br><span class="line"><span class="string">                &lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li  data-view="5"&gt;</span></span><br><span class="line"><span class="string">                &lt;a href="/.6mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?active.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>,html,re.S)</span><br><span class="line">print(result.group(<span class="number">1</span>),result.group(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若不加active</span></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>,html,re.S)</span><br><span class="line"><span class="comment"># 则返回匹配的第一条结果</span></span><br></pre></td></tr></table></figure></li><li><p>findall()</p><p>findall()会搜索整个字符串，然后返回匹配正则表达式的所有内容，返回的是列表类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = re.findall(<span class="string">'&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>,html,re.S)</span><br><span class="line">print(type(result))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> result:</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回的列表中的每个元素都是元祖类型，用对应的索引一次取出即可。</span></span><br></pre></td></tr></table></figure></li><li><p>sub()</p><p>除了使用正则表达式提取信息外，有时候还需要借助它来修改文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'54aK54yr5oiR54ix5L2g'</span></span><br><span class="line"><span class="comment"># 第一个参数\d+用来匹配所有的数字，第二个参数为替换成的字符串，第三个参数为原字符串</span></span><br><span class="line">content = re.sub(<span class="string">'\d+'</span>,<span class="string">''</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的HTML文本也可以直接使用正则表达式修改之后再进行提取，就会简单很多了</span></span><br><span class="line">result = re.sub(<span class="string">'&lt;a.*?&gt;|&lt;/a&gt;'</span>,<span class="string">''</span>,html)</span><br><span class="line">print(result)</span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?&gt;(.*?)&lt;/li&gt;'</span>,result,re.S)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span>  results:</span><br><span class="line">    print(result.strip())</span><br></pre></td></tr></table></figure></li><li><p>compile()</p><p>compile()可以将正则字符串编译成正则表达式对象，以便在后面的匹配中复用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content1 = <span class="string">'2016-12-15 12:00'</span></span><br><span class="line">content2 = <span class="string">'2016-12-17 12:55'</span></span><br><span class="line">content3 = <span class="string">'2016-12-22 13:21'</span></span><br><span class="line"><span class="comment"># 还可以将修饰符传入，这样在search()、findall()方法中就不需要额外传了</span></span><br><span class="line">pattern = re.compile(<span class="string">'\d&#123;2&#125;:\d&#123;2&#125;'</span>)</span><br><span class="line">result1 = re.sub(pattern,<span class="string">''</span>,content1)</span><br><span class="line">result2 = re.sub(pattern,<span class="string">''</span>,content2)</span><br><span class="line">result3 = re.sub(pattern,<span class="string">''</span>,content3)</span><br><span class="line">print(result1,result2,result3)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-4-抓取猫眼电影排行"><a href="#3-4-抓取猫眼电影排行" class="headerlink" title="3.4 抓取猫眼电影排行"></a>3.4 抓取猫眼电影排行</h3><ul><li><p>目标：提取出猫眼电影TOP100的电影名称、时间、评分、图片等信息，提取的站点URL为<a href="http://maoyan.com/board/4" target="_blank" rel="noopener">http://maoyan.com/board/4</a>，提取结果 会以文件形式保存下来。</p></li><li><p>分析</p><ul><li>目标站点：<a href="http://maoyan.com/board/4" target="_blank" rel="noopener">http://maoyan.com/board/4</a></li><li>第二页：<a href="http://maoyan.com/board/4?offset=10" target="_blank" rel="noopener">http://maoyan.com/board/4?offset=10</a></li></ul><ol><li><p>抓取首页实现get_one_page(url)</p></li><li><p>正则表达式提取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'\&lt;dd&gt;.*?board-index.*?&gt;(.*?)\&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)\&lt;/a&gt;.*?"star".*?&gt;(.*?)\&lt;/p&gt;.*?"releasetime".*?&gt;(.*?)\&lt;/p&gt;.*?"integer".*?&gt;(.*?)\&lt;/i&gt;.*?"fraction".*?&gt;(.*?)\&lt;/i&gt;.*?\&lt;/dd&gt;'</span></span><br></pre></td></tr></table></figure></li><li><p>写入文件</p></li><li><p>分页爬取</p></li><li><p>运行代码</p></li></ol></li><li><p>代码</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src="(.*?)".*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?"star".*?&gt;(.*?)&lt;/p&gt;.*?"releasetime".*?&gt;(.*?)&lt;/p&gt;.*?"integer".*?&gt;(.*?)&lt;/i&gt;.*?"fraction".*?&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>,re.S)</span><br><span class="line">    items = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'image'</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'title'</span>:item[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'actor'</span>:item[<span class="number">3</span>].strip()[<span class="number">3</span>:],</span><br><span class="line">            <span class="string">'time'</span>:item[<span class="number">4</span>].strip()[<span class="number">5</span>:],</span><br><span class="line">            <span class="string">'score'</span>:item[<span class="number">5</span>] + item[<span class="number">6</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(content,ensure_ascii=<span class="keyword">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    url = <span class="string">'http://maoyan.com/board/4?offset='</span> + str(offset)</span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        write_to_file(item)</span><br><span class="line">        print(item)</span><br><span class="line">    <span class="comment"># print(html)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    pool = Pool()</span><br><span class="line">    pool.map(main,[i * <span class="number">10</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br></pre></td></tr></table></figure><h3 id="练习：抓取豆瓣top250电影排行"><a href="#练习：抓取豆瓣top250电影排行" class="headerlink" title="练习：抓取豆瓣top250电影排行"></a>练习：抓取豆瓣top250电影排行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'&lt;li&gt;.*?class=""&gt;(.*?)&lt;/em&gt;.*?"title"&gt;(.*?)&lt;/span&gt;.*?average"&gt;(.*?)&lt;/span&gt;.*?inq"&gt;(.*?)&lt;/span&gt;.*?&lt;/li&gt;'</span>,re.S)</span><br><span class="line">    items = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'index'</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'title'</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'score'</span>:item[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'quote'</span>:item[<span class="number">3</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'douban.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(content,ensure_ascii=<span class="keyword">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(start)</span>:</span></span><br><span class="line">    url = <span class="string">"https://movie.douban.com/top250?start="</span> + str(start)</span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        <span class="comment"># print(item)</span></span><br><span class="line">        write_to_file(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># for i in range(10):</span></span><br><span class="line">    <span class="comment">#     main(i * 25)</span></span><br><span class="line">    pool = Pool()</span><br><span class="line">    pool.map(main, [i * <span class="number">25</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br></pre></td></tr></table></figure><h2 id="四、解析库的使用"><a href="#四、解析库的使用" class="headerlink" title="四、解析库的使用"></a>四、解析库的使用</h2><h3 id="4-1-使用XPath"><a href="#4-1-使用XPath" class="headerlink" title="4.1 使用XPath"></a>4.1 使用XPath</h3><ul><li><p>常用规则</p><p>| 表达式   | 描述                     |<br>| ——– | ———————— |<br>| nodename | 选取此节点的所有子节点   |<br>| /        | 从当前节点选取直接子节点 |<br>| //       | 从当前节点选取子孙节点   |<br>| .        | 选取当前节点             |<br>| ..       | 选取当前节点的父节点     |<br>| @        | 选取属性                 |</p><p>栗子：//title[@lang=’eng’] —— 代表选择所有名称为title，同时属性lang的值为eng的节点</p></li><li><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># tostring输出结果为bytes类型，这里利用decode()方法将其转成str类型</span></span><br><span class="line">result = etree.tostring(html)</span><br><span class="line">print(result.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></li><li><p>所有节点</p><p>我们一般会用//开头的XPath规则来选取所有符合要求的节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 这里的*代表匹配所有节点，即整个HTML文本中的所有节点都会被获取</span></span><br><span class="line">result = html.xpath(<span class="string">'//*'</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 这里选取所有li节点，直接在//后加上节点名称即可</span></span><br><span class="line">result = html.xpath(<span class="string">'//li'</span>)</span><br><span class="line">print(result)</span><br><span class="line">print(result[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li><li><p>子节点</p><p>通过/或//即可查找子节点或子孙节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 选择li节点的所有直接a子节点</span></span><br><span class="line">result = html.xpath(<span class="string">'//li/a'</span>)</span><br><span class="line">print(result[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//ul//a'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>父节点</p><p>通过..可以查找父节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//a[@href="link4.html"]/../@class'</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 也可以通过parent::获取父节点</span></span><br><span class="line">result = html.xpath(<span class="string">'//a[@href="link4.html"]/parent::*/@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>属性匹配</p><p>可以用@符号进行属性过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="item-0"]'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>文本获取</p><p>XPath中的text()方法可以获取节点中的文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先选取a节点再获取文本</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="item-0"]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用//</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="item-0"]//text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接用//加text()的方式，可以保证获取到最全面的文本信息，但是可能会夹杂一些换行符等特殊字符</span></span><br><span class="line"><span class="comment"># 如果想要获取某些特定子孙节点下的所有文本，可以先选取到特定的子孙节点，再调用text()方法获取其内部文本，这样可以保证获取到的结果是整洁的</span></span><br></pre></td></tr></table></figure></li><li><p>属性获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a/@href'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>属性多值匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;li class="li li-first"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class,"li")]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>多属性匹配</p><p>需要同时匹配多个属性，可以使用运算符and来连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;li class="li li-first" name="item"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class,"li") and @name="item"]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>| 运算符 | 描述           | 实例               | 返回值                           |<br>| —— | ————– | —————— | ——————————– |<br>| or     | 或             | age=19 or age=20   | 19-true,21-false                 |<br>| and    | 与             | age&gt;19 and age &lt;21 | 20-true,22-false                 |<br>| mod    | 除法的余数     | 5 mod 2            | 1                                |<br>| |     | 计算两个节点集 | //book | //cd     | 返回所有拥有book和cd元素的节点集 |<br>| +      | 加法           | 6+4                | 10                               |<br>| -      | 减法           | 6-4                | 2                                |<br>| <em>      | 乘法           | 6</em>4                | 24                               |<br>| div    | 除法           | 8 div 4            | 2                                |<br>| =      | 等于           | age=19             | 19-true,20-false                 |<br>| !=     | 不等于         | age!=19            | 19-false,18-true                 |<br>| &lt;      | 小于           | age&lt;19             | 19-false,18-false                |<br>| &lt;=     | 小于或等于     | age&lt;=19            | 19-true,20-false                 |<br>| &gt;      | 大于           | age&gt;19             | 19-false,21-true                 |<br>| &gt;=     | 大于或等于     | age&gt;=19            | 19-true,18-false                 |</p></li><li><p>按序选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-2]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[position()&lt;3]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p>节点轴选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># ancestor可以获取祖先节点，其后需要跟两个冒号，*匹配所有节点</span></span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::div'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># attribute获取所有属性值</span></span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/attribute::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># child获取所有直接子节点</span></span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/child::a[@href="link1.html"]'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># descendant可以获取所有子孙节点</span></span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/descendant::span'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># following可以获取当前节点之后的所有节点，可以使用索引</span></span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following::*[2]'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># following-sibling可以获取当前节点之后的所有同级节点</span></span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following-sibling::*'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">更多参考</a></p></blockquote></li></ul><h3 id="4-2-使用BeautifulSoup"><a href="#4-2-使用BeautifulSoup" class="headerlink" title="4.2 使用BeautifulSoup"></a>4.2 使用BeautifulSoup</h3><p>Beautiful  Soup就是Python的一个HTML或XML的解析库，可以用它来方便地从网页中提取数据</p><ul><li><p>基本用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="title" name="dromouse"&gt;</span></span><br><span class="line"><span class="string">        &lt;b&gt;The Dormouse's story&lt;/b&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">        Once upon a time there were three little sisters;and their names were</span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">            &lt;!-- Elsie --&gt;</span></span><br><span class="line"><span class="string">        &lt;/a&gt;,</span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/tillie" class="sister" id="link2"&gt;Tillie&lt;/a&gt;; and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.prettify())</span><br><span class="line">print(soup.title.string)</span><br></pre></td></tr></table></figure></li><li><p>节点选择器</p><ul><li><p>选择元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.head)</span><br><span class="line"><span class="comment"># 当存在多个节点，这种选择方式只会选择第一个匹配的节点</span></span><br><span class="line">print(soup.p)</span><br></pre></td></tr></table></figure></li><li><p>提取信息</p><ol><li>获取名称</li><li>获取属性</li><li>获取内容</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(soup.title.name)</span><br><span class="line"></span><br><span class="line">print(soup.p.attrs)</span><br><span class="line">print(soup.p.attrs[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line">print(soup.p.b.string)</span><br></pre></td></tr></table></figure></li><li><p>嵌套选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(soup.head.title)</span><br><span class="line">print(type(soup.head.title))</span><br><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure></li><li><p>关联选择 —— 先选中某一节点元素，然后以它为基准再选择它的子节点、父节点、兄弟节点等</p><ul><li>子节点和孙节点</li></ul></li></ul></li><li><p>方法选择器</p></li><li><p>CSS选择器</p></li></ul><h3 id="4-3-使用pyquery"><a href="#4-3-使用pyquery" class="headerlink" title="4.3 使用pyquery"></a>4.3 使用pyquery</h3><h2 id="五、数据存储"><a href="#五、数据存储" class="headerlink" title="五、数据存储"></a>五、数据存储</h2><h3 id="5-1-文件存储"><a href="#5-1-文件存储" class="headerlink" title="5.1 文件存储"></a>5.1 文件存储</h3><h4 id="TXT存储"><a href="#TXT存储" class="headerlink" title="TXT存储"></a>TXT存储</h4><ul><li><p>实例：保存知乎上“发现”页面的“热门话题”部分，将其问题和答案统一保存成文本形式</p></li><li><p>使用requests获取网页源代码，使用pyquery解析库解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url,headers=headers).text</span><br><span class="line">file_html = open(<span class="string">'explore.html'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">file_html.write(html)</span><br><span class="line">file_html.close()</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.explore-tab .feed-item'</span>).items()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">  question = item.find(<span class="string">'h2'</span>).text()</span><br><span class="line">  author = item.find(<span class="string">'.author-link-line'</span>).text()</span><br><span class="line">  answer = pq(item.find(<span class="string">'.content'</span>).html()).text()</span><br><span class="line">  file = open(<span class="string">'explore.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">  file.write(<span class="string">'\n'</span>.join([question,author,answer]))</span><br><span class="line">  file.write(<span class="string">'\n'</span> + <span class="string">'='</span> * <span class="number">50</span> + <span class="string">'\n'</span>)</span><br><span class="line">  file.close()</span><br></pre></td></tr></table></figure></li><li><p>打开方式</p><ul><li>r：以只读方式打开文件，文件指针将会放在文件的开头，默认模式</li><li>rb：以二进制只读方式打开，指针放在开头</li><li>r+：以读写方式打开。指针放在开头</li><li>rb+：以二进制读写方式打开，指针放在开头</li><li>w：以写入方式打开，若文件已存在，则覆盖，若文件不存在，则创建新的文件</li><li>wb：以二进制写入方式打开，则覆盖，若文件不存在，则创建新的文件</li><li>w+：以读写方式打开，若文件已存在，则覆盖，若文件不存在，则创建新的文件</li><li>wb+：以二进制读写方式打开，若文件已存在，则覆盖，若文件不存在，则创建新的文件</li><li>a：以追加方式打开，若该文件已存在，文件指针将会放在文件结尾。即新的内容会被写入到已有内容之后，若文件不存在，则创建新的文件写入</li><li>ab：以二进制追加方式打开，若该文件已存在，文件指针将会放在文件结尾。即新的内容会被写入到已有内容之后，若文件不存在，则创建新的文件写入</li><li>a+：以读写方式打开一个文件，若该文件已存在，文件指针将会放在文件结尾。文件打开时会是追加模式，若文件不存在，则创建新的文件写入</li><li>ab+：以二进制追加方式代开，若该文件已存在，文件指针将会放在文件结尾。即新的内容会被写入到已有内容之后，若文件不存在，则创建新的文件写入</li></ul></li><li><p>简化写法</p><ul><li><p>with as语法，在with控制块结束时，文件会自动关闭，就不需要再调用close()方法了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'explore.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">'\n'</span>.join([question,author,answer]))</span><br><span class="line">    file.write(<span class="string">'\n'</span> + <span class="string">'='</span> *<span class="number">50</span> + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="JSON文件存储"><a href="#JSON文件存储" class="headerlink" title="JSON文件存储"></a>JSON文件存储</h4><blockquote><p>JSON，全称JavaScript Object Notion，也就是JavaScript对象标记，它通过对象和数组的组合来表示数据，是一种轻量级的数据交换格式。</p></blockquote><ul><li><p>对象和数组</p><ul><li>对象：使用{}包裹起来的内容，数据结构为{key1:value1,key2:value2,…}的键值对结构。在面向对象的语言中，key为对象的属性，value为对应的值。键名可以使用整数和字符串表示。值得类型可以使任意类型。</li><li>数组：使用[]包裹起来的内容，数据结构为[“java”,”javascritpt”,”vb”,…]的索引结构。在JavaScript中，数组是一种比较特殊的数据类型，它也可以像对象那样使用键值对，但还是索引用的多。同样，值可以是任意类型。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"bob"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>:<span class="string">"male"</span>,</span><br><span class="line">        <span class="attr">"birthday"</span>:<span class="string">"today"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"selina"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>:<span class="string">"female"</span>,</span><br><span class="line">        <span class="attr">"birthday"</span>:<span class="string">"tomorrow"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>读取JSON：通过dumps()方法将JSON对象转为文本字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">str = <span class="string">'''</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "name":"bob",</span></span><br><span class="line"><span class="string">        "gender":"male",</span></span><br><span class="line"><span class="string">        "birthday":"today"</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "name":"selina",</span></span><br><span class="line"><span class="string">        "gender":"female",</span></span><br><span class="line"><span class="string">        "birthday":"tomorrow"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(type(str))</span><br><span class="line">data = json.loads(str)</span><br><span class="line">print(data)</span><br><span class="line">print(type(json))</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加索引获得字典元素，通过调用键名即可得到键值</span></span><br><span class="line">data[<span class="number">0</span>][<span class="string">'name'</span>]</span><br><span class="line">data[<span class="number">0</span>].get(<span class="string">'name'</span>)</span><br><span class="line">data[<span class="number">0</span>].get(<span class="string">'age'</span>) <span class="comment"># None</span></span><br><span class="line">data[<span class="number">0</span>].get(<span class="string">'age'</span>,<span class="number">25</span>) <span class="comment"># default value = 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从JSON文本读取内容</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    str = file.read()</span><br><span class="line">    data = json.loads(str)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><blockquote><p>JSON的数据需要用双引号来保卫，不能使用单引号，否则会出现JSONDecodeError错误</p></blockquote></li><li><p>输出JSON：调用dumps()方法将JSON对象转换为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'王伟'</span>,</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>:<span class="string">'19920825'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment"># 为了输出中文，还需要指定参数ensure_ascii=False,参数indent，代表缩进字符个数，另外还要规定文件输出的编码</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(data,indent=<span class="number">2</span>,ensure_ascii=<span class="keyword">False</span>))</span><br></pre></td></tr></table></figure></li></ul><h4 id="CSV文件存储"><a href="#CSV文件存储" class="headerlink" title="CSV文件存储"></a>CSV文件存储</h4><blockquote><p>CSV，全称Comma-Separated Values，中文可以叫作逗号分隔值或字符分隔值，其文件以纯文本形式存储表格数据。该文件是一个字符序列，可以由任意数目的记录组成，记录间以某种换行符分隔。</p></blockquote><ul><li>写入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># delimiter可以修改列与列之间的分隔符，writerrows可以同时写入多行，此时参数就需要为二位列表</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile,delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerrow(<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'age'</span>)</span><br><span class="line">    writer.writerrows([[<span class="string">'1001'</span>,<span class="string">'mike'</span>,<span class="number">20</span>],[<span class="string">'1002'</span>,<span class="string">'bob'</span>,<span class="number">22</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入字典</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = [<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'age'</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile,fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>:<span class="string">'1001'</span>,<span class="string">'name'</span>:<span class="string">'mike'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">    writer.writerows([&#123;<span class="string">'id'</span>:<span class="string">'1002'</span>,<span class="string">'name'</span>:<span class="string">'bob'</span>,<span class="string">'age'</span>:<span class="number">21</span>&#125;,&#123;<span class="string">'id'</span>:<span class="string">'1003'</span>,<span class="string">'name'</span>:<span class="string">'du'</span>,<span class="string">'age'</span>:<span class="number">25</span>&#125;])</span><br></pre></td></tr></table></figure><ul><li><p>读取</p><blockquote><p>这里构造的Reader对象，通过遍历输出了每行的内容，每一个行都是一个列表形式。如果文件中包含中文的话，还需要指定文件编码。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure><ul><li><p>也可以使用pandas中的read_csv()方法将数据从CSV中读取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'data.csv'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-2-关系型数据库存储"><a href="#5-2-关系型数据库存储" class="headerlink" title="5.2 关系型数据库存储"></a>5.2 关系型数据库存储</h3><blockquote><p>关系型数据库是基于关系模型的数据库，关系模型是通过二维表来保存的，所以它的存储方式就是行列组成的表，每一列就是一个字段，每一行就是一条记录。表可以看作某个实体的集合，而实体之间也存在联系，这就需要表与表之间的联系关系来体现，如主键外键的关联关系。多个表组成一个数据库，也就是关系型数据库。</p><p>关系型数据库有多种，如SQLite、MySQL、Oracle、SQL Server、DB2等。</p></blockquote><h4 id="MySQL存储"><a href="#MySQL存储" class="headerlink" title="MySQL存储"></a>MySQL存储</h4><ul><li><p>连接数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过PyMySQL的connect()方法声明一个MySQL连接duixiangdb</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">''</span>,port=<span class="number">3306</span>)</span><br><span class="line"><span class="comment"># 连接成功后调用cursor()获取MySQL的操作游标</span></span><br><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment"># execute()方法执行sql语句</span></span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)</span><br><span class="line"><span class="comment"># 返回执行结果</span></span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">'Database version:'</span>,data)</span><br><span class="line">cursor.execute(<span class="string">'CREATE DATABASE spiders DEFAULT CHARACTER SET UTF8'</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码格式化 command + alt + L</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">''</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'CREATE TABLE IF NOT EXISTS students (id VARCHAR(255) NOT NULL ,name VARCHAR(255) NOT NULL,age INT NOT NULL,PRIMARY KEY (id))'</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">id = <span class="string">'20120001'</span></span><br><span class="line">user = <span class="string">'bob'</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">''</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment"># 使用构造SQL语句：sql = 'INSERT INTO student(id,name,age) values(' + id + ', ' + name + ', ' + age + ')'</span></span><br><span class="line"><span class="comment"># 使用格式化符%s实现，可以避免字符串拼接的麻烦，又可以避免引号冲突的问题</span></span><br><span class="line">sql = <span class="string">'INSERT INTO students(id,name,age) values(%s,%s,%s)'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql,(id,user,age))</span><br><span class="line">    <span class="comment"># 需要执行db对象的commit()方法才可实现数据插入，该方法可以将语句提交到数据库执行的方法</span></span><br><span class="line">    <span class="comment"># 对于数据插入、更新、删除操作，都需要调用该方法才能生效</span></span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># 如果执行失败，则调用rollback()执行数据回滚</span></span><br><span class="line">    db.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure></li><li><p>事务的4个属性（ACID）</p><p>|         属性          | 解释                                                         |<br>| :——————-: | :———————————————————– |<br>|  原子性（atomicity）  | 事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做 |<br>| 一致性（consistency） | 事务必须使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的 |<br>|  隔离性（isolation）  | 一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能相互干扰 |<br>| 持久性（durability）  | 持久性也称永久性（permanence），指一个事务一旦提交，它对数据库的改变就应该是永久的。接下来的其他操作或故障不应该对其有任何影响 |</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">''</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"><span class="comment"># 优化</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>:<span class="string">'20120002'</span>,</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'bob'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table,keys=keys,values=values)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql,tuple(data.values())):</span><br><span class="line">        print(<span class="string">'successful'</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">''</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>:<span class="string">'20120001'</span>,</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'bob'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ON DUPLICATE KEY UPDATE 如果主键存在，就执行更新操作</span></span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES(&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table,keys=keys,values=values)</span><br><span class="line">update = <span class="string">','</span>.join([<span class="string">" &#123;key&#125; = %s"</span>.format(key = key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line">sql += update</span><br><span class="line"><span class="comment"># 若执行更新操作，则sql语句就是</span></span><br><span class="line"><span class="comment"># INSERT INTO students(id, name, age) VALUES(%s, %s, %s) ON DUPLICATE KEY UPDATE id = %s, name = %s, age = %s</span></span><br><span class="line"><span class="comment"># 这里就变成了6个%s，所以在后面的excute()方法的第二个参数元组就需要乘以2编程原来的2倍</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(sql)</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql,tuple(data.values()) * <span class="number">2</span>):</span><br><span class="line">        print(<span class="string">'successful'</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">table = <span class="string">'students'</span></span><br><span class="line">condition = <span class="string">'age &gt; 20'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为删除条件有多种多样，所以不再继续构造复杂的判断性。这里之间将条件当做字符串来传递，以实现删除操作</span></span><br><span class="line">sql = <span class="string">'DELETE FROM &#123;table&#125; WHERE &#123;condition&#125;'</span>.format(table=table,condition=condition)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.excute(sql)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db.close</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">''</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">'SELECT * FROM students WHERE age &gt;= 19'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'Count:'</span>,cursor.rowcount)</span><br><span class="line">    <span class="comment"># 内部有一个偏移指针用来指向查询结果，最开始偏移指针指向第一条数据，取一次以后，指针指向下一条数   据，这样再取得话，就会取到下一条数据</span></span><br><span class="line">    <span class="comment"># one = cursor.fetchone()</span></span><br><span class="line">    <span class="comment"># print('One:',one)</span></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    print(<span class="string">'Result:'</span>,result)</span><br><span class="line">    print(<span class="string">'Result Type:'</span>,type(result))</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">        print(row)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Error"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">Count: <span class="number">2</span></span><br><span class="line">One: (<span class="string">'20120001'</span>, <span class="string">'bob'</span>, <span class="number">25</span>)</span><br><span class="line">Result: ((<span class="string">'20120002'</span>, <span class="string">'bob'</span>, <span class="number">20</span>),)</span><br><span class="line">Result Type: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'20120002'</span>, <span class="string">'bob'</span>, <span class="number">20</span>)</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="非关系型存储"><a href="#非关系型存储" class="headerlink" title="非关系型存储"></a>非关系型存储</h3><blockquote><p>NoSQL，全称Not Only SQL，意为不仅仅是SQL，泛指非关系型数据库。NoSQL是基于键值对的，而且不需要经过SQL层的解析，数据之间没有耦合性，性能非常高。</p></blockquote><ul><li>分类<ul><li>键值存储数据库：Redis、Voldemort和Oracle BDB等</li><li>列存储数据库：Cassandra、HBase和Riak等</li><li>文档型数据库：CouchDB和MongoDB等</li><li>图形数据库：Neo4J、InfoGrid和Infinite Graph等</li></ul></li></ul><h4 id="MongoDB存储"><a href="#MongoDB存储" class="headerlink" title="MongoDB存储"></a>MongoDB存储</h4><ul><li><p>连接MongoDB，连接数据库并插入、查询数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">client = MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br><span class="line"><span class="comment"># client = pymongo.MongoClient(host='localhost',prot=27017)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定数据库，两种方式等价</span></span><br><span class="line"><span class="comment"># db = client.test</span></span><br><span class="line">db = client[<span class="string">'test'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定集合</span></span><br><span class="line"><span class="comment"># collection = db.student</span></span><br><span class="line">collection = db[<span class="string">'student'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">student = &#123;</span><br><span class="line">    <span class="string">'id'</span>:<span class="string">'20170101'</span>,</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'jordan'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student1 = &#123;</span><br><span class="line">    <span class="string">'id'</span>:<span class="string">'20170102'</span>,</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'mike'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student2 = &#123;</span><br><span class="line">    <span class="string">'id'</span>:<span class="string">'20170103'</span>,</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'du'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入一条数据并返回_id值</span></span><br><span class="line"><span class="comment"># result = collection.insert_one(student)</span></span><br><span class="line"><span class="comment"># print(result.inserted_id)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入多条数据</span></span><br><span class="line"><span class="comment"># result = collection.insert_many([student1,student2])</span></span><br><span class="line"><span class="comment"># print(result.inserted_ids)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据 利用find_one()或find()方法进行查询</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">'name'</span>:<span class="string">'mike'</span>&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">results = collection.find(&#123;<span class="string">'age'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">    print(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询年龄大于20的数据</span></span><br><span class="line">results = collection.find(&#123;<span class="string">'age'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">19</span>&#125;&#125;)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">    print(r)</span><br></pre></td></tr></table></figure></li><li><p>查询符号表</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fteyfoplygj30ml06ngmq.jpg" alt="img"></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fteyjn2frlj30ml06eq4b.jpg" alt="img"></p></li><li><p>计数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count = collection.find().count()</span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line">count = collection.find(&#123;<span class="string">'age'</span>:<span class="number">20</span>&#125;).count()</span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升序：pymongo.ASCENDING 降序：pymongo.DESCENDING</span></span><br><span class="line">results = collection.find.sort(<span class="string">'name'</span>,pymongo.ASCENDING)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br></pre></td></tr></table></figure></li><li><p>偏移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略前两个元素</span></span><br><span class="line">results = collection.find().sort(<span class="string">'name'</span>,pymongo.ASCENDING).skip(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略前两个元素并只取2个元素结果</span></span><br><span class="line">results = collection.find().sort(<span class="string">'name'</span>,pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br></pre></td></tr></table></figure></li><li><p>更新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line">condition = &#123;<span class="string">'name'</span>:<span class="string">'du'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">25</span></span><br><span class="line"><span class="comment"># 建议使用update_one或update_many</span></span><br><span class="line"><span class="comment"># result = collection.update(condition,student)</span></span><br><span class="line"><span class="comment"># 也可以使用$set操作符对数据进行更新，这样可以只更新student字典内存在的字段，如果原先还有其他字段，则不会更新也不会删除。</span></span><br><span class="line"><span class="comment"># result = collection.update(condition,&#123;'$set':student&#125;)</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">condition = &#123;<span class="string">'name'</span>:<span class="string">'mike'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">26</span></span><br><span class="line">result = collection.update_one(condition,&#123;<span class="string">'$set'</span>:student&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count,result.modified_count)</span><br><span class="line"></span><br><span class="line">condition = &#123;<span class="string">'age'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">20</span>&#125;&#125;</span><br><span class="line"><span class="comment"># 第一条符合条件的年龄+1</span></span><br><span class="line"><span class="comment"># result = collection.update_one(condition,&#123;'$inc':&#123;'age':1&#125;&#125;)</span></span><br><span class="line">result = collection.update_many(condition,&#123;<span class="string">'$inc'</span>:&#123;<span class="string">'age'</span>:<span class="number">1</span>&#125;&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count,result.modified_count)</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除</span></span><br><span class="line">result = collection.delete_one(&#123;<span class="string">'name'</span>:<span class="string">'mike'</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.deleted_count)</span><br><span class="line">result = collection.delete_many(&#123;<span class="string">'age'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.deleted_count)</span><br></pre></td></tr></table></figure></li><li><p>其他方法</p><ul><li>find_one_and_delete()、finde_one_and_replace()和find_one_and_update()等</li><li>create_index()、create_indexes()和drop_index()等</li><li>操作指南：<a href="https://docs.mongodb.com/guides/" target="_blank" rel="noopener">https://docs.mongodb.com/guides/</a></li><li>PyMongo官方文档：<a href="http://api.mongodb.com/python/current/api/pymongo/collection.html" target="_blank" rel="noopener">http://api.mongodb.com/python/current/api/pymongo/collection.html</a></li></ul></li></ul><h4 id="Redis存储"><a href="#Redis存储" class="headerlink" title="Redis存储"></a>Redis存储</h4><blockquote><p>Redis是一个基于内存的高效的键值型非关系型数据库，存取效率极高，而且支持多种存储数据结构，使用简单。</p></blockquote><ul><li><p>启动redis服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动redis数据库服务端</span></span><br><span class="line">redis-server</span><br><span class="line"><span class="comment"># 使用密码启动redis客户端</span></span><br><span class="line">redis-cli -a 1234</span><br></pre></td></tr></table></figure></li><li><p>Redis和StrictRedis</p><p>redis-py库提供两个类Redis和StrictRedis来实现Redis的命令操作（官方推荐使用StrictRedis）</p></li><li><p>连接Redis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis,ConnectionPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ConnectionPool连接</span></span><br><span class="line">pool = ConnectionPool(host=<span class="string">'localhost'</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>,password=<span class="string">'1234'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">''''</span></span><br><span class="line"><span class="string"># ConnectionPool还支持通过URL来构建</span></span><br><span class="line"><span class="string"># Redis TCP连接</span></span><br><span class="line"><span class="string">redis://[:passwrod]@host:port/db</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Redis TCP+SSL连接</span></span><br><span class="line"><span class="string">rediss://[:passwrod]@host:port/db</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Reids UNIX socket连接</span></span><br><span class="line"><span class="string">unix://[:password]@path/to/socket.sock?db=db</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">url = 'redis://:1234@localhost:6379/0'</span></span><br><span class="line"><span class="string">pool = ConnectionPoo;.from_url(url)</span></span><br><span class="line"><span class="string">redis = StrictRedis(connection_pool=pool)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># redis = StrictRedis(host='localhost',port=6379,db=0,password='1234')</span></span><br><span class="line"></span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br><span class="line">redis.set(<span class="string">'name'</span>,<span class="string">'duzhida'</span>)</span><br><span class="line">print(redis.get(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure></li></ul><h2 id="六、Ajax数据爬取"><a href="#六、Ajax数据爬取" class="headerlink" title="六、Ajax数据爬取"></a>六、Ajax数据爬取</h2><h3 id="6-1-什么是Ajax"><a href="#6-1-什么是Ajax" class="headerlink" title="6.1 什么是Ajax"></a>6.1 什么是Ajax</h3><h3 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h3><blockquote><p>Ajax全称为Asynchronous JavaScript and XML，即异步的JavaScript和XML。它不是一门编程语言，而是利用JavaScript在保证页面不被刷新，页面链接不改变的情况下与服务器交换数据并更新部分网页的的技术。</p></blockquote><h4 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h4><ul><li><p>实例引入：很多网页都有下滑查看更多的选项，下滑页面会出现加载动画，一段时间过后才会出现新的内容，这个过程就是Ajax加载的过程。</p></li><li><p>发送Ajax请求到网页更新的过程分为以下3步：</p><ol><li>发送请求</li><li>解析内容</li><li>渲染网页</li></ol></li><li><p>发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个JavaScript对Ajax最底层的实现，实际上就是新建了XMLHttpReequest对象，然后调用onreadystatechange属性设置了监听，然后调用open()和send()方法向某个链接(服务器)发送请求</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">    <span class="comment">//code for IE7+,Firfox,Chrome,Opera,Safari</span></span><br><span class="line">    xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//code for IE6,IE5</span></span><br><span class="line">    xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML = xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/ajax/"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send()</span><br></pre></td></tr></table></figure></li><li><p>解析内容</p><p>得到相应之后，onreadystatechange属性对应的方法就会触发，此时利用xmlhttp的responseText属性便可取到响应内容。返回的内容可能是HTML，可能是JSON，接下来只需要在方法中用JavaScript进一步处理即可。</p></li><li><p>渲染网页</p><p>JavaScript有改变网页内容的能力，解析完响应内容之后，就可以调用JavaScript来针对解析完的内容对网页进行下一步处理。比如，通过document。getElementById().innerHTML就可以对元素内的源代码进行更改。这样网页显示的内容就改变了，这样的操作也被称为DOM操作。</p></li></ul><h3 id="6-2-Ajax分析方法"><a href="#6-2-Ajax分析方法" class="headerlink" title="6.2 Ajax分析方法"></a>6.2 Ajax分析方法</h3><ol><li><p>查看请求</p><p><img src="/var/folders/g_/cckjvp_d1b39h60g3s9grbp00000gn/T/abnerworks.Typora/image.tiff" alt="img"></p><p><img src="/var/folders/g_/cckjvp_d1b39h60g3s9grbp00000gn/T/abnerworks.Typora/image-20180810214920108.tiff" alt="img"></p><p>XHR即是Ajax特殊的请求类型。</p></li><li><p>过滤请求</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu4y2uiikhj31kw0v5174.jpg" alt="img"></p></li></ol><h3 id="6-3-Ajax结果提取"><a href="#6-3-Ajax结果提取" class="headerlink" title="6.3 Ajax结果提取"></a>6.3 Ajax结果提取</h3><ul><li>分析请求</li></ul><h3 id="6-4-分析Ajax爬取今日头条街拍美图"><a href="#6-4-分析Ajax爬取今日头条街拍美图" class="headerlink" title="6.4 分析Ajax爬取今日头条街拍美图"></a>6.4 分析Ajax爬取今日头条街拍美图</h3><ul><li><p>抓取分析</p><ul><li>目标：<a href="https://www.toutiao.com/search/?keyword=%E8%A1%97%E6%8B%8D" target="_blank" rel="noopener">https://www.toutiao.com/search/?keyword=%E8%A1%97%E6%8B%8D</a></li></ul></li><li><p>实战演练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> RequestException</span><br><span class="line"><span class="keyword">from</span> spider_toutiao.config <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">流程框架：</span></span><br><span class="line"><span class="string">1. 抓取索引页内容</span></span><br><span class="line"><span class="string">  利用requests请求目标站点，得到索引网页HTML代码，返回结果</span></span><br><span class="line"><span class="string">2. 抓取详情页内容</span></span><br><span class="line"><span class="string">  解析返回结果，得到详情页的链接，并进一步抓取详情页的信息</span></span><br><span class="line"><span class="string">3. 下载图片与保存数据库</span></span><br><span class="line"><span class="string">  将图片下载到本地，并把页面信息及图片URL保存至MongoDB</span></span><br><span class="line"><span class="string">4. 开启循环及多线程</span></span><br><span class="line"><span class="string">  对多页内容遍历，开启多线程提高抓取速度</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取主页源代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_index</span><span class="params">(offset,keyword)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'offset'</span>: offset,</span><br><span class="line">        <span class="string">'format'</span>: <span class="string">'json'</span>,</span><br><span class="line">        <span class="string">'keyword'</span>: keyword,</span><br><span class="line">        <span class="string">'autoload'</span>: <span class="string">'true'</span>,</span><br><span class="line">        <span class="string">'count'</span>: <span class="string">'20'</span>,</span><br><span class="line">        <span class="string">'cur_tab'</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 构造目的地址的url链接</span></span><br><span class="line">    url = <span class="string">'https://www.toutiao.com/search_content/?'</span> + urlencode(data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        print(<span class="string">'请求索引页错误'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析获取到的主页源码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page_index</span><span class="params">(html)</span>:</span></span><br><span class="line">    data = json.loads(html)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">'data'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data.get(<span class="string">'data'</span>):</span><br><span class="line">            <span class="keyword">yield</span> item.get(<span class="string">'article_url'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取详情页的页面源码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_detail</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.get(url,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        print(<span class="string">'请求详情页页错误'</span>, url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析详情页的代码，获取相关的title，url和images的url链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page_detail</span><span class="params">(html,url)</span>:</span></span><br><span class="line">    <span class="comment"># 使用BeautifulSoup解析获取的详情页源码，从中提取出包含图片的标题，url和图片url</span></span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">    title = soup.select(<span class="string">"title"</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">    images_pattern = re.compile(<span class="string">'gallery: JSON.parse\((.*?)\),'</span>,re.S)</span><br><span class="line">    results = re.search(images_pattern,html)</span><br><span class="line">    <span class="keyword">if</span> results:</span><br><span class="line">        data = json.loads(json.loads(results.group(<span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">'sub_images'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">            sub_images = data.get(<span class="string">'sub_images'</span>)</span><br><span class="line">            images = [item.get(<span class="string">'url'</span>) <span class="keyword">for</span> item <span class="keyword">in</span> sub_images]</span><br><span class="line">            <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">                download_image(image,title)</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">'title'</span>: title,</span><br><span class="line">                <span class="string">'url'</span>: url,</span><br><span class="line">                <span class="string">'images'</span>: images</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_image</span><span class="params">(url, title)</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载："</span> + title)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            save_image(response.content,title)</span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        print(<span class="string">'请求图片出错'</span>, url)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片到本地</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image</span><span class="params">(content, title)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(title):</span><br><span class="line">        os.mkdir(title)</span><br><span class="line">    file_path = <span class="string">'&#123;0&#125;/&#123;1&#125;.&#123;2&#125;'</span>.format(title,md5(content).hexdigest(),<span class="string">'jpg'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">with</span> open(file_path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># main函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(OFFSET):</span><br><span class="line">        html = get_page_index(<span class="number">20</span> * i,KEYWORD + <span class="string">'图集'</span>)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> parse_page_index(html):</span><br><span class="line">            html = get_page_detail(url)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> html:</span><br><span class="line">                parse_page_detail(html,url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 以下代码开启多进程，但多进程可能会导致封IP，因此暂时不适用多线程</span></span><br><span class="line">    <span class="comment"># groups = [x * 20 for x in range(GROUP_START,GROUP_END + 1)]</span></span><br><span class="line">    <span class="comment"># pool = Pool()</span></span><br><span class="line">    <span class="comment"># pool.map(main, groups)</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><h3 id="Ajax分析方法"><a href="#Ajax分析方法" class="headerlink" title="Ajax分析方法"></a>Ajax分析方法</h3><ol><li>查看请求</li><li>过滤请求</li></ol><h2 id="七、动态渲染页面爬取"><a href="#七、动态渲染页面爬取" class="headerlink" title="七、动态渲染页面爬取"></a>七、动态渲染页面爬取</h2><h3 id="7-1-Selenium的使用"><a href="#7-1-Selenium的使用" class="headerlink" title="7.1 Selenium的使用"></a>7.1 Selenium的使用</h3><blockquote><p>Selenium是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见既可爬。</p></blockquote><ul><li><p>安装selenium</p><p><code>pip install selenium</code></p><ul><li><p>安装chromedriver</p><ul><li><p><a href="http://chromedriver.chromium.org/downloads" target="_blank" rel="noopener">下载地址</a></p></li><li><p>解压并移动到python安装目录下<code>sudo mv chromedriver /usr/bin</code></p></li><li><p>配置ChromeDriver到$PATH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/usr/local/chromedriver"</span></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure></li><li><p>输出<code>Only local connections are allowed</code>则配置完成</p></li></ul></li></ul></li><li><p>基本使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">brower = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    brower.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    input = brower.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">    input.send_keys(<span class="string">'Python'</span>)</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    wait = WebDriverWait(brower,<span class="number">1000</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID,<span class="string">'content_left'</span>)))</span><br><span class="line">    print(brower.current_url)</span><br><span class="line">    <span class="comment"># print(brower.get_cookies())</span></span><br><span class="line">    <span class="comment"># print(brower.page_source)</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    brower.close()</span><br></pre></td></tr></table></figure><ul><li><p>声明浏览器支持对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure></li><li><p>访问页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></li><li><p>查找节点</p><ul><li><p>单个节点，可以根据name、id获取，还可以根据XPath、CSS选择器等获取的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_second = browser.find_element_by_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(input_first,input_second,input_third)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有获取单个节点的方法</span></span><br><span class="line">browser.find_element_by_id()</span><br><span class="line">browser.find_element_by_name()</span><br><span class="line">browser.find_element_by_xpath()</span><br><span class="line">browser.find_element_by_link_text()</span><br><span class="line">browser.find_element_by_tag_name()</span><br><span class="line">browser.find_element_by_class_name()</span><br><span class="line">browser.find_element_by_css_selector()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用方法</span></span><br><span class="line">browser.find_element(By.ID,id)</span><br></pre></td></tr></table></figure></li><li><p>多个节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有获取多个节点的方法</span></span><br><span class="line">browser.find_elements_by_id()</span><br><span class="line">browser.find_elements_by_name()</span><br><span class="line">browser.find_elements_by_xpath()</span><br><span class="line">browser.find_elements_by_link_text()</span><br><span class="line">browser.find_elements_by_partial_link_text()</span><br><span class="line">browser.find_elements_by_tag_name()</span><br><span class="line">browser.find_elements_by_class_name()</span><br><span class="line">browser.find_elements_by_css_selector()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用方法</span></span><br><span class="line">browser.find_elements(By.ID,id)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>节点交互</p><ul><li>常见用法有：输入文字send_keys()方法，清空文字clear()方法，点击按钮click()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input.send_keys(<span class="string">'iPhone'</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(<span class="string">'ipad'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">官方文档</a></p></blockquote></li><li><p>动作链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-example-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source,target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure></li><li><p>执行JavaScript</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0,document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("To Bottom")'</span>)</span><br></pre></td></tr></table></figure></li><li><p>获取节点信息</p><ul><li><p>获取属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-link-logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attribute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure></li><li><p>获取文本值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'js-signin-noauth'</span>)</span><br><span class="line">print(input.text)</span><br></pre></td></tr></table></figure></li><li><p>获取id、位置、标签名和大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input.id)</span><br><span class="line">print(input.location)</span><br><span class="line">print(input.tag_name)</span><br><span class="line">print(input.size)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>切换Frame</p><p>网页中有一种节点叫作iframe，它的结构和外部网页的结构完全一致。Selenium打开网页后，它默认实在父级Frame里面操作，如果页面中还有子Frame，它是不能获取到子Frame里面的节点的，需要使用switch_to.frame()方法来切换Frame。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'no logo'</span>)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br></pre></td></tr></table></figure></li><li><p>延时等待</p><p>在Selenium中，get()方法会在网页框架加载结束后结束执行，但可能并不是浏览器完全加载完成的页面，所以需要延时等待一定时间，确保节点已经加载出来。</p><ul><li><p>隐式等待</p><p>使用隐式等待执行测试的时候，如果Selenium没有在DOM中找到节点，将继续等待，超出设定时间则抛出找不到节点的异常，默认时间为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">'-headless'</span>)</span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br></pre></td></tr></table></figure></li><li><p>显式等待</p><p>显式等待指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出该节点，就返回查找的节点；如果未加载出该节点，则抛出异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">'-headless'</span>)</span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line"><span class="comment"># browser = webdriver.Chrome()</span></span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">wait = WebDriverWait(browser,<span class="number">10</span>)</span><br><span class="line"><span class="comment"># presence_of_element_located的参数是节点的定位元祖，也就是ID为q的节点搜索框</span></span><br><span class="line">input = wait.until(EC.presence_of_element_located((By.ID,<span class="string">'q'</span>)))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,<span class="string">'.btn-search'</span>)))</span><br><span class="line">print(input,button)</span><br></pre></td></tr></table></figure><ul><li><p>其他等待条件</p><p>| 等待条件                               | 含义                                            |<br>| ————————————– | ———————————————– |<br>| title_is                               | 标题是某内容                                    |<br>| title_contains                         | 标题包含某内容                                  |<br>| presence_of_element_located            | 节点加载出来，传入定位元祖                      |<br>| visibility_of+element_located          | 节点可见，传入定位元祖                          |<br>| visibility_of                          | 可见，传入节点对象                              |<br>| presence_of_all_elements_located       | 所有节点加载出来                                |<br>| text_to_be_present_in_element          | 某个节点文本包含某文字                          |<br>| text_to_bo_present_in_element_value    | 某个节点值包含某文字                            |<br>| frame_to_bo_available_and_switch_to_it | 加载并切换                                      |<br>| invisibility_of_element_located        | 节点不可见                                      |<br>| element_to_be_clickable                | 节点可点击                                      |<br>| staleness_of                           | 判断一个节点是否仍在DOM，可判断页面是否已经刷新 |<br>| element_to_be_selected                 | 节点可选择，传入节点对象                        |<br>| element_located_to_be_selected         | 节点可选择，传入定位元祖                        |<br>| element_selection_state_to_be          | 传入节点对象及状态，相等为True，否则False       |<br>| element_located_selection_state_to_be  | 传入定位元祖及状态，相等为True，否则False       |<br>| alert_is_present                       | 是否出现警告                                    |</p><blockquote><p><a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions" target="_blank" rel="noopener">更多参考官方文档</a></p></blockquote></li></ul></li></ul></li><li><p>前进和后退</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></li><li><p>Cookies</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">'-headless'</span>)</span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>:<span class="string">'name'</span>,<span class="string">'domain'</span>:<span class="string">'www.zhihu.com'</span>,<span class="string">'value'</span>:<span class="string">'germey'</span>&#125;)</span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">50</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure></li><li><p>选项卡管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.python.org'</span>)</span><br></pre></td></tr></table></figure></li><li><p>异常处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException,NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">    print(<span class="string">'time out'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.find_element_by_id(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'no element'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="7-2-Splash的使用"><a href="#7-2-Splash的使用" class="headerlink" title="7.2 Splash的使用"></a>7.2 Splash的使用</h3><ul><li>功能<ul><li>异步方式处理多个网页渲染过程</li><li>获取渲染后的页面的源代码或截图</li><li>通过关闭图片渲染或使用adblock规则来加快页面渲染速度</li><li>可执行特定的JavaScript脚本</li><li>可通过Lua脚本来控制页面渲染速度</li><li>获取渲染的详细过程病通过HAR格式呈现</li></ul></li><li>安装<ul><li>安装docker<code>brew cask install docker</code></li><li>现在安装spalsh<code>docker pull scrapinghub/splash</code></li><li>运行spalsh<code>docker run -p 8050:8050 -p 5023:5023 scrapinghub/splash</code></li><li>使用浏览器访问<code>http://localhost:8050</code></li></ul></li><li></li></ul><h3 id="7-3-Splash负载均衡配置"><a href="#7-3-Splash负载均衡配置" class="headerlink" title="7.3 Splash负载均衡配置"></a>7.3 Splash负载均衡配置</h3><h3 id="7-4-使用Selenium爬取淘宝商品"><a href="#7-4-使用Selenium爬取淘宝商品" class="headerlink" title="7.4 使用Selenium爬取淘宝商品"></a>7.4 使用Selenium爬取淘宝商品</h3><blockquote><p>使用Selenium模拟浏览器操作，抓取淘宝的商品信息，并将结果保存到MongoDB</p></blockquote><p>目标地址：<a href="https://s.taobao.com/search?q=美食" target="_blank" rel="noopener">https://s.taobao.com/search?q=美食</a></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvm5on4s0lj311h0opqv5.jpg" alt="meishi"></p><p>步骤：</p><ol><li><p>搜索关键词</p><p>利用Selenium驱动浏览器搜索关键词，得到查询后的商品列表</p></li><li><p>分析页码并翻页</p><p>得到商品页码数，模拟翻页，得到后续页面的商品列表</p></li><li><p>分析提取商品内容</p><p>利用PyQuery分析源码，解析得到商品列表</p></li><li><p>存储至mongoDB</p><p>将商品列表存储至数据库MongoDB</p></li></ol><p>代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">MONGO_URL = <span class="string">'localhost'</span></span><br><span class="line">MONGO_DB = <span class="string">'taobao'</span></span><br><span class="line">MONGO_TABLE = <span class="string">'product'</span></span><br><span class="line">client = pymongo.MongoClient(MONGO_URL)</span><br><span class="line">db = client[MONGO_DB]</span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">'-headless'</span>)</span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line"><span class="comment"># browser = webdriver.Chrome()</span></span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">        input = wait.until(</span><br><span class="line">            EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">"#q"</span>))</span><br><span class="line">        )</span><br><span class="line">        submit = wait.until(</span><br><span class="line">            EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">"#J_TSearchForm &gt; div.search-button &gt; button"</span>))</span><br><span class="line">        )</span><br><span class="line">        input.send_keys(<span class="string">'美食'</span>)</span><br><span class="line">        submit.click()</span><br><span class="line">        total = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.total'</span>)))</span><br><span class="line">        get_products()</span><br><span class="line">        <span class="keyword">return</span> total.text</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        <span class="keyword">return</span> search()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">(page_number)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        input = wait.until(</span><br><span class="line">            EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">"#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.form &gt; input"</span>))</span><br><span class="line">        )</span><br><span class="line">        submit = wait.until(</span><br><span class="line">            EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">"#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.form &gt; span.btn.J_Submit"</span>))</span><br><span class="line">        )</span><br><span class="line">        input.clear()</span><br><span class="line">        input.send_keys(page_number)</span><br><span class="line">        submit.click()</span><br><span class="line">        wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR,<span class="string">'#mainsrp-pager &gt; div &gt; div &gt; div &gt; ul &gt; li.item.active &gt; span'</span>),str(page_number)))</span><br><span class="line">        get_products()</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        next_page(page_number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_products</span><span class="params">()</span>:</span></span><br><span class="line">    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'#mainsrp-itemlist .items .item'</span>)))</span><br><span class="line">    html = browser.page_source</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    items = doc(<span class="string">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        product = &#123;</span><br><span class="line">            <span class="string">'title'</span>: item.find(<span class="string">'.title'</span>).text(),</span><br><span class="line">            <span class="string">'price'</span>: item.find(<span class="string">'.price'</span>).text(),</span><br><span class="line">            <span class="string">'location'</span>: item.find(<span class="string">'.location'</span>).text(),</span><br><span class="line">            <span class="string">'image'</span>: item.find(<span class="string">'.pic .img'</span>).attr(<span class="string">'data-src'</span>),</span><br><span class="line">            <span class="string">'deal'</span>: item.find(<span class="string">'.deal-cnt'</span>).text()[:<span class="number">-3</span>],</span><br><span class="line">            <span class="string">'shop'</span>: item.find(<span class="string">'.shop'</span>).text(),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># print(product)</span></span><br><span class="line">        save_to_mongo(product)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> db[MONGO_TABLE].insert(result):</span><br><span class="line">            print(<span class="string">'存储成功'</span>,result)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">'存储失败'</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    total = search()</span><br><span class="line">    total = int(re.compile((<span class="string">'(\d+)'</span>)).search(total).group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,total + <span class="number">1</span>):</span><br><span class="line">        next_page(i)</span><br><span class="line">    browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><h2 id="八、验证码识别"><a href="#八、验证码识别" class="headerlink" title="八、验证码识别"></a>八、验证码识别</h2><h3 id="8-1-图形验证码的识别"><a href="#8-1-图形验证码的识别" class="headerlink" title="8.1 图形验证码的识别"></a>8.1 图形验证码的识别</h3><h2 id="九、代理的使用"><a href="#九、代理的使用" class="headerlink" title="九、代理的使用"></a>九、代理的使用</h2><h2 id="十、模拟登陆"><a href="#十、模拟登陆" class="headerlink" title="十、模拟登陆"></a>十、模拟登陆</h2><h2 id="十一、APP的爬取"><a href="#十一、APP的爬取" class="headerlink" title="十一、APP的爬取"></a>十一、APP的爬取</h2><h2 id="十二、-pyspider框架的使用"><a href="#十二、-pyspider框架的使用" class="headerlink" title="十二、 pyspider框架的使用"></a>十二、 pyspider框架的使用</h2><ul><li>相关链接<ul><li>GItHub地址：<a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a></li><li>官方文档：<a href="http://docs.pyspider.org/en/latest/" target="_blank" rel="noopener">http://docs.pyspider.org/en/latest/</a></li></ul></li><li>基本功能<ul><li>提供方便易用的WebUI系统，可视化编写和调试爬虫</li><li>提供爬取进度监控、爬取结果查看、爬虫项目管理等功能</li><li>支持多种后端数据库，如MySQL、MongoDB、Redis、SQLite、Elasticsearch、PostgreSQL</li><li>支持多种消息队列，如RabbitMQ、Beanstalk、Redis、Kombu</li><li>提供优先级控制、失败重试、定时抓取等功能</li><li>对接了PhantomJS，可以爬取JavaScript渲染的页面</li><li>支持单机和分布式部署，支持Docker部署</li></ul></li><li>与Scrapy比较</li><li>架构</li></ul><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fvqu6zgoenj307f07cq4y.jpg" alt="pyspider"></p><ol><li>Scheduler 发起任务调度</li><li>Fetcher 负责抓取网页内容</li><li>Processer 负责解析网页内容</li><li>将新生成的Request发给Scheduler进行调度</li><li>将生成的提取结果输出保存</li></ol><p>具体过程：</p><ul><li><p>每个ppyspder的项目对应一个Python脚本，脚本中定义了一个Handler类，它有一个on_start()方法。爬取首先调用on_start()方法生成最初的抓取任务，然后发送给Scheduler进行调度。</p></li><li><p>Scheduler将抓取任务分发给Fetcher进行抓取，Fetcher执行并得到响应，随后将响应发送给Processer。</p></li><li><p>Processer处理响应并提取出新的URL生成新的抓取任务，然后通过消息队列的方式通知Schduler当前抓取任务执行情况，并将新生成的抓取任务发送给Scheduler。若生成了新的提取结果，则将其发送给结果队列等待Result Worker处理。</p></li><li><p>Scheduler接收到新的任务，然后查询数据库，判断其如果是新的抓取任务或者是需要重试的任务就继续进行调度，然后将其发送给Fetcher进行抓取。</p></li><li><p>不断重复以上工作，指导所有的任务都执行完毕，抓取结束。</p></li><li><p>抓取结束后，程序会调用on_finished()方法，这里可以自定义后处理过程。</p></li><li><p>基本使用</p><ul><li>目标：爬去去哪儿网的旅游攻略，链接为<a href="http://travel.qunar.com/travelbook/list.htm" target="_blank" rel="noopener">http://travel.qunar.com/travelbook/list.htm</a></li></ul></li></ul><h2 id="十三、Scrapy框架的使用"><a href="#十三、Scrapy框架的使用" class="headerlink" title="十三、Scrapy框架的使用"></a>十三、Scrapy框架的使用</h2><h2 id="十四、分布式爬虫"><a href="#十四、分布式爬虫" class="headerlink" title="十四、分布式爬虫"></a>十四、分布式爬虫</h2><h2 id="十五、分布式爬虫的部署"><a href="#十五、分布式爬虫的部署" class="headerlink" title="十五、分布式爬虫的部署"></a>十五、分布式爬虫的部署</h2><blockquote><p>待更新2018.09.11</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python文件处理</title>
      <link href="/2018/09/11/Python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
      <url>/2018/09/11/Python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Python文件处理"><a href="#Python文件处理" class="headerlink" title="Python文件处理"></a>Python文件处理</h1><h2 id="Python文件基础操作"><a href="#Python文件基础操作" class="headerlink" title="Python文件基础操作"></a>Python文件基础操作</h2><p>文件：Python中文件是对象；<br>linux文件：一切设备都可以看成文件，例如：磁盘文件，管道，网络Socket，外设等；<br>文件属性：用户，读，写，执行权限</p><h3 id="Python文件打开方式"><a href="#Python文件打开方式" class="headerlink" title="Python文件打开方式"></a>Python文件打开方式</h3><p>文件打开方法：open(name[,mode[buf]])</p><ul><li>name：文件路径</li><li>mode：打开方式</li><li>buf：缓冲buffering大小</li></ul><table><thead><tr><th>mode</th><th>说明</th><th>注意</th></tr></thead><tbody><tr><td>‘r’</td><td>只读方式打开(默认)</td><td>文件必须存在</td></tr><tr><td>‘w’</td><td>只写方式打开</td><td>文件不存在创建文件,文件存在则清空文件内容</td></tr><tr><td>‘a’</td><td>追加方式打开</td><td>文件不存在创建文件</td></tr><tr><td>‘r+’/‘w+’</td><td>读写方式打开</td><td></td></tr><tr><td>‘a+’</td><td>追加和读写方式打开</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认为只读</span></span><br><span class="line">f = open(<span class="string">'push.py'</span>)</span><br><span class="line">x = f.read()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以只写方式打开文件，若文件文件不存在创建文件,文件存在则清空文件内容</span></span><br><span class="line">f = open(<span class="string">'1.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">"test write"</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 以追加方式打开文件</span></span><br><span class="line">f = open(<span class="string">'hello.py'</span>,<span class="string">'a'</span>)</span><br><span class="line">f.write(<span class="string">'print('</span>write test<span class="string">')'</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 以读写方式r+打开，会覆盖文件内容</span></span><br><span class="line">f = open(<span class="string">'hello.py'</span>,<span class="string">'r+'</span>)</span><br><span class="line">f.write(<span class="string">'test r+'</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 以读写方式w+打开，会先清空文件内容</span></span><br><span class="line">f = open(<span class="string">'hello.py'</span>,<span class="string">'w+'</span>)</span><br><span class="line">f.write(<span class="string">'test r+'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="Python读取方式"><a href="#Python读取方式" class="headerlink" title="Python读取方式"></a>Python读取方式</h4><ul><li>read([size])：读取文件(读取size个字节，默认读取全部)</li><li>readline([size])：读取一行<ul><li>len(line) &gt; size return size</li><li>len(line) &lt; size return len(line)</li></ul></li><li>readlines([size])：读取缓冲buff左右的文件，返回每一行所组成的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'hello.py'</span>)</span><br><span class="line">list_c = f.readlines(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 仍返回hello.py中的所有内容，这是因为readlines([size])里的size默认大小为8192字节</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>io.DEFAULT_BUFFER_SIZE</span><br><span class="line"><span class="number">8192</span></span><br><span class="line"><span class="comment"># 此hello.py大小大于8192字节</span></span><br><span class="line">f = open(<span class="string">'hello.py'</span>)</span><br><span class="line">list_c = f.readlines(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># readlines每次只读取与buff缓冲相接近的数字</span></span><br><span class="line"><span class="comment"># 使用迭代器可完成整个文件的读取</span></span><br><span class="line">iter_f = iter(f)</span><br><span class="line">lines = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> iter_f:</span><br><span class="line">    lines += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="Python写入方式"><a href="#Python写入方式" class="headerlink" title="Python写入方式"></a>Python写入方式</h4><ul><li>write(str)：将字符串写入文件</li><li>writelines(sequence_of_strings)：写入多行到文件，参数为可迭代的对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'hello.py'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'test write)</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 以writelines写入文件</span></span><br><span class="line"><span class="string">f.open('</span>hello.py<span class="string">','</span>w<span class="string">')</span></span><br><span class="line"><span class="string">f.writelines(('</span><span class="number">1</span><span class="string">','</span><span class="number">2</span><span class="string">','</span><span class="number">3</span><span class="string">'))</span></span><br><span class="line"><span class="string">f.writelines(['</span><span class="number">1</span><span class="string">','</span><span class="number">2</span><span class="string">','</span><span class="number">3</span><span class="string">'])</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string">f = open('</span>hello.py<span class="string">','</span>w<span class="string">')</span></span><br><span class="line"><span class="string">f.write('</span><span class="number">1111111</span><span class="string">')</span></span><br><span class="line"><span class="string">cat hello.py</span></span><br><span class="line"><span class="string"># 结果仍未空，因未执行文件操作，写入操作还未写入磁盘</span></span><br></pre></td></tr></table></figure><p>写入文件过程</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fv5xd6cyoij31kw0dxwgk.jpg" alt="writefile"></p><blockquote><ol><li>主动调用close()或者flush()方法，写缓存同步到磁盘</li><li>写入数据量大于或者等于写缓存，写缓存同步到磁盘</li></ol></blockquote><h4 id="Python文件关闭"><a href="#Python文件关闭" class="headerlink" title="Python文件关闭"></a>Python文件关闭</h4><ol><li>缓存同步到磁盘</li><li>linux系统中每个进程打开文件的个数是有限的</li><li>如果打开文件数到了系统限制，再打开文件就会失败</li></ol><p>linux系统限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps <span class="comment">#查看进程ID</span></span><br><span class="line">cat /proc/进程ID/limits</span><br><span class="line"><span class="comment"># 可查看软件限制和硬件限制文件打开个数</span></span><br></pre></td></tr></table></figure><p>fileno属性指当前打开文件数，每打开一个文件，fileno返回的整数+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_f = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1025</span>):</span><br><span class="line">    list_f.append(open(<span class="string">'hello.py'</span>,<span class="string">'w'</span>))</span><br><span class="line">    print(<span class="string">"%d:%d"</span> % (i,list_f[i].fileno()))</span><br><span class="line"><span class="comment"># 当超如软件限制时，就会出现打开失败的错误</span></span><br></pre></td></tr></table></figure><h4 id="Python文件指针"><a href="#Python文件指针" class="headerlink" title="Python文件指针"></a>Python文件指针</h4><p>文件读取写入文件指针移动的过程：<br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fv5xr3xrmaj30mk0dkgmu.jpg" alt="filecur"></p><p>Python操作文件指针</p><ul><li>seek(offset[,whence])：移动文件指针<ul><li>offset：偏移量，可以为负数</li><li>whence：偏移相对位置<ul><li>os.SEEK_SET：相对文件起始位置 0</li><li>os.SEEK_CUO：相对文件当前位置 1</li><li>os.SEEK_END：相对文件结尾位置 2</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'hello.py'</span>,<span class="string">'r+'</span>)</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 返回当前文件的偏移</span></span><br><span class="line">f.tell()</span><br><span class="line">f.read(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 指针回到起始位置</span></span><br><span class="line">f.seek(<span class="number">0</span>,os.SEEK_SET)</span><br><span class="line">f.tell()</span><br><span class="line"><span class="comment"># 指针回到结尾位置</span></span><br><span class="line">f.seek(<span class="number">0</span>,os.SEEK_END)</span><br><span class="line">f.tell()</span><br><span class="line"><span class="comment"># 指针相对当前位置向左偏移5</span></span><br><span class="line">f.seek(<span class="number">-5</span>,os.SEEK_CUR)</span><br><span class="line">f.tell()</span><br></pre></td></tr></table></figure><h1 id="文件属性及OS模块使用"><a href="#文件属性及OS模块使用" class="headerlink" title="文件属性及OS模块使用"></a>文件属性及OS模块使用</h1><h2 id="Python文件属性编码格式"><a href="#Python文件属性编码格式" class="headerlink" title="Python文件属性编码格式"></a>Python文件属性编码格式</h2><h3 id="Python文件对象属性"><a href="#Python文件对象属性" class="headerlink" title="Python文件对象属性"></a>Python文件对象属性</h3><p>file.fileno()：文件描述符<br>file.mode：文件打开权限<br>file.encoding：文件编码格式<br>file.closed：文件是否关闭</p><h3 id="Python标准文件"><a href="#Python标准文件" class="headerlink" title="Python标准文件"></a>Python标准文件</h3><p>文件标准输入：sys.stdin<br>文件标准输出：sys.stdout<br>文件标准错误：sys.stderr</p><h3 id="文件命令行参数"><a href="#文件命令行参数" class="headerlink" title="文件命令行参数"></a>文件命令行参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__mian__"</span>:</span><br><span class="line">    print(len(sys.argv))</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv:</span><br><span class="line">        print(arg)</span><br></pre></td></tr></table></figure><h2 id="OS模块对文件和目录操作"><a href="#OS模块对文件和目录操作" class="headerlink" title="OS模块对文件和目录操作"></a>OS模块对文件和目录操作</h2><p><code>os.open(filename,flag[,mode])</code>：打开文件</p><ul><li>flag：打开文件方式<ul><li>os.O_CREAT：创建文件</li><li>os.O_RDONLY：只读方式打开</li><li>os.O_WRONLY：只写方式打开</li><li>os.O_RDWR：读写方式打开</li></ul></li></ul><p><code>os.read(fd,buffersize)</code>：读取文件</p><p><code>os.write(fd,string)</code>：写入文件</p><p><code>os.lseek(fd,pos,how)</code>：文件指针操作</p><p><code>os.close(fd)</code>：关闭文件</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim操作指南</title>
      <link href="/2018/09/10/Vim%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/2018/09/10/Vim%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>Vim的四种模式</p><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>正常模式</td><td>可以使用快捷键命令，或按:输入命令行。</td></tr><tr><td>插入模式</td><td>可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。</td></tr><tr><td>可视模式</td><td>正常模式下按v可以进入可视模式，按V进入可视行模式，整行的选中。ctrl+v进入可视块模式。</td></tr><tr><td>替换模式</td><td>正常模式下，按R进入。</td></tr></tbody></table><h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><ul><li>h 向左移动</li><li>j 向下移动</li><li>k 向上移动</li><li>l 向右移动</li><li>ctrl - f 上翻页</li><li>ctrl - b 下翻页</li><li>% 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。</li><li>w 移动到单词前端(包含标点符号)</li><li>W 单词间移动</li><li>e 移动到单词末端(包含标点符号)</li><li>E 移动到单词末端</li><li>b 向上移动到单词词首(包含标点符号)</li><li>B 空白字符分割的上词词首</li><li>O 开始新的一行</li><li>^ 当前行的第一个非空字符</li><li>$ 到 行尾</li><li>gg 第一行</li><li>gd 跳转到局部变量的定义处；</li><li>[N]G 第N行行首</li><li>tx 把光标移动到目标字符的前一个字符上</li><li>fx 向前查找本行中的字符x</li><li>) 到句首</li><li>( 到句尾</li><li>} 到段首</li><li>{ 到段尾</li><li>* 向下搜索光标所在词</li><li>`. 移动到最后改动的地方。</li></ul><h1 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h1><ul><li>i 在光标之前插入</li><li>I 行尾插入</li><li>a 在光标之后插入</li><li>A 行首插入</li><li>o 当前行下插入一空行</li><li>O 当前行上插入一空行</li><li>Esc 返回模式选择</li></ul><h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h1><ul><li>r  </li><li>J</li><li>cc</li><li>cw</li><li>c$</li><li>s</li><li>S</li><li>u 撤销改动</li><li>ctrl - r 重做</li><li>. 重复上一命令</li><li>~</li><li>g~iw</li><li>gUiw</li><li>guiw</li><li>>></li><li>&lt;&lt;</li><li>== </li></ul><h1 id="剪切和复制"><a href="#剪切和复制" class="headerlink" title="剪切和复制"></a>剪切和复制</h1><ul><li>dd 删除一行</li><li>dw 删除一个单词</li><li>x 删除当前光标下的字符</li><li>X 删除当前光标左边的字符</li><li>D 删除到行尾的内容</li><li>yy 复制一行</li><li>nyy 复制n行</li><li>yw 复制一个单词</li><li>y$ 复制到行尾</li><li>p 粘贴到光标之前</li><li>P 粘贴到光标之后</li><li>]p</li><li>“a</li><li>d 剪切</li></ul><h1 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h1><ul><li>:open 在vim窗口中打开一个新文件</li><li>:split file 在新窗口中打开文件</li><li>:e 打开文件</li><li>:bn 切换到下一个文件</li><li>:bp 切换到上一个文件</li><li>:split 打开横向窗口</li><li>:vsplit 打开纵向窗口</li><li>ctrl - w<ul><li>ctrl - w w 移动到下一个窗口</li><li>ctrl - w j 移动到下方的窗口</li><li>ctrl - w k 移动到上方的窗口</li></ul></li><li>:tabm [N]</li><li>:close 关闭窗口，最后一个窗口无法使用此命令</li><li>:only 关闭所有窗口，只保留当前窗口</li></ul><h1 id="搜索-替换"><a href="#搜索-替换" class="headerlink" title="搜索/替换"></a>搜索/替换</h1><ul><li>/pattern 向后查找</li><li>?pattern 向前查找</li><li>n</li><li>N</li><li>:s/old/new 替换当前行的第一个匹配</li><li>:s/old/new/g 替换当前行的所有匹配</li><li>:s/old/new/gc 替换命令尾部加上c(confirm用于确认)，在替换每个old前都会提示并确认</li><li>:%s/old/new/ 替换所有行的第一个匹配</li><li>:%s/old/new/g 替换整个文件的所有匹配</li></ul><h1 id="选中模式"><a href="#选中模式" class="headerlink" title="选中模式"></a>选中模式</h1><ul><li>文本标记<ul><li>v 进入可视模式，移动光标选择块</li><li>V 整行整行的选中</li><li>ctrl - v 进入可视块模式</li><li>o 在可视模式中首尾跳转</li><li>U 选中的所有单词变为大写</li><li>u 选中的所有单词变为大写</li><li>aw 以单词为单位跳转</li><li>ab 选中()中的内容，包含()</li><li>aB 选中{}中的内容，包含{}</li><li>ib 选中()中的内容，不包含()</li><li>iB 选中{}中的内容，不包含{}</li></ul></li><li>命令<ul><li><blockquote><p>光标所在行向右缩进四个空格</p></blockquote></li><li>&lt; 光标所在行向左缩进四个空格</li><li>y </li><li>d</li><li>~</li></ul></li></ul><h1 id="离开"><a href="#离开" class="headerlink" title="离开"></a>离开</h1><ul><li>:w 保存</li><li>:wq 保存并退出(即使文件没有被修改也强制写入，并更新文件的修改时间。)</li><li>:x 保存并退出(仅当文件被修改时才写入，并更新文件修改时间，否则不会更新文件修改时间。)</li><li>:q 退出</li><li>:q! 强制退出</li></ul><h1 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h1><ul><li>qa q+任意字母开始录制，再按q结束录制</li><li>q 录制</li><li>@a @+字母使用这个宏</li></ul><h1 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h1><ul><li>:!command</li><li>:!ls 列出当前目录下的文件</li></ul><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><ul><li>:X 设置密码</li><li>:set key=  取消密码</li></ul><h1 id="编程常用"><a href="#编程常用" class="headerlink" title="编程常用"></a>编程常用</h1><ul><li>gd: 跳转到局部变量的定义处；</li><li>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</li><li>g;: 上一个修改过的地方；</li><li>g,: 下一个修改过的地方；</li><li>[[: 跳转到上一个函数块开始，需要有单独一行的{。</li><li>]]: 跳转到下一个函数块开始，需要有单独一行的{。</li><li>[]: 跳转到上一个函数块结束，需要有单独一行的}。</li><li>][: 跳转到下一个函数块结束，需要有单独一行的}。</li><li>[{: 跳转到当前块开始处；</li><li>]}: 跳转到当前块结束处；</li><li>[/: 跳转到当前注释块开始处；</li><li>]/: 跳转到当前注释块结束处；</li><li>%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else,#endif之间跳跃。</li><li>ci’, di’, yi’：修改、剪切或复制’之间的内容。</li><li>ca’, da’, ya’：修改、剪切或复制’之间的内容，包含’。</li><li>ci”, di”, yi”：修改、剪切或复制”之间的内容。</li><li>ca”, da”, ya”：修改、剪切或复制”之间的内容，包含”。</li><li>ci(, di(, yi(：修改、剪切或复制()之间的内容。</li><li>ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。</li><li>ci[, di[, yi[：修改、剪切或复制[]之间的内容。</li><li>ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。</li><li>ci{, di{, yi{：修改、剪切或复制{}之间的内容。</li><li>ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。</li><li>ci&lt;, di&lt;, yi&lt;：修改、剪切或复制&lt;&gt;之间的内容。</li><li>ca&lt;, da&lt;, ya&lt;：修改、剪切或复制&lt;&gt;之间的内容，包含&lt;&gt;。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象编程</title>
      <link href="/2018/09/09/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/09/09/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面向对象编程"><a href="#Python面向对象编程" class="headerlink" title="Python面向对象编程"></a>Python面向对象编程</h1><blockquote><p>面向对象编程(Object Oriented Programming，简称OOB)是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用面向对象编程，将Student这种数据类型视为一个对象，这个对象拥有name和score两个属性。如果要打印学生的成绩，首先必须创建出这个学生对应的对象，然后调用对象的方法，让对象自己把对应的数据打印出来。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.name,self.score))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给对象发消息实际上是调用对象对应的关联函数，称之为对象的方法</span></span><br><span class="line">bart = Student(<span class="string">'Bart Simpson'</span>,<span class="number">59</span>)</span><br><span class="line">lisa = Student(<span class="string">'Lisa Simpson'</span>,<span class="number">87</span>)</span><br><span class="line">bart.print_score()</span><br><span class="line">lisa.print_score()</span><br></pre></td></tr></table></figure><h2 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h2><p>面向对象最重要的概念就是类(Class)和实例(Instance)，类是抽象的模板，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><p>定义类是通过<code>class</code>关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>：</span></span><br><span class="line"><span class="class">    <span class="title">pass</span></span></span><br></pre></td></tr></table></figure><p>变量指向的就是类的实例，0x10b0a60b8是内存地址，每个实例的地址都不一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bart = Student()</span><br><span class="line">bart</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x10b0a60b8</span>&gt;</span><br><span class="line">Student</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Student</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>类可以起到模板的作用，因此在创建实例的时候，把一些必须绑定的数据强制填写进去。通过一个特殊的<code>__init__</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><blockquote><p>特殊方法<code>__init__</code>前后分别有两个下划线，<code>__init__</code>方法的第一个参数永远是self，表示创建实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。有了<strong>init</strong>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<strong>init</strong>方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传递进去。</p></blockquote><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><p>每个实例都拥有自己的数据。可以通过函数来访问这些数据，实例本身就拥有数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在Student类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和Student类本身是关联起来的，我们称之为类的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'C'</span></span><br></pre></td></tr></table></figure><h1 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h1><p>在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<strong>，在Python中，实例的变量名如果以</strong>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s: %s'</span> % (self.__name,self.__score))</span><br><span class="line"><span class="comment"># 改吗修改完成后，对外部代码来说没有什么变化，但是 已经无法从外部访问实例变量.__name和实例变量.__score了。</span></span><br></pre></td></tr></table></figure><p>好处：这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p><p>外部无法获取name和score属性，就需要给类增加响应的get和set方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"><span class="comment"># 这样可以在方法中对传入的数据进行检查，便面传入无效参数。</span></span><br></pre></td></tr></table></figure><blockquote><p>在Python中，变量名类似<strong>xxx</strong>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<strong>name</strong>、<strong>score</strong>这样的变量名。有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p></blockquote><h1 id="集成和多态"><a href="#集成和多态" class="headerlink" title="集成和多态"></a>集成和多态</h1><p>当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal is running...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写Dog和Cat类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Cat is running'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类可以获得父类的全部功能</span></span><br><span class="line">dog = Dog()</span><br><span class="line">dog.run()</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当子类和父类都存在相同的run方法时，子类的方法会覆盖父类的方法，代码运行时总会调用子类的run()方法。这是继承的另一个好处：多态。</span></span><br><span class="line"><span class="comment"># 判断某个变量是否为某个类型时，可以用isinstance()判断</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(dog,Dog)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fv3p1mim8rj30a105sjr7.jpg" alt="object"></p><p>对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。</p><p>对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了,</p><h1 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h1><ul><li>使用type()可以判断对象的类型</li><li>使用isinstance()可以判断类的继承关系</li><li>使用dir()<ul><li>使用dir()可以获取一个对象的所有属性和方法，它返回一个包含字符串的list</li></ul></li></ul><h1 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h1><p>如果类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归类所有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'Student'</span></span><br></pre></td></tr></table></figure><p>这个类属性虽然归类所有，但是所有实例都可以访问到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建实例s</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="comment"># 因为实例没有name属性，因此会继续查找class的name属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'Student'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.name</span><br><span class="line"><span class="string">'Student'</span></span><br><span class="line"><span class="comment"># 给实例绑定name属性，由于实例属性的优先级比类属性高，因此会屏蔽掉类的name属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'Michael'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student.name</span><br><span class="line"><span class="string">'Student'</span></span><br><span class="line"><span class="comment"># 删除实例的name属性，再次调用类属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> s.name</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'Student'</span></span><br></pre></td></tr></table></figure><blockquote><p>编写程序时，实例属性和类属性不应该使用相同的名字</p></blockquote><h1 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h1><h2 id="使用slots"><a href="#使用slots" class="headerlink" title="使用slots"></a>使用<strong>slots</strong></h2><p>在Python中，我们可以动态地给实例绑定任何属性和方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 动态地给实例绑定属性和方法，但只对当前实例有效，对其他实例是不起作用的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'michael'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self,age)</span>:</span></span><br><span class="line"><span class="meta">... </span>    self.age = age</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_age = MethodType(set_age,s)</span><br></pre></td></tr></table></figure><p>在定义class的时候，定义一个特殊的变量<strong>slots</strong>，可以显示该class实例能添加的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>,<span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'michael'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>slots</strong>定义的属性仅对当前类实例起作用，对集成的子类是不起作用的，若在子类中也定义<strong>slots</strong>属性，则子类实例允许的属性就是自身的<strong>slots属性加上父类的</strong>slots__。</p></blockquote><h2 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h2><p>装饰器(decorator)可以给函数动态加上功能，对于类的方法，装饰器同样起作用。Python内置的@property装饰器就是负责把一个方法编程属性调用的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!)</span></span><br><span class="line"><span class="string">        if value &lt; 0 or value &gt; 100:</span></span><br><span class="line"><span class="string">            raise ValueError('</span>score must between <span class="number">0</span> ~ <span class="number">100</span><span class="string">')</span></span><br><span class="line"><span class="string">        self._score = value</span></span><br></pre></td></tr></table></figure><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><h2 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h2><h3 id="str"><a href="#str" class="headerlink" title="str"></a><strong>str</strong></h3><p>当我们定义类并打印出它的实例是，通常是<code>&lt;__main__.Student object at 0x00000000&gt;</code>这种形式的，如何才能将它变得好看又直观呢？只需要在类中定义好<strong>str</strong>()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'student object (name: %s)'</span> % self.name</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student(<span class="string">'michael'</span>))</span><br><span class="line">student object (name: michael)</span><br></pre></td></tr></table></figure><h3 id="iter"><a href="#iter" class="headerlink" title="iter"></a><strong>iter</strong></h3><p>如果一个类想被用于<code>for ... in</code>循环，类似list或tuple那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<code>__next__()</code>方法拿到循环的下一个值，直到遇到<code>StopIteration</code>错误时退出循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></span><br></pre></td></tr></table></figure><h3 id="getitem"><a href="#getitem" class="headerlink" title="getitem"></a><strong>getitem</strong></h3><p>虽然可以用类实现循环迭代，但无法像list那样按照下标取出元素，需要实现<strong>getitem</strong>()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(n,int):</span><br><span class="line">            a,b = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</span><br><span class="line">                a,b = b,a+b</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> isinstance(n,slice):</span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                start = <span class="number">0</span></span><br><span class="line">            a,b = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">            L = []</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(stop):</span><br><span class="line">                <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a,b = b,a+b</span><br><span class="line">            <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在就可以按下标访问数列的任意一项了，并加入判断，若n为切片，则使用切片方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Fib()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a><strong>getattr</strong></h3><p>通常情况下，当我们调用类的属性或方法时，若不存在即报错，但是使用<code>__getattr__()</code>方法，可以动态返回一个属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'Michael'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self,attr)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">'score'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line">        <span class="comment"># 也可以返回函数</span></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">'age'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span>:<span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.scorre</span><br><span class="line"><span class="number">99</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age()</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="comment"># 只有在没有找到属性的情况下才会调用__getattr__，已有的属性不会再__getattr__中查找。</span></span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call"></a><strong>call</strong></h3><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，使用instance.method()来调用。在Python中，任何类只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'My name is %s.'</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用方法如下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Michael'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s()</span><br><span class="line">My name <span class="keyword">is</span> Michael.</span><br></pre></td></tr></table></figure><p><code>__call__()</code>还可以定义参数，对实例进行直接调用就好像对一个函数进行调用一样。如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个Callable对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; callable(s)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>callable(Student(<span class="string">'duzhida'</span>))</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h2 id="使用枚举类"><a href="#使用枚举类" class="headerlink" title="使用枚举类"></a>使用枚举类</h2><p>当我们需要定义常量时，一个方法时用大写变量通过整数来定义，例如月份。更好的方法是为这样的枚举类定义一个class类型，然后每个常量都是class的一个唯一实例。Python可以通过Enum类来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line">Month = Enum(<span class="string">'Month'</span>,(<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>, <span class="string">'Aug'</span>, <span class="string">'Sep'</span>, <span class="string">'Oct'</span>, <span class="string">'Nov'</span>, <span class="string">'Dec'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    <span class="comment"># value属性是自动赋给成员的int常量，默认从1开始计数</span></span><br><span class="line">    print(name,<span class="string">'=&gt;'</span>,member,<span class="string">','</span>,member.value)</span><br></pre></td></tr></table></figure><p>若需要更精确地控制枚举类型，可以从Enum派生出自定义类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="comment"># @unique装饰器可以帮助我们检查保证没有重复值</span></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    Sun = <span class="number">0</span> <span class="comment"># Sun的value被设定为0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pro-Git笔记</title>
      <link href="/2018/09/08/Pro-Git%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/08/Pro-Git%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Pro-Git学习笔记"><a href="#Pro-Git学习笔记" class="headerlink" title="Pro Git学习笔记"></a>Pro Git学习笔记</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#Git简介">Git简介</a></li><li><a href="#安装Git">安装Git</a></li><li><a href="#初次运行Git前的配置">初次运行Git前的配置</a></li><li><a href="#Git基础">Git基础</a></li><li><a href="#Git分支">Git分支</a></li></ul><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ol><li>直接记录快照，而非差异比较</li><li>近乎所有操作都是本地执行</li><li>Git保证完整性</li><li>Git一般只添加数据</li><li>三种状态<ul><li><strong>以提交</strong> – 已提交表示数据已经安全的保存在本地数据库中</li></ul><ol start="2"><li><strong>已修改</strong> – 修改了文件，但还没保存到数据库中</li><li><strong>已暂存</strong> – 对一个已修改的文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol></li><li>工作区域<ul><li><strong>Git仓库</strong> – 用来保存项目的元数据和对象数据库的地方，从其他计算基金克隆仓库时，拷贝的就是这里的数据</li></ul><ol start="2"><li><strong>工作目录</strong> – 对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘 上供你使用或修改。</li><li><strong>暂存区域</strong> – 暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索 引’’，不过一般说法还是叫暂存区域。<img src="https://ws1.sinaimg.cn/large/0079wTXjgy1fsmpcjuov0j30jz0b1taa" alt=""></li></ol></li></ol><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul><li>Linux上安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> yum install git</span><br><span class="line">    </span><br><span class="line"><span class="variable">$sudo</span> apt-get install git</span><br></pre></td></tr></table></figure><ul><li><p>Mac上安装<br>安装Xcode Command Line Tools</p></li><li><p>Windows上安装<br><a href="git-scm.com/download/win">Git官网</a></p></li><li><p>源代码安装<br>从源码安装Git，需要安装Git以来的库：curl、zlib、openssl、expat和libiconv</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> yum install curl-devel expat-devel gettext-devel \ openssl-devel zlib-devel </span><br><span class="line"><span class="variable">$sudo</span> apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \ libz-dev libssl-dev</span><br></pre></td></tr></table></figure><p>为了能够添加更多格式的文档（如 doc, html, info），你需要安装以下的依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> yum install asciidoc xmlto docbook2x </span><br><span class="line"><span class="variable">$sudo</span> apt-get install asciidoc xmlto docbook2x</span><br></pre></td></tr></table></figure><p><a href="https://www.kernel.org/pub/software/scm/git" target="_blank" rel="noopener">下载Git的tar包</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tar</span> -zxf git-2.0.0.tar.gz </span><br><span class="line"><span class="variable">$cd</span> git-2.0.0 $ make configure $ ./configure --prefix=/usr </span><br><span class="line"><span class="variable">$make</span> all doc info </span><br><span class="line"><span class="variable">$sudo</span> make install install-doc install-html install-info</span><br></pre></td></tr></table></figure><p>使用Git来获取Git的升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> git://git.kernel.org/pub/scm/git/git.git</span><br></pre></td></tr></table></figure><h2 id="初次运行Git前的配置"><a href="#初次运行Git前的配置" class="headerlink" title="初次运行Git前的配置"></a>初次运行Git前的配置</h2><h3 id="三个配置变量"><a href="#三个配置变量" class="headerlink" title="三个配置变量"></a>三个配置变量</h3><p>每一个级别覆盖上一级别的配置</p><ol><li><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的 git config 时，它会从此文件读写配置变量。</li><li><code>~/.gitconfig</code> 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 –global 选项让 Git 读写此文件。</li><li><code>.git/config</code> 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。</li></ol><blockquote><p>在Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是 C:\Users\$USER）的 .gitconfig 文件。 Git 同样也会寻找 /etc/gitconfig 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。</p></blockquote><h3 id="用户信息和文本编辑器"><a href="#用户信息和文本编辑器" class="headerlink" title="用户信息和文本编辑器"></a>用户信息和文本编辑器</h3><p>设置用户名称和邮件地址，因为每一个Git的提交都会使用这些信息，并且会写入到你的每一次提交中，不可更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> config --gloabl user.name <span class="string">"username"</span></span><br><span class="line"><span class="variable">$git</span> config --global user.email <span class="string">"user email"</span></span><br><span class="line"><span class="variable">$git</span> config --global core.editor emacs</span><br><span class="line">//default vim</span><br></pre></td></tr></table></figure><blockquote><p>如果使用了 –global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事 情， Git 都会使用那些信息。<br>当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运 行没有 –global 选项的命令来配置。</p></blockquote><p>检查配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> config --list</span><br><span class="line">//check someone</span><br><span class="line"><span class="variable">$git</span> config &lt;key&gt;</span><br></pre></td></tr></table></figure><h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><p>Git命令使用手册</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line"><span class="variable">$git</span>  &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line"><span class="variable">$man</span> git-&lt;verb&gt;</span><br></pre></td></tr></table></figure><p>config命令手册</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">help</span> config</span><br></pre></td></tr></table></figure><h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><h3 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h3><ol><li><p>在现有项目或目录下导入所有文件到Git中</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> init</span><br></pre></td></tr></table></figure><p> 使用该命令后将创建一个.git的子目录，子目录中含有初始化Git仓库中所有的必须文件，这些文件是Git仓库的骨干。</p><p> .git文件夹中包含的文件信息：</p><p> 初始化仓库以后，使用<code>git add .</code>跟踪文件。可以通过<code>git add &lt;file&gt;</code>实现对指定文件的跟踪，然后执行<code>git commit</code>提交。</p></li><li><p>从服务器克隆一个现有的Git仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> [git-url]</span><br></pre></td></tr></table></figure><p> git支持多种数据传输协议</p><ul><li><code>https://</code>协议</li><li><code>git://</code>协议</li><li><code>SSH</code>协议 <code>user@server:path/to/repo.git</code></li></ul></li></ol><h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><p><img src="https://ws1.sinaimg.cn/large/0079wTXjgy1fsns4c405fj30n509rwfp" alt="state"></p><p>工作目录下的每个文件都只有两种状态：已跟踪或未跟踪。</p><ul><li><p>已跟踪的文件是指那些被纳入了版本控制的文件</p></li><li><p>工作目录中除了已跟踪的文件以外的所有其他文件都属于未跟踪文件</p></li></ul><p>状态：</p><ol><li>新建文件<code>README</code>(未跟踪状态)</li><li><code>git add README</code>跟踪README文件(暂存状态)</li><li>修改已跟踪文件<code>CONTRIBUTING.md</code>(修改状态，但还未添加到暂存区，要暂存文件更新，使用<code>git add CONTRIBUTING.md</code>暂存文件更新)</li></ol><ul><li><p>检查当前文件状态</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> status</span><br></pre></td></tr></table></figure></li><li><p>跟踪新文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> add [file]</span><br></pre></td></tr></table></figure></li><li><p>暂存已修改文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> add [file]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>状态简览</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> status -s/--short</span><br></pre></td></tr></table></figure><p>  使用<code>git status -s</code>显示简短的状态信息</p><ul><li>新添加的未跟踪文件前面为<code>??</code>标记</li><li>新添加到暂存文件前面有<code>A</code>标记</li><li>修改过的文件前面为<code>M</code>标记</li></ul></li><li><p>忽略文件</p><p>  创建一个名为<code>.gitignore</code>的文件，列出药忽略的文件模式。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> .gitignore </span><br><span class="line"><span class="comment"># 忽略所有以.o或.a结尾的文件</span></span><br><span class="line">*.[oa] </span><br><span class="line"><span class="comment"># 忽略所有以~结尾的文件</span></span><br><span class="line">*~</span><br></pre></td></tr></table></figure></li></ul><pre><code>`.gitignore`的格式规范如下：* 所有空行或者以 `＃` 开头的行都会被 Git 忽略。* 可以使用标准的 `glob` 模式匹配。* 匹配模式可以以（`/`）开头防止递归。* 匹配模式可以以（`/`）结尾指定目录。* 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（`!`）取反。glob模式是指shell所使用的简化了的正则表达式。* 星号（\*）匹配零个或多个任意字符；*  [abc]匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c)；* 问号（? ）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配 （比如 [0-9] 表示匹配所有 0 到 9 的数字）。 * 使用两个星号（\*) 表示匹配任意中间目录，比如\`a/**/z\` 可以匹 配 a/z, a/b/z 或 \`a/b/c/z\`等。&gt; [.gitignore文件列表](https://github.com/github/gitignore)</code></pre><ul><li><p>查看已暂存和未暂存的修改</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> diff</span><br><span class="line"><span class="comment"># 若要查看已暂存的将要添加到下次提交里的内容，可以使用git diff --cached(git diff --staged)命令。</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>git diff</code>分析文件差异，也可以通过图形化的方式或其他格式输出，可以使用<code>git difftool</code>命令来用Araix，emerge或vimdiff等软件输出diff分析结果。</p></blockquote></li><li><p>提交更新</p><p>  运行提交命令<code>git commit</code>前，应先用<code>git status</code>查看文件是否都是暂存状态，若文件还不是暂存状态，要用<code>git add</code>将修改或新添加的文件添加到暂存区，否则提交的时候不会记录这些还没暂存起来的变化。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> commit -m <span class="string">"message"</span></span><br></pre></td></tr></table></figure><blockquote><p>提交记录的是暂存区域的快照。任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对项目做一次快照。以后可以回到这个状态或进行比较。</p></blockquote></li><li><p>跳过使用暂存区域</p><p>  给<code>git commit</code>加上<code>-a</code>选项，Git就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过<code>git add</code>步骤。</p></li><li><p>移除文件</p><p>  要从Git中移除某个文件，就必须要从已跟踪文件清单中移除(即从暂存区域移除)，然后提交。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> rm PROJECT.md</span><br></pre></td></tr></table></figure><p>  下次提交时，该文件就不再纳入版本管理中，如果要删除之前修改并且已经放到暂存区域的话，则必须使用强制删除选项<code>-f</code>。</p><p>  若想让文件保留在目录中，但不希望Git继续跟踪。可以添加<code>--cached</code>选项。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> rm --cached README</span><br></pre></td></tr></table></figure></li></ul><pre><code>也可以使用glob模式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该命令删除log目录下扩展名为.log的所有文件</span></span><br><span class="line"><span class="variable">$git</span> rm <span class="built_in">log</span>/\*.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>移动文件</p><p>  使用<code>git mv</code>命令，也可以对文件进行重命名</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> mv file_from file_to</span><br></pre></td></tr></table></figure><p>  运行<code>git mv</code>相当于运行了下面三条命令，不过Git会意识到这是一次改名。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mv</span> README.md README</span><br><span class="line"><span class="variable">$git</span> rm README.md</span><br><span class="line"><span class="variable">$git</span> add README</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>使用<code>git log</code>命令可以查看提交历史记录。默认会按提交时间列出所有更新，最近的更新在最上面。</p><p><code>-p</code>选项用来显示每次提交内容的差异。使用<code>-num</code>可以显示最近num次提交的记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">log</span> -p --<span class="built_in">stat</span> -2</span><br></pre></td></tr></table></figure><p>添加<code>-stat</code>选项可以返回每次提交的简略的统计信息。另一个常用的选项是<code>--pretty</code>(oneline，short，full，fuller)，这个选项可以指定使用不同于默认格式的方式展示提交历史。<code>format</code>可以定制要显示的记录格式。<code>--graph</code>可以形象地展示分支、合并历史。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">log</span> --pretty=format:<span class="string">"%h - %an, %ar : %s"</span> --graph</span><br><span class="line">586f3df - entercoder1993, 34 hours ago : update note of git</span><br><span class="line">0c17bed - entercoder1993, 6 days ago : update spider of python</span><br><span class="line">a0fe9fc - entercoder1993, 7 days ago : add data analysis of python</span><br></pre></td></tr></table></figure><p><code>format</code>常用选项</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fvv7fct89zj30kt0d1dil.jpg" alt="format"></p><p><code>git log</code>的常用选项表格</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>按补丁格式显示每个更新之间的差异</td></tr><tr><td>–stat</td><td>显示每次更新的文件修改统计信息</td></tr><tr><td>–shortstat</td><td>只显示—stat中最后的行数修改添加移除统计</td></tr><tr><td>–name-only</td><td>仅在提交信息后显示已修改的文件清单</td></tr><tr><td>–abbrev-commit</td><td>仅显示SHA-1的前几个字符</td></tr><tr><td>–relative-date</td><td>使用较短的相对时间显示</td></tr><tr><td>–graph</td><td>显示ASCII图形表示的分支合并历史</td></tr><tr><td>–pretty</td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</td></tr><tr><td>–name-status</td><td>显示新增、修改、删除的文件清单</td></tr></tbody></table><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><p>运行带有<code>--amend</code>选项的提交命令会将暂存区中的文件提交。如果上次提交以来未做任何修改，则修改的只是提交信息。</p><ul><li><p>取消暂存的文件</p><p>  使用<code>git reset HEAD &lt;file&gt;</code>可以用来取消暂存。</p></li><li><p>取消对文件的修改</p></li></ul><h3 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h3><blockquote><p>远程仓库是指托管在因特网或其他网络中的项目版本库。</p></blockquote><ul><li><p>常看远程仓库</p><p>  使用<code>git remote</code>命令可以查看已经配置的远程仓库服务器，使用<code>-v</code>选项会显示需要读写远程仓库使用的Git保存的简写与其对应的URL。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> remote -v</span><br><span class="line">originhttps://github.com/entercoder1993/entercoder1993.github.io.git (fetch)</span><br><span class="line">originhttps://github.com/entercoder1993/entercoder1993.github.io.git (push)</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库</p><p>  使用<code>git remote add &lt;shortname&gt; &lt;url&gt;</code>可以添加一个新的远程仓库。</p></li><li><p>从远程仓库抓取与拉取</p><p>  使用<code>git fetch &lt;remote-name&gt;</code>可以从远程仓库中获得数据。它会访问远程仓库，从中拉取所有你还没有的信息。<br>  如果使用<code>clone</code>克隆一个仓库，命令会自动添加为远程仓库并默认一“origin”为简写。<br>  <code>git fetch origin</code>会抓取(或上一次抓取)后新推送的所有工作。但需要手动将其合并到工作中。<br>  <code>git pull</code>会自动的抓取然后合并远程分支到当前分支。</p></li><li><p>推送到远程分支</p><p>  <code>git push &lt;remote-name&gt; &lt;branch-name&gt;</code>可以将项目推送到远程仓库服务器。只有当你有所克隆服务器的写入权限，并且之前没有人推送过时才可以使用此命令。若有其他人先推送了，则必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。</p></li><li><p>查看远程仓库</p><p>  使用<code>git remote show &lt;remote-name&gt;</code>可以查看某一远程仓库的更多信息。</p></li></ul><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><ul><li><p>列出标签 <code>git tag</code></p></li><li><p>创建标签</p></li></ul><p>标签类型：</p><ol><li>轻量标签</li><li>附注标签</li></ol><p>附注标签是可以被校验的，其中包含打标签者的名字、电子邮件、时间日期等。因此通常建议创建附注标签；但如果只是想用一个临时标签，或者不需要保存以上信息，可以使用轻量标签。</p><ul><li>附注标签</li></ul><p>在运行<code>tag</code>命令时指定<code>-a</code>选项极客创建一个附注标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> tag -a v1.4 -m <span class="string">'my version 1.4'</span></span><br></pre></td></tr></table></figure><p>运行<code>git show</code>命令可以看到标签信息与对应的提交信息。</p><ul><li>轻量标签</li></ul><p>轻量标签不需要使用<code>-a</code>、<code>-s</code>或、<code>-m</code>选项，只需提供标签名称即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> tag v1.4-lw</span><br></pre></td></tr></table></figure><ul><li>后期打标签</li></ul><p>想要在已提交的项目打标签时，只需要在命令的末尾指定提交的校验和(或部分校验和)即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> tag -a v1.2 9fceb02</span><br></pre></td></tr></table></figure><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><h3 id="分支简介"><a href="#分支简介" class="headerlink" title="分支简介"></a>分支简介</h3><ul><li><p>创建分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> branch bran-name</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>切换分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> checkout bran-name</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看分叉历史</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">log</span></span><br><span class="line"><span class="variable">$git</span> <span class="built_in">log</span> --oneline --decorete --graph --all</span><br></pre></td></tr></table></figure></li></ul><h3 id="分支的新建与合并"><a href="#分支的新建与合并" class="headerlink" title="分支的新建与合并"></a>分支的新建与合并</h3><p>工作流：</p><ol><li>开发某个网站</li><li>为实现某个需求，创建一个分支</li><li>在这个分支上展开工作</li></ol><p>有Bug需紧急处理：</p><ol><li>切换到你的线上分支</li><li>为紧急任务创建一个新的分支，并修复它</li><li>测试通过后，切换回线上分支，合并这个修补分支，最后将改动推动到线上分支</li><li>切换回最初工作的分支，继续工作</li></ol><ul><li><p>新建并切换分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> branch bran-name</span><br><span class="line"><span class="variable">$git</span> checkout bran-name</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line"><span class="variable">$git</span> checkout -b bran-name</span><br></pre></td></tr></table></figure><blockquote><p>切换分支之前，保持干净的状态(提交还未被提交的修改)。也可以保存进度(stashing)和修补提交(commit amending)</p></blockquote></li><li><p>分支的合并</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line"><span class="variable">$git</span> merge bran-name</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>分支的删除</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> branch -d bran-name</span><br></pre></td></tr></table></figure></li></ul><ul><li>遇到冲突时的分支合并</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双系统Windows时间不同步问题</title>
      <link href="/2018/09/07/%E5%8F%8C%E7%B3%BB%E7%BB%9FWindows%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2018/09/07/%E5%8F%8C%E7%B3%BB%E7%BB%9FWindows%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="双系统Windows时间不同步问题"><a href="#双系统Windows时间不同步问题" class="headerlink" title="双系统Windows时间不同步问题"></a>双系统Windows时间不同步问题</h1><p>在电脑上安装使用双系统时，Windows常常会出现时间不同步的为题。需要重新设置时间才能解决。今天偶然在<a href="https://juejin.im/entry/5adbd1ad51882567137dc6de" target="_blank" rel="noopener">掘金</a>上看到这个问题，并解决了我电脑的问题，因此记录下来备忘。</p><ol><li>Win + R 运行regedit打开注册表编辑器</li></ol><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fv1a2hldkdj30nu0ghwf4.jpg" alt="regedit"></p><ol start="2"><li>在左边的导航菜单，找到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation</code>路径，然后再右边的窗口点击空白位置，选择<code>New &gt;&gt; DWORD(32 bit) Value</code></li></ol><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fv1a7ij71dj30a505nt8j.jpg" alt="value"></p><ol start="3"><li>将这个条目重命名为<code>RealTimeIsUniversal</code>，并设置为<code>1</code></li></ol><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fv1a9e4xo4j30az087q2t.jpg" alt="1"></p><ol start="4"><li>之后重启就不会出现时间不同步的问题了。</li></ol><p>参考：    </p><ul><li><p><a href="https://juejin.im/entry/5adbd1ad51882567137dc6de" target="_blank" rel="noopener">https://juejin.im/entry/5adbd1ad51882567137dc6de</a></p></li><li><p><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.theitstuff.com%2Fhow-to-sync-time-between-linux-and-windows-dual-boot-2" target="_blank" rel="noopener">原文</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-reset相关用法</title>
      <link href="/2018/09/06/git-reset%E7%9B%B8%E5%85%B3%E7%94%A8%E6%B3%95/"/>
      <url>/2018/09/06/git-reset%E7%9B%B8%E5%85%B3%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="git-reset相关用法"><a href="#git-reset相关用法" class="headerlink" title="git reset相关用法"></a>git reset相关用法</h1><ul><li>HEAD 当前版本的别名，即当前分支最近的一个提交。</li><li>Index 指下一次提交所包含的文件的集合。</li><li>Working Copy 正在工作的文件集。</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>使用checkout切换分支，HEAD指向当前分支的最近一次commit，当前HEAD、Index和Working Copy中的文件集合是相同的。</li><li>对文件执行修改，Git发现文件发生改变，此时Working Copy发生改变。</li><li>执行git add，Git将改变的文件集合记录到Index，此时Index的状态与Working Copy的状态相同。</li><li>最后执行git commit，Git创建了新的commit，此时HEAD指向新的commit，HEAD、Index和Working Copy一致。</li></ol><h2 id="Rest"><a href="#Rest" class="headerlink" title="Rest"></a>Rest</h2><p>git reset本质是重置HEAD(当前分支的版本顶端)到另一个commit。假设有有个分支如下：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fv09uav0axj306g0cma9w.jpg" alt="branch"></p><p>此时执行<code>git reset HEAD</code>任何事情都不会发生，GIT会重置当前分支到HEAD，而这个正是它现在所在的位置。</p><p>若执行<code>git reset HEAD~1</code>，HEAD将指向上一个commit。若执行<code>git reset HEAD~2</code>则HEAD将指向后两个commit如图：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fv09xjd2kvj305s0d1dfo.jpg" alt="commit"></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h3><p>–soft参数告诉Git重置HEAD到另外一个commit，但此时Index和working copy不会有任何变化。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fv0a2pw4rsj30g103fdfr.jpg" alt="soft"></p><h3 id="–hard"><a href="#–hard" class="headerlink" title="–hard"></a>–hard</h3><p>–hard参数将会重置HEAD返回到另一个commit，且index和working copy也将重置。数据因此可能会丢失，若丢失只能只用git reflog。</p><p>如果我们希望彻底丢掉本地修改但是又不希望更改branch所指向的commit，则执行git reset –hard = git reset –hard HEAD。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fv0a7whniuj30ly04emwz.jpg" alt="hard"></p><h3 id="–mixed-default"><a href="#–mixed-default" class="headerlink" title="–mixed(default)"></a>–mixed(default)</h3><p>–mixed是reset的默认参数，它将重置HEAD到另一个commit，并且重置index保持和HEAD相同，但work copy不会改变。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fv0a7goyh6j30g103a3yf.jpg" alt="mixed"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>–soft 、–mixed以及–hard是三个恢复等级。使用–soft就仅仅将头指针恢复，已经add的缓存以及工作空间的所有东西都不变。如果使用–mixed，就将头恢复掉，已经add的缓存也会丢失掉，工作空间的代码什么的是不变的。如果使用–hard，那么一切就全都恢复了，头变，aad的缓存消失，代码什么的也恢复到以前状态。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>参考：<a href="https://www.cnblogs.com/kidsitcn/p/4513297.html" target="_blank" rel="noopener">https://www.cnblogs.com/kidsitcn/p/4513297.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python操作列表、元祖、字典、集合</title>
      <link href="/2018/09/05/Python%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8%E5%85%83%E7%A5%96%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88/"/>
      <url>/2018/09/05/Python%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8%E5%85%83%E7%A5%96%E5%AD%97%E5%85%B8%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li><p><strong>列表</strong>：由一系列按特定顺序排列的元素组成。可用list()函数或方括号创建，元素间用逗号分隔。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="string">'name'</span>,<span class="string">'age'</span>]</span><br><span class="line">list1 = list((<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>访问元素</strong>：列表是有序集合，通过元素的位置或索引即可访问列表的任何元素</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">computer = [<span class="string">'dell'</span>,<span class="string">'asus'</span>,<span class="string">'apple'</span>]</span><br><span class="line">print(computer[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h2><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phone = [<span class="string">'xiaomi'</span>,<span class="string">'oneplus'</span>,<span class="string">'apple'</span>]</span><br><span class="line">phone[<span class="number">0</span>] = <span class="string">'vivo'</span></span><br></pre></td></tr></table></figure><h3 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h3><ol><li><p>在列表末尾添加元素</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phone = [<span class="string">'xiaomi'</span>,<span class="string">'oneplus'</span>,<span class="string">'apple'</span>]</span><br><span class="line">phone.append(<span class="string">'oppo'</span>)</span><br></pre></td></tr></table></figure></li><li><p>在列表中插入元素</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phone = [<span class="string">'xiaomi'</span>,<span class="string">'oneplus'</span>,<span class="string">'apple'</span>]</span><br><span class="line">phone.insert(<span class="number">1</span>,<span class="string">'SAMSUNG'</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><ol><li><p>使用del语句删除元素</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phone = [<span class="string">'xiaomi'</span>,<span class="string">'oneplus'</span>,<span class="string">'apple'</span>]</span><br><span class="line"><span class="keyword">del</span> phone[<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用pop()方法删除元素</p><p> pop()方法可删除列表末尾的元素，并且可以接着使用它。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">phone = [<span class="string">'xiaomi'</span>,<span class="string">'oneplus'</span>,<span class="string">'apple'</span>]</span><br><span class="line">new_phone = phone.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在括号中指定要删除的元素的索引可删除任何位置的元素</span></span><br><span class="line">my_phone = phone.pop(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>根据值删除元素</p><p> 使用remove方法可以删除元素的值，并且也可以接着使用它的值。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">phone = [<span class="string">'xiaomi'</span>,<span class="string">'oneplus'</span>,<span class="string">'apple'</span>]</span><br><span class="line">your_phone = phone.remove(<span class="string">'oneplus'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>方法remove()只删除第一个指定的值。多国药删除的值可能多次在列表中出现多次，就需要用循环来判断是否删除了所有的值。</p></blockquote></li></ol><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><h3 id="使用sort-方法对列表进行永久性排序"><a href="#使用sort-方法对列表进行永久性排序" class="headerlink" title="使用sort()方法对列表进行永久性排序"></a>使用sort()方法对列表进行永久性排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>,<span class="string">'audi'</span>,<span class="string">'toyota'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="comment"># 按与字母顺序想法的顺序排列列表元素</span></span><br><span class="line">cars.sort(reverse=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="使用sorted-对列表进行临时排序"><a href="#使用sorted-对列表进行临时排序" class="headerlink" title="使用sorted()对列表进行临时排序"></a>使用sorted()对列表进行临时排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>,<span class="string">'audi'</span>,<span class="string">'toyota'</span>,<span class="string">'BMW'</span>]</span><br><span class="line">sorted(cars)</span><br><span class="line">[<span class="string">'BMW'</span>, <span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>]</span><br></pre></td></tr></table></figure><h3 id="倒着打印列表"><a href="#倒着打印列表" class="headerlink" title="倒着打印列表"></a>倒着打印列表</h3><p>使用reverse()方法可以反转列表元素的排列顺序，reverse()方法永久性地修改列表元素的排列顺序，但可以恢复原来的排列顺序，只需再次使用reverse()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'BMW'</span>, <span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>]</span><br><span class="line">cars.reverse()</span><br></pre></td></tr></table></figure><h3 id="确定列表的长度"><a href="#确定列表的长度" class="headerlink" title="确定列表的长度"></a>确定列表的长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'BMW'</span>, <span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>]</span><br><span class="line">len(cars)</span><br></pre></td></tr></table></figure><h3 id="遍历整个列表"><a href="#遍历整个列表" class="headerlink" title="遍历整个列表"></a>遍历整个列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'BMW'</span>, <span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line">    print(car)</span><br></pre></td></tr></table></figure><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    print(value)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line">numbers = list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定步长</span></span><br><span class="line">even_numbers = list(range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 找出列表的最大值、最小值和总和</span></span><br><span class="line">min(numbers)</span><br><span class="line">max(numbers)</span><br><span class="line">sum(numbers)</span><br></pre></td></tr></table></figure><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure><h3 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h3><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'BMW'</span>, <span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'toyota'</span>]</span><br><span class="line">print(cars[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">[<span class="string">'BMW'</span>, <span class="string">'audi'</span>]</span><br><span class="line">print(cars[:<span class="number">3</span>])</span><br><span class="line">print(cars[<span class="number">2</span>:])</span><br><span class="line">print(cars[<span class="number">-2</span>:])</span><br></pre></td></tr></table></figure><h4 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h4><p>复制列表可以创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引([:])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>,<span class="string">'falafel'</span>,<span class="string">'corrot cake'</span>]</span><br><span class="line">your_foods = my_foods[:]</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td>list.append()</td><td>追加元素</td></tr><tr><td>list.count(x)</td><td>计算列表中参数x出现的次数</td></tr><tr><td>list.extend(L)</td><td>向列表中追加另一个列表L</td></tr><tr><td>list.index(x)</td><td>获得参数x在列表中的位置</td></tr><tr><td>list.insert()</td><td>向列表中插入数据</td></tr><tr><td>list.pop()</td><td>删除列表中的成员（通过下标删除）</td></tr><tr><td>list.remove()</td><td>删除列表中的成员（直接删除）</td></tr><tr><td>list.reverse()</td><td>将列表中成员的顺序颠倒</td></tr><tr><td>list.sort</td><td>将列表中成员排序</td></tr></tbody></table><h1 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h1><p>不可变的列表被称为元祖。使用圆括号来标识。使用索引来访问元素。可以用tuple()函数或者括号创建，元素间用逗号分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>，<span class="number">50</span>)</span><br><span class="line">tuple1 = tuple([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(dimensions[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 遍历元祖中的所有值</span></span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    print(demension)</span><br></pre></td></tr></table></figure><p>虽然不能修改元祖的元素，但可以给存储元祖的变量赋值，重新定义整个元祖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">100</span>，<span class="number">200</span>)</span><br><span class="line">print(dimensions[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>元组由于它的不可变性（第五点特点），相比列表的操作少了很多，只保留了index()，count()函数，用法同列表。当然也可以用内置函数来对他进行操作，这些内置函数对于列表也适用。</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td>cmp(tuple1, tuple2)</td><td>比较两个元组元素。</td></tr><tr><td>len(tuple)</td><td>计算元组元素个数。</td></tr><tr><td>max(tuple)</td><td>返回元组中元素最大值。</td></tr><tr><td>min(tuple)</td><td>返回元组中元素最小值。</td></tr><tr><td>tuple(seq)</td><td>将列表转换为元组。</td></tr><tr><td>list(seq)</td><td>将元组转换为列表。</td></tr></tbody></table><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><p><strong>字典</strong>是一系列键——值对。每个键都与一个值相关联，可以使用键来访问与之相关的值。可将任何Python对象用作字典中的值。可以用dict()或花括号创建，元素之间用逗号’,‘’分隔，键与值之间用冒号”:”隔开。键必须是唯一的，但值则不必。值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>:<span class="string">'green'</span>,<span class="string">'point'</span>:<span class="number">5</span>&#125;</span><br><span class="line">dict1 = dict([(<span class="string">'name'</span>,<span class="string">'entercoder'</span>),(<span class="string">'age'</span>,<span class="number">10</span>)])</span><br></pre></td></tr></table></figure><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><p>获取与键相关的值，指定字典名和放在方括号内的键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien = &#123;<span class="string">'color'</span>:<span class="string">'green'</span>,<span class="string">'point'</span>:<span class="number">5</span>&#125;</span><br><span class="line">alien[<span class="string">'color'</span>]</span><br><span class="line">alien[<span class="string">'point'</span>]</span><br></pre></td></tr></table></figure><h3 id="添加键——值对"><a href="#添加键——值对" class="headerlink" title="添加键——值对"></a>添加键——值对</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien[<span class="string">'x_position'</span>] = <span class="number">0</span></span><br><span class="line">alien[<span class="string">'y_position'</span>] = <span class="number">25</span></span><br></pre></td></tr></table></figure><h3 id="创建一个空字典"><a href="#创建一个空字典" class="headerlink" title="创建一个空字典"></a>创建一个空字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0[<span class="string">'color'</span>] = <span class="string">'green'</span></span><br><span class="line">alien_0[<span class="string">'points'</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien_0[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br></pre></td></tr></table></figure><h3 id="删除键——值对"><a href="#删除键——值对" class="headerlink" title="删除键——值对"></a>删除键——值对</h3><p>使用del语句将相应的键——值对彻底删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> alien_0[<span class="string">'points'</span>]</span><br></pre></td></tr></table></figure><h3 id="由类似对象组成的字典"><a href="#由类似对象组成的字典" class="headerlink" title="由类似对象组成的字典"></a>由类似对象组成的字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">favorite_language = &#123;</span><br><span class="line">    <span class="string">'jen'</span>:<span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>:<span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>:<span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>:<span class="string">'python'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">favorite_language = &#123;</span><br><span class="line">    <span class="string">'jen'</span>:<span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>:<span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>:<span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>:<span class="string">'python'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> favorite_language.items():</span><br><span class="line">    print(<span class="string">"\nname: "</span> + key.title())</span><br><span class="line">    print(<span class="string">"\nlanguage: "</span> + value.title())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典中的所有键</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_language.keys():</span><br><span class="line">    print(name.title())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典中的所有值</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> favorite_language.values():</span><br><span class="line">    print(value.title())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按顺序遍历字典中的所有键</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> sorted(favorite_language.keys()):</span><br><span class="line">    print(name.title())</span><br></pre></td></tr></table></figure><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td>adict.keys()</td><td>返回一个包含字典所有KEY的列表；</td></tr><tr><td>adict.values()</td><td>返回一个包含字典所有value的列表；</td></tr><tr><td>adict.items()</td><td>返回一个包含所有（键，值）元祖的列表；</td></tr><tr><td>adict.clear()</td><td>删除字典中的所有项或元素；</td></tr><tr><td>adict.copy()</td><td>返回一个字典浅拷贝的副本；</td></tr><tr><td>adict.fromkeys(seq, val=None)</td><td>创建并返回一个新字典，以seq中的元素做该字典的键，val做该字典中所有键对应的初始值（默认为None）；</td></tr><tr><td>adict.get(key, default = None)</td><td>返回字典中key对应的值，若key不存在字典中，则返回default的值（default默认为None）；</td></tr><tr><td>adict.has_key(key)</td><td>如果key在字典中，返回True，否则返回False。 现在用 in 、 not in；</td></tr><tr><td>adict.iteritems() adict.iterkeys() adict.itervalues()</td><td>与它们对应的非迭代方法一样，不同的是它们返回一个迭代子，而不是一个列表；</td></tr><tr><td>adict.pop(key[,default])</td><td>和get方法相似。如果字典中存在key，删除并返回key对应的vuale；如果key不存在，且没有给出default的值，则引发keyerror异常；</td></tr><tr><td>adict.setdefault(key, default=None)</td><td>和set()方法相似，但如果字典中不存在Key键，由 adict[key] = default 为它赋值；</td></tr><tr><td>adict.update(bdict)</td><td>将字典bdict的键值对添加到字典adict中。</td></tr></tbody></table><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>1.可以用set()函数或者方括号{}创建，元素之间用逗号”,”分隔。<br>2.与字典相比少了键<br>3.不可索引，不可切片<br>4.不可以有重复元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set1 = set(<span class="string">'entercoder'</span>)</span><br><span class="line">set2 = &#123;<span class="string">'c'</span>,<span class="string">'java'</span>,<span class="string">'python'</span>,<span class="string">'java'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td>s.issubset(t)，s &lt;= t</td><td>测试是否 s 中的每一个元素都在 t 中</td></tr><tr><td>s.issuperset(t)，s &gt;= t</td><td>测试是否 t 中的每一个元素都在 s 中</td></tr><tr><td>s.union(t)，s \</td><td>t</td><td>返回一个新的 set 包含 s 和 t 中的每一个元素</td></tr><tr><td>s.intersection(t)，s &amp; t</td><td>返回一个新的 set 包含 s 和 t 中的公共元素</td></tr><tr><td>s.difference(t),s - t</td><td>返回一个新的 set 包含 s 中有但是 t 中没有的元素</td></tr><tr><td>s.symmetric_difference(t),s ^ t</td><td>返回一个新的 set 包含 s 和 t 中不重复的元素</td></tr><tr><td>s.copy()</td><td>返回 set “s”的一个浅复制</td></tr></tbody></table><h1 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>列表主要用于对象长度不可知的情况下，而元组用于对象长度已知的情况下，而且元组元素一旦创建变就不可修改。字典主要应用于需要对元素进行标记的对象，这样在使用的时候便不必记住元素列表中或者元组中的位置，只需要利用键来进行访问对象中相应的值。集合中的元素不可重复的特点使它被拿来去重。</p><blockquote><p>在海量数据中查找元素时，最好将数据创建为字典，或者是集合。这是由于字典和集合背后的查找原理是散列（哈希）表。由于散列表在查找元素时的时间复杂度基本是O(1),这使查找时间很短。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS终端美化及设置</title>
      <link href="/2018/09/02/macOS%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96%E5%8F%8A%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/09/02/macOS%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96%E5%8F%8A%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="macOS美化及设置"><a href="#macOS美化及设置" class="headerlink" title="macOS美化及设置"></a>macOS美化及设置</h1><blockquote><p>macOS美化及设置教程</p></blockquote><a id="more"></a><h2 id="iTerm"><a href="#iTerm" class="headerlink" title="iTerm"></a>iTerm</h2><ul><li><p>安装：<a href="https://iterm2.com/downloads/stable/latest" target="_blank" rel="noopener">下载地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brew</span> cask install iterm</span><br></pre></td></tr></table></figure></li></ul><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><ul><li><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># via curl</span></span><br><span class="line">sh -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># via wget</span></span><br><span class="line">sh -c <span class="string">"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span></span><br></pre></td></tr></table></figure></li><li><p>oh-my-zsh主题及插件插件</p><ul><li><p>zsh-autosuggestion</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到./zshrc中</span></span><br><span class="line">plugins=(zsh-autosuggestions)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li><li><p>zsh-syntax-highlighting</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到./zshrc中</span></span><br><span class="line">plugins=(zsh-syntax-highlighting)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li><li><p>autojump</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="variable">$brew</span> install autojump</span><br><span class="line"></span><br><span class="line"><span class="comment">#在.zshrc中添加</span></span><br><span class="line">plugins=(autojump)</span><br><span class="line"></span><br><span class="line">[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh</span><br><span class="line"></span><br><span class="line"><span class="variable">$source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ul></li><li><p>brew安装，更换及替换Homebrew默认源</p><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>安装brew cask</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brew</span> install cask</span><br></pre></td></tr></table></figure></li><li><p>替换默认源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line"><span class="variable">$git</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="variable">$cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line"><span class="variable">$git</span> remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure></li><li><p>替换Homebrew-bottles二进制预编译包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="variable">$source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>替换brew cask源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure></li><li><p>重置为默认源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置brew.git:</span></span><br><span class="line"><span class="variable">$cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line"><span class="variable">$git</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置homebrew-core.git:</span></span><br><span class="line"><span class="variable">$cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line"><span class="variable">$git</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew-bottles二进制只需注释或删除.bash_profile中的代码即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置brew cask源</span></span><br><span class="line"><span class="variable">$cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line"><span class="variable">$git</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-cask</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="App允许任何来源下载安装"><a href="#App允许任何来源下载安装" class="headerlink" title="App允许任何来源下载安装"></a>App允许任何来源下载安装</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> spctl --master-disable</span><br></pre></td></tr></table></figure><h3 id="Dock设置"><a href="#Dock设置" class="headerlink" title="Dock设置"></a>Dock设置</h3><ul><li><p>设置启动台每行显示数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$defaults</span> write com.apple.dock springboard-columns -int 8 <span class="comment"># 每行8个</span></span><br><span class="line"><span class="variable">$defaults</span> write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock <span class="comment"># 重启dock</span></span><br></pre></td></tr></table></figure></li><li><p>显示隐藏文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool <span class="literal">true</span> ; killall Finder</span><br></pre></td></tr></table></figure></li><li><p>隐藏隐藏文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool <span class="literal">false</span> ; killall Finder</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改终端欢迎画面"><a href="#修改终端欢迎画面" class="headerlink" title="修改终端欢迎画面"></a>修改终端欢迎画面</h3><ol><li><code>cd /etc</code></li><li><code>sudo pico motd</code></li><li>[神奇的网站]</li><li>control + x，然后输入y保存</li></ol><h3 id="开启终端显示信息"><a href="#开启终端显示信息" class="headerlink" title="开启终端显示信息"></a>开启终端显示信息</h3><ul><li><p>效果如下所示</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1ftoi367zyvj30qm0aaacz.jpg" alt="img"></p></li><li><p>相关链接</p><ul><li>GitHub地址：<a href="https://github.com/athlonreg/archey-osx" target="_blank" rel="noopener">https://github.com/athlonreg/archey-osx</a></li><li>官网地址：<a href="https://athlonreg.github.io/archey-osx/" target="_blank" rel="noopener">https://athlonreg.github.io/archey-osx/</a></li></ul></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> &amp;&amp; git <span class="built_in">clone</span> https://github.com/athlonreg/archey-osx <span class="comment">#若无法下载可直接到github下载zip文件</span></span><br><span class="line"><span class="variable">$sudo</span> mv archey-osx/ /usr/<span class="built_in">local</span>/ </span><br><span class="line"><span class="variable">$sudo</span> ln -s /usr/<span class="built_in">local</span>/archey-osx/bin/archey /usr/<span class="built_in">local</span>/bin/archey <span class="comment">#中文版</span></span><br><span class="line"><span class="variable">$sudo</span> ln -s /usr/<span class="built_in">local</span>/archey-osx/bin/archey-en /usr/<span class="built_in">local</span>/bin/archey-en <span class="comment">#英文版</span></span><br></pre></td></tr></table></figure></li><li><p>设置终端自启动</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$echo</span> archey &gt;&gt; ./.bashrc <span class="comment">#中文版</span></span><br><span class="line"><span class="variable">$echo</span> archey-en &gt;&gt; ./.bashrc <span class="comment">#英文版</span></span><br><span class="line"><span class="variable">$echo</span> <span class="string">"[[ -s ~/.bashrc ]] &amp;&amp; source ~/.bashrc"</span> &gt;&gt; ./.bash_profile </span><br><span class="line"><span class="variable">$source</span> ./.bashrc &amp;&amp; <span class="built_in">source</span> ./.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>oh-my-zsh用户</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$echo</span> archey &gt;&gt; ./.zshrc <span class="comment">#中文版</span></span><br><span class="line"><span class="variable">$echo</span> archey-en &gt;&gt; ./.zshrc <span class="comment">#英文版</span></span><br><span class="line"><span class="variable">$source</span> ./.zshrc</span><br></pre></td></tr></table></figure></li><li><p>更新</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/archey-osx/ &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span></span><br></pre></td></tr></table></figure></li><li><p>修改</p><p>  因为我的电脑显示显卡信息太长了，因此替换为用户名，只需修改archey文件中的User即可。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User=$(<span class="built_in">echo</span> $(whoami) | sed <span class="string">"s/-/ /g"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="取消自动大写字词的首字母"><a href="#取消自动大写字词的首字母" class="headerlink" title="取消自动大写字词的首字母"></a>取消自动大写字词的首字母</h3><p>设置-键盘-文本-取消自动大写字词的首字母</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Setting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎样在一年内获得一份开发者的工作</title>
      <link href="/2018/08/29/%E6%80%8E%E6%A0%B7%E5%9C%A8%E4%B8%80%E5%B9%B4%E5%86%85%E8%8E%B7%E5%BE%97%E4%B8%80%E4%BB%BD%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%B7%A5%E4%BD%9C/"/>
      <url>/2018/08/29/%E6%80%8E%E6%A0%B7%E5%9C%A8%E4%B8%80%E5%B9%B4%E5%86%85%E8%8E%B7%E5%BE%97%E4%B8%80%E4%BB%BD%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="怎样在一年甚至更少的时间内获得一份开发者的工作"><a href="#怎样在一年甚至更少的时间内获得一份开发者的工作" class="headerlink" title="怎样在一年甚至更少的时间内获得一份开发者的工作"></a>怎样在一年甚至更少的时间内获得一份开发者的工作</h1><blockquote><p>加快学习速度,对于决定自学代码的人来说，最难的部分是什么？他们通常不知道学什么的事实 - 选择什么样的编程语言，如何对待学习，资源，这是最好的时间效率上。</p></blockquote><a id="more"></a><p>这一切都始于谷歌搜索这些主题，这不可避免地导致人们使用教授人们编码的众多资源之一。这些资源的格式差异很大，常识告诉我们应该尝试一堆不同的资源，并选择最适合我们学习方式的资源。一些人的教程，其他人的屏幕录像，另一组的文章等。看起来很合乎逻辑，不是吗？</p><p>嗯……不。今天我想说服你，其中一种学习形式可以让你到达你想要比其他任何一个更快的地方。没有进一步的延迟，让我告诉你它是什么以及为什么你应该把所有的努力集中在它上面。</p><p>建立项目<br>我打赌你看到那个人来了。</p><p>首先，让我解决一些你的反对意见。我并不是说你应该放弃所有其他类型的学习资源。</p><p>所有的教程和截屏都有它们在阳光下的位置，我将在文章中进一步阐述。例如，有时引入新技术或框架的最有效方法可能是阅读文章或阅读教程。</p><p>问题是我们倾向于（或者至少我）坚持使我们处于舒适区的资源，即使是时候做我们自己的事情了。它太方便了，准备好了。它总是让我们感觉很棒，因为嘿，我们在这里，学习！对吗？谁能说我们在浪费时间？他们怎么敢？我们正在填补我们的知识空白！</p><p>这些资源似乎是最有效的学习方式，这很危险。作为人类，我们可以证明几乎任何使我们处于舒适区域的事情。我已经在这种幻觉中生活了很长一段时间。</p><p>敲，敲，新。<br>创建项目……这个想法有什么新意？没有什么，在内心深处，我们都知道，这将最好地利用我们的时间和精力，我们将更快地实现我们的目标。那我们为什么不这样做呢？阻力。</p><p>我在我以前的文章（阅读它，如果你正在努力或者如果你觉得卡住了），所以让我解释一下我为什么这么坚定的关于这个话题，让我说服你改变你的焦点（除非它是谈到了抵抗已经在那里建设。</p><p>像新的矩阵，谁是由于红色药丸和蓝色药丸的选择，我们可以回到我们的幻想，以为这都拿着我们的手无时无刻的资源是最好的学习方法，或者我们可以把红当我们离开我们的舒适区时，我们只会向前迈进并成长。 （如果你没有看过Matrix，你应该这样做。）</p><p>以下是我对如何处理这些项目的一些想法，这可能是令人生畏的开始，以及我在此过程中提到的一些技巧。</p><p>你可能需要不到一年的时间（什么？）<br>这背后的原因是基于我的工作人员的经验，与我们的免费组代码多伦多营的成员说话，阅读有关会员遍布世界各地的旅程。</p><p>我发现，大多数情况下，人们甚至可以在完成Free Code Camp的前端开发认证之前找到工作。他们构建所需的项目，并开始申请。很快，他们得到了代码换钱的提议。</p><p>如果您阅读Free Code Camp的subreddit，您会发现有很多类似的故事。</p><p>请注意，就业市场因城市而异。例如，在多伦多，有大量的前端开发人员职位空缺。</p><p>免费代码营的官方立场是，您应该完成所有2,080小时的课程。如果你这样做，你可能会成为一个更强大的候选人（并且在更具挑战性的职位上获得更高的薪水）。</p><p>我们来做一些数学：</p><p>免费代码营的前端Web开发证书大约需要478个小时。有些人会更快地完成它，但它会根据人员的准备程度而有所不同，所以让我们保持478作为我们的基础。</p><p>什么不到一年？为了论证，我们将工作9个月。 9个月* 30天给我们270天。</p><p>478小时/ 270天每天约1.8小时。这意味着我们可以每天少于2小时，在9个月内我们可以做好工作准备。</p><p>我知道，对于某些人来说，时间表不允许每天有两个小时，但对大多数人来说，可以找到它们。对于其他人来说，可能需要更长的时间，但总会有周末和其他方式来寻找（或制造）时间。</p><p>如果您正在寻找有关如何找到编码时间的建议，请不要犹豫，在Twitter上与我联系，我将很乐意为您提供帮助。</p><p>我花了比这更长的时间 - 大约一年零两个月。本文分析了为什么它花了我更长的时间。我在文章中犯了我所说的所有错误。当我给你建议时，请记住我也在给自己这个建议。我们在同一条船上。</p><p>在我完成免费代码阵营前端课程之前，我被录用了，但我知道这将有助于我成长为一名开发人员，以恢复并完成这些项目。在这里，在那里的文章我已经放在Codepen链接到我的个人资料（我有点惭愧呢！），当在你看看吧，你会看到，我还有很长的路要走。所以我说 - 让我们一起做吧！我的目标是完成所有前端项目，并将其作为我在不久的将来学习的与代码相关的任何事情的优先事项。</p><p>这篇文章适合我和你 - 让我们克服不适并优化我们的学习，以便我们能够更快地到达我们想要的地方！</p><p>确保你已经涵盖了你的基础知识<br>我坚信，在你的学习的开始，你绝对应该使用教程和在线互动资源，熟悉HTML，CSS，JavaScript的语法，要学会编程方式思考，并熟悉基本，基础的东西。</p><p>试图在没有这些知识的情况下立即建立项目将太令人沮丧。确保你不要在这个阶段花太多时间，因为它很容易做到。</p><p>当我学习HTML / CSS / JS时，我会去学习来自不同资源的类似主题，认为这会填补我所知的所有空白。它确实填补了一些空白，但在某些时候，我意识到我正在使用这些资源作为拐杖，以防止我转向新的，更令人兴奋的，但有点可怕的东西。不要陷入无休止的循环（可能是一段时间循环？;）审查和重新审视您已经知道的信息。</p><p>不要屈服于合理化<br>当您开始创建项目时，您将不可避免地陷入困境。如果坚持下去，过了一会儿就会克服障碍，但不久之后你会再次击中障碍物。这不是一个选择，它发生在每个人身上。</p><p>在这样的时刻，我们身体的每一个部分是尖叫 - 让我们做别的事情，让我们从这里开始运行，这是使我感到不舒服，我可以解决这个后来当我知道更多，我会回来的，等等。所以我们暂停一下。</p><p>但是，我们担心我们的暂停会延长，我们会继续编写越来越少的代码并放弃它。为了不让这种情况发生，但仍然保持我们的“决定”不在项目上工作，我们决定现在，我们将通过一些教程或在线课程。</p><p>从创造中理解自己很容易。没有人会告诉你，你不会以任何方式学习编码或批评你。你是唯一能够识别真实情况的人（恐惧，厌恶风险，抵抗），并决定坚持从事项目工作。</p><p>相信我，如果你敲打它们，所有的墙壁都会崩溃。想想那些在当天学习外语的人，他们用本地语言和目标语言制作同一本书的两本。他们是怎么做到的？他们只是坚持了足够长的时间。</p><p>不要从你的BIG IDEA开始<br>令人惊讶的是你已经拥有它，但是在这里有一些其他的考虑可能会改变你的想法。我提出的原因是点埃斯塔那我保留这个听到了很多来自人：“我想建立一个在线应用程序，让人们为他们的宠物创建帐户，上传照片，轨道位置和许多其他的事情。我最近开始学习的代码，我在建设出我的想法的过程是了。“这让我走”哇喔哇。“</p><p>我可以很容易地看到的情况。在这种情况，一个人被过量使用的想法，他们开始很热情，并慢慢建立出来，但随着时间的推移，他们的学习跟不上随着项目的需求，而且感觉拖延，始终在他们的思想背后，未完成。</p><p>在这种情况下可能发生的最糟糕的情况是，该人将放弃该项目，并放弃编码。</p><p>我建议先从简单的项目，并且完成他们每个人，你会得到一种成就感，并更好地了解如何构建一个更大的项目。</p><p>想象一下，你是一名作家，并且对于你生活中的一本重要书籍有了一个想法，并且你已经开始立刻写作了。你可能会不得不重新改写整个事情的3-4倍，以得到它的质量的一个体面的水平，而你可以用小作文的故事开始，得到的反馈，可以提高写作和接近你的白鲸当你真正准备好了。</p><p>我知道，对于某些人来说，时间表不允许每天有两个小时，但对大多数人来说，可以找到它们。对于其他人来说，可能需要更长的时间，但总会有周末和其他方式来寻找（或制造）时间。</p><p>如果您正在寻找有关如何找到编码时间的建议，请不要犹豫，在Twitter上与我联系，我将很乐意为您提供帮助。</p><p>我花了比这更长的时间 - 大约一年零两个月。本文分析了为什么它花了我更长的时间。我在文章中犯了我所说的所有错误。当我给你建议时，请记住我也在给自己这个建议。我们在同一条船上。</p><p>在我完成免费代码阵营前端课程之前，我被录用了，但我知道这将有助于我成长为一名开发人员，以恢复并完成这些项目。在这里，在那里的文章我已经放在Codepen链接到我的个人资料（我有点惭愧呢！），当在你看看吧，你会看到，我还有很长的路要走。所以我说 - 让我们一起做吧！我的目标是完成所有前端项目，并将其作为我在不久的将来学习的与代码相关的任何事情的优先事项。</p><p>这篇文章适合我和你 - 让我们克服不适并优化我们的学习，以便我们能够更快地到达我们想要的地方！</p><p>确保你已经涵盖了你的基础知识<br>我坚信，在你的学习的开始，你绝对应该使用教程和在线互动资源，熟悉HTML，CSS，JavaScript的语法，要学会编程方式思考，并熟悉基本，基础的东西。</p><p>试图在没有这些知识的情况下立即建立项目将太令人沮丧。确保你不要在这个阶段花太多时间，因为它很容易做到。</p><p>当我学习HTML / CSS / JS时，我会去学习来自不同资源的类似主题，认为这会填补我所知的所有空白。它确实填补了一些空白，但在某些时候，我意识到我正在使用这些资源作为拐杖，以防止我转向新的，更令人兴奋的，但有点可怕的东西。不要陷入无休止的循环（可能是一段时间循环？;）审查和重新审视您已经知道的信息。</p><p>不要屈服于合理化<br>当您开始创建项目时，您将不可避免地陷入困境。如果坚持下去，过了一会儿就会克服障碍，但不久之后你会再次击中障碍物。这不是一个选择，它发生在每个人身上。</p><p>在这样的时刻，我们身体的每一个部分是尖叫 - 让我们做别的事情，让我们从这里开始运行，这是使我感到不舒服，我可以解决这个后来当我知道更多，我会回来的，等等。所以我们暂停一下。</p><p>但是，我们担心我们的暂停会延长，我们会继续编写越来越少的代码并放弃它。为了不让这种情况发生，但仍然保持我们的“决定”不在项目上工作，我们决定现在，我们将通过一些教程或在线课程。</p><p>从创造中理解自己很容易。没有人会告诉你，你不会以任何方式学习编码或批评你。你是唯一能够识别真实情况的人（恐惧，厌恶风险，抵抗），并决定坚持从事项目工作。</p><p>相信我，如果你敲打它们，所有的墙壁都会崩溃。想想那些在当天学习外语的人，他们用本地语言和目标语言制作同一本书的两本。他们是怎么做到的？他们只是坚持了足够长的时间。</p><p>不要从你的BIG IDEA开始<br>令人惊讶的是你已经拥有它，但是在这里有一些其他的考虑可能会改变你的想法。我提出的原因是点埃斯塔那我保留这个听到了很多来自人：“我想建立一个在线应用程序，让人们为他们的宠物创建帐户，上传照片，轨道位置和许多其他的事情。我最近开始学习的代码，我在建设出我的想法的过程是了。“这让我走”哇喔哇。“</p><p>我可以很容易地看到的情况。在这种情况，一个人被过量使用的想法，他们开始很热情，并慢慢建立出来，但随着时间的推移，他们的学习跟不上随着项目的需求，而且感觉拖延，始终在他们的思想背后，未完成。</p><p>在这种情况下可能发生的最糟糕的情况是，该人将放弃该项目，并放弃编码。</p><p>我建议先从简单的项目，并且完成他们每个人，你会得到一种成就感，并更好地了解如何构建一个更大的项目。</p><p>想象一下，你是一名作家，并且对于你生活中的一本重要书籍有了一个想法，并且你已经开始立刻写作了。你可能会不得不重新改写整个事情的3-4倍，以得到它的质量的一个体面的水平，而你可以用小作文的故事开始，得到的反馈，可以提高写作和接近你的白鲸当你真正准备好了。</p><p>哪里可以获得项目的想法<br>我所知道的最好的地方是Free Code Camp。这就是我被完全卡住后使用的东西。在编码之旅的开始，我会问我认识的开发人员（离线和在线）我的第一个项目应该是什么。当我说（惊喜）他们都说它应该是待办事项列表应用程序时，我不会欺骗你。老实说，如果我们继续制作这些待办事项列表应用程序，他们很快就会过度拥挤整个互联网。</p><p>免费代码营帮助我发现它是一系列激动人心的项目，排列在一系列日益增加的难度之中。另一个伟大的事情是，他们每个人是专门设计来教你一个特定的主题，例如：致敬页将你的HTML / CSS技能的测试，显示本地天气会教你如何搭配的API，建立一个JavaScript显然，计算器将提高你的JS技能等。</p><p>这是我所知道的最强大的起点。对于所有项目，您可以从社区获得反馈，以及了解其他人如何与他们接触（在您建立自己之后，而不是作弊！） “或者类似的东西。</p><p>首先构建项目<br>在开始构建之前，请写出您希望它执行的操作。编写特定的用户故事，例如：“用户可以在点击音频播放器按钮时播放音频”，“用户可以使用他们的电子邮件和密码以及仅使用Facebook登录”。</p><p>在开始编写代码之前，代码也必须具有基本结构。用伪代码写 - 基本上只是解释应用程序的一部分或项目代码将做什么。</p><p>基本示例：<br>//当用户打开页面时，抓住他们的位置<br>//使用位置向weather API站点发送请求<br>//接收数据<br>//在页面上显示度数<br>//更改页面的背景图像以反映当前天气</p><p>不要过度，不需要先写出你的代码在伪代码中做的每一件小事，但是你已经完成了主要部分。</p><p>我可以为您提供的是最好的例子：记得当你正在写在学校的文章，你必须构建他们首先，例如，在介绍关于这个问题，在支持你的意见的3个主要的点您的意见和结论。</p><p>这有助于您预测潜在问题并提高代码质量。</p><p>卡住是可以的<br>正如我之前提到的，可以卡住。这并不意味着我们是愚蠢的，它只是意味着我们还不知道。你将永远经历陷入困境的时刻：不仅在你学习的时候，还在工作中。</p><p>你越快感到不舒服就越好。它会让你的进步更快。编程本身就是创造性地解决问题如果没有难以解决的问题，那就意味着要安全地玩。停止在浅水中踩踏并潜水！</p><p>最重要的是，我将再次重复这一点，不要认为自己是愚蠢的。我知道在这些时刻很容易做到。我经常跟人通过免费代码阵营的HTML / CSS / JS部分容易去了，淘汰了一天30-40项，然后他们获得基本的和中间的算法和发现，他们只能做1每天5，所以他们得出结论，他们卡住了，他们是愚蠢的，不够好，或者不打算成为开发人员。</p><p>我也是这样，我觉得有些人，可能只是飞过这一部分，我对自己和我的进步感到不好。现在我知道的更好。</p><p>我在这里想说的是你应该学会：</p><p>在你的头脑中<br>你必须找到那种让你处于“容易的事情”和“仍然太难的事情”之间的项目难度。</p><p>我已经谈了很多关于为什么它的危险，保持审查和重新学习相同的材料（容易的事情），所以让我们来谈谈等式的另一侧的原因：困难的事情。</p><p>在接近困难时你的一般规则 - 你认为你可能无法做到的事情 - 应该是先尝试做。</p><p>从基本结构开始，尝试编写代码。如果你坚持同样的事情超过三天专注于它，放弃它一段时间，找到类似的 - 但更容易 - 事情要做。</p><p>我发现，在我这样做之后，我的潜意识仍然专注于解决我遇到的问题。当我做一些简单的事情时，我会得到这些关于如何解决它的随机想法 - 比如洗澡或洗碗 - 它突然袭击了我！</p><p>有时它的工作方式正是如此。有时它没有。但这里的主要建议是 - 总是挑选让你有点不舒服的东西。其他任何东西都不值得你花时间。</p><p>弹性<br>我想和你分享我最喜欢的一句话：</p><p>弹性 - 系统容忍干扰而不会坍塌，承受冲击，在必要时重建自身，并在可能的情况下自我改善的能力。<br>这是一个令人惊叹的品质，你作为一个程序员（以及一个希望在生活中取得成功的人）应该努力发展自己。准备好所有问题，所有挑战，对工作，设计，解决方案的所有批评以及在事情发生之前可能做的任何其他事情。</p><p>你害怕登台吗？注册以向当地社区的人员讲述Web开发的基础知识，或者报名参加会议/技术活动。</p><p>你对面试的方式感到失望 - 之后你没有被录用吗？您是否担心开始学习编码为时已晚？你对这个项目满意吗？</p><p>重新构建所有这些：您可以从经验中学到什么，以便下次更好？你怎么能把你的弱点变成优势？</p><p>例如，您可能会担心在X年的另一个职业道路上，您来编码太晚了。通过思考不同的视角和成熟度，在您的脑海中重新构建您将引入迫切需要更多成熟人（心理学）和更多不同背景的行业？通过决定进入它，您正在使科技行业变得更加富裕！</p><p>如果你听到内心的声音说“你不能画画”，那么无论如何都会画画，那声音就会沉默。 - 文森特梵高<br>我可以推荐的增加弹性的是这三本书：</p><p>塞内卡的“斯多葛派来信”<br>Ryan Holiday的“障碍是道路”<br>Steven Pressfield的“转向Pro”<br>设置每日有时限的目标<br>为了更快地进步，您应该每天处理您的项目。那部分只是常识。但是，您应该记住一些其他注意事项。</p><p>而不是设置结果目标（“我将完成此功能或今天的那部分”），设置一个明确的时间段，您将每天花费编码。不要每天超过30分钟或一小时。</p><p>我知道你想承诺每天3小时编码，并努力坚持下去。这有效，但只有这么长时间，直到生命发挥作用。有一个合理的时间限制 - 比如一天30分钟 - 你总会知道它可以完成，并且你总是有半小时的时间来完成编码，特别是如果你的主要目标是学习编码。你会发现自己在某些日子里编写的代码更多，这将是很棒的，因为你将完成当天的配额。</p><p>这个时间限制更多的是一种心理伎俩，因为我们的大脑连接的方式。还记得那个时候你有一个你需要开始的大项目，但你一直拖延和延迟，直到你有足够的时间在截止日期前完成它？你没事，但在此之前你一直都很紧张。然后加上这个事实，没有人让你成为开发人员的最后期限。那不是一个，而是你。</p><p>当我们设定结果目标时会发生什么，我们无法估计完成该功能或此功能所需的时间。而且通常情况下，我们最终没有完成我们今天要做的事情。这让我们觉得很糟糕，并且减少了第二天坐下来编码的愿望。</p><p>每天有一个有时间限制的目标，你每天都会取得进步。谁在乎你是否还没有完成今天要包装的特定功能？你取得了进步！你出现了。这就是让你领先的原因。</p><p>另外一个很大的好处就是11，你坐下来开始编码，想法和解决方案将开始流动，好像无处不在（类似于写一篇文章，嗯？:)。一旦你获得不切实际的期望和恐惧，就会更容易让自己坐下来编码。</p><p>复制代码浪费时间<br>在建立项目的过程中，在开始时 - 当你不知道从哪里开始，或者在你遇到问题的后期，你无法轻易解决 - 你会有强烈的外表欲望在项目的源代码中查看它是如何完成的。您将合理化它将使您立即理解代码，这意味着您已经学习并吸收它。远非它。</p><p>不要复制整个项目并自定义它们。不要采取部分代码。甚至不要拿它的碎片。</p><p>有了项目 - 首先不要看代码。使用您在Stack Overflow上查找的内容，查看，分析，理解，然后从头开始自己编写代码。你会发现即使在你看到整件事之后也很难自己写。</p><p>这是故意练习与常规练习（重复）的不同之处。 10,000法则的主要内容是这种做法必须是慎重的。以下模板和现成的解决方案不会带您到任何地方。如果你这样做，有人可能会写入Python脚本，无论你在做什么，都会取代你。注意看起来对你来说很难的事情。</p><p>另一个偏离主题的想法是，如果你挣扎于某一特定主题，尝试将其教给别人，或者只是按照你理解的方式向他们解释。结果将跟随您和学习者。</p><p>复制代码会让你有机会学习如何自己学习，而且这并不比通过教程更好。是的，解决方案就在那里。是的，如果你愿意，可以带它。但重点是什么？您是否试图以您构建项目的速度给某人留下深刻印象？或者您是否试图避免需要一些时间来解决的难题？</p><p>无论你的理由是什么 - 它只是回到我们试图摆脱的温暖舒适的另一种方式。反其道而行之跑到不舒服。</p><p>在您完成项目之后，唯一可以查看其他人的代码是可以的。然后看你想要的东西，分析它，并从中学习。</p><p>您解决的每一个难题都会让您实现跨越式发展。</p><p>不要分散你的努力<br>我对此非常内疚，这实际上是我为自己写的比其他人更多的建议（对不起！）。当你开始处理一个项目并碰到我提到的那些墙壁时，你很想把这个项目搁置起来并开始一个新项目。</p><p>一开始总觉得很棒，直到你用第二个项目撞墙。那么你手上就有两个未完成的项目。如果你愿意，这将一次又一次地重复。</p><p>这里的解决方案是一次限制自己2个项目。一旦你陷入困境，花点时间搞清楚。但如果此刻似乎无法破解，那就转移到你已经拥有的另一个项目。关键是不要开始第三个，因为它是一个滑坡。</p><p>你应该总是尝试做任何可能的事情，让自己留在学习的道路上。如果你感到厌倦，或者对你目前正在做的事情感到厌倦，请稍微休息一下，调整一下，然后再回过头来。不要完全放弃编码。</p><p>这就是为什么我总是建议有一个小小的摆动空间，这是一种不同学习资源（限于一周）的临时分心，或者，在这种情况下，两个项目而不是一个。</p><p>你的投资组合将是你得到的<br>招聘经理或工程师很难根据您在简历中写下的内容来评估您的技能。 “我知道JavaScript！ （并有4年的经验）。“”告诉我！“（我真的不得不停止使用Matrix参考）。</p><p>您构建和投放的所有项目都包含您的终极现场简历。任何人都可以看着它，并确信你确实知道自己在做什么。</p><p>不要害怕，这并不意味着你的代码应该是他们甚至考虑你的理想选择。这些项目将帮助任务的人员正确评估您的技能水平。</p><p>您不必经历高于您的级别的面试，因为一些人力资源人员在您的简历中找到了一组特定的关键字。您的雇主的期望将更符合您当前的能力。</p><p>在线工作的积极好处包括：</p><p>雇主看到你知道你在做什么<br>他们看到你一直在努力提高自己的技能<br>事实上，他们认为你是开发人员，并且你足够勇敢地将你的工作放在网上供所有人看。<br>根据我的个人经验，以及我在多伦多免费代码营组中的人们所听到的情况，找到编码工作的最重要因素是他们的项目组合。</p><p>你会在面试中做得更好<br>在采访中，您可能会获得一个真实的小型Web应用程序或要构建的页面，或者要解决问题。</p><p>通常有这些问题的人，正在招聘的人正在寻找如何通过解决问题来思考。他们并不总是想要产生理想的解决方案。有时他们会提出无法解决的问题只是为了看看你会做什么。您将通过项目获得大量此类练习：每个项目都将充满这些小问题。</p><p>至于你可以建立的现实生活中的东西，它可以而且会有所不同。这是我在面试当前的位置时必须要建立的。我知道代码不是很好，但这应该让你知道会发生什么。我在面试当天能够完成它的唯一原因是因为我以前有通过Free Code Camp构建天气应用程序和计算器之类的经验。</p><p>您将确定您的知识中的真正差距<br>这里是教程等对你起作用的地方。它们会让您感觉到，当您完成它们时，您已经涵盖了您需要了解的有关该主题的所有内容。但是当你尝试自己构建一些东西时，你会立刻陷入困境 - 通常是非常简单的东西。</p><p>那是为什么？因为在教程中提供给您的信息的部分是由使用他们自己对人们可能正在寻找的内容的理解创建它的人选择的。而且因为根本不可能涵盖教程中的所有内容。</p><p>真正看到你缺乏什么知识的唯一方法就是随时随地发现它的差距。你不知道你不知道什么。所以这个过程是：去，撞墙，解决问题，继续前进，等等。</p><p>每个新项目都会吓到你。怎么办？<br>我不了解你，但与我同在，它总是发生。我完成了一个项目，并对自己和我的技能感到满意。然后，当我读到下一个项目的用户故事时，我因恐惧而陷入瘫痪。</p><p>我发现自己在想 - 我怎么能开始呢？我该怎么办？我怎么能完成前一个？我什么都不知道！ <em>切换完全恐慌模式</em></p><p>当我遇到这种情况时，我会使用几种技术：</p><p>首先，看看你构建的所有以前的项目。他们也非常恐怖。不知何故，您找到了解决问题并构建这些项目的方法。</p><p>当你处于一个低自信时刻时，回顾你过去的成功是一种强大的方法，可以让你自己重新站起来，为新的挑战做好准备。</p><p>关键是要将项目视为一系列要解决的微小问题。我们只会感到害怕，因为我们完整地看到整个冰山，它正朝着我们的方向发展。但是，如果您使用我们之前讨论过的技术 - 将项目分解为基本结构 - 它将非常容易上手。</p><p>忘记完美主义<br>你不是这样做的，以创造一些理想的，令人惊叹的项目，代码如此美丽，它将使有经验的开发人员哭泣。</p><p>我们的目标是做什么必要：履行您已获得（或为自己曾经创造）的用户故事，让你可以学习的编码技术/语言功能/框架如何将某些工程力学，是它的API，功能，承诺等</p><p>然后尽可能多地改进项目 - 包括设计，功能和代码质量。</p><p>但在某些时候，让自己停下来。这不是一场国际艺术比赛。这是你和你想要学习的主题。不要让主题吓到你，你甚至无法开始。</p><p>极端需要完美做事的人往往是那些完全没有做任何事情的人。</p><p>我无法从这篇文章开始，例如，如果我花了太多时间担心它是好还是坏，更不用说完美了。我知道这是一个重要的话题，很多人有兴趣，那我需要写什么，我到目前为止，希望它会帮助别人，使他们的编码和轻松的旅程发现。</p><p>如果一切都必须完美，艺术中的草图会不会有任何地方？毕竟，不完美是使它们独一无二的原因。</p><p>让你的创造力流动！<br>如果您正在使用在线找到的描述和示例，请不要觉得您的项目与您在页面上看到的完全相同。编程既是艺术，也是科学。</p><p>如果你正在做前端，那就更加认真地对待这一点。</p><p>如果您正在制作随机报价机器，请让引号来自您最喜欢的角色。如果您正在制作游戏，请将声音和设计放在您想要的任何地方！</p><p>太奇怪了。让你所有的怪癖和你个性的独特差异出来。释放你的真实自我</p><p>专注于完成所有用户故事，但其他一切完全取决于您。</p><p>这是我构建的Zen计算器，作为我所谈论的一个例子。当然，你可以获得更多的创意。原件在这里，虽然它已经更新。我工作的版本提醒了更多的iPhone计算器应用程序。</p><p>网络 - 以及一般的编程 - 让我们获得自由。永远不要让自己退缩无论你想做什么，做任何你想做的事，让这些溢出到你生活的每一个部分，包括编码。</p><p>这是一些灵感，并说明我的意思：</p><p>当你为他们增添个性时，事情才会有所体现！比较超现实主义画家和毕加索。你能通过观察他们的作品来区分超现实主义画家吗？我非常怀疑。然而，你会马上知道毕加索的画作。让你思考。</p><p>偶尔屈服于分心<br>有时可以从项目中稍稍休息一下，但为此你必须有一些规则。</p><p>理想情况下，您的注意力不得超过一周，无论是课程还是教程，还是其他任何事情。它应该是您想要学习的特定主题，最好连接到您需要知道的东西以继续完善您的项目。</p><p>否则，如果您在上下班途中阅读编程书籍或观看编码视频，或者在无法访问互联网的某个地方等待，那么对我来说完全没问题。</p><p>只要确保当你回到你的办公桌时（或者你可以从哪个地方来，可能是一张床，对吗？），你回到真实的东西。这是你的实践。</p><p>获得有关您的项目的反馈<br>除了帮助您填补知识空白之外，项目还为您提供了一个可以与世界分享的工件，征求建设性的反馈意见。</p><p>小心你与谁分享你的项目。不要让过度批评的人进来。尝试找到真正的开发人员，或者还在学习的人，但已经比你更先进了。让他们检查您的代码并提供他们的反馈。你可以改进什么？什么有用？什么不是？</p><p>这将进一步加速您的学习，因为这些善良的人将帮助您发现您自己无法找到的见解。</p><p>我希望我已经确信，到目前为止，构建实时项目是学习编码的最有效方式。</p><p>我个人注意到，我建立的时期 - 而不是观看，阅读或通过在线课程 - 是我学习最多的时期。我希望你的经历与我的相同。</p><p>祝你好运！请随意在本文的评论中添加您的建议，并在此处分享您的项目。</p><p>随机说明：我在听Tron：Legacy Soundtrack时写了这篇文章。</p><p>如果您喜欢这篇文章，请点击❤在Medium上推荐它。这对我来说意味着世界！ :)</p><blockquote><p><a href="https://medium.freecodecamp.com/how-to-get-a-developer-job-in-less-than-a-year-c27bbfe71645" target="_blank" rel="noopener">How to Get a Developer Job in Less Than a Year</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Soup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning-to-Code</title>
      <link href="/2018/08/29/Learning-to-Code/"/>
      <url>/2018/08/29/Learning-to-Code/</url>
      
        <content type="html"><![CDATA[<h1 id="Learning-to-Code"><a href="#Learning-to-Code" class="headerlink" title="Learning-to-Code"></a>Learning-to-Code</h1><blockquote><p>一些有用的心灵技巧解决你最内心的恐惧</p></blockquote><a id="more"></a><p>我们来谈谈如何保持正轨。当你觉得有太多东西需要学习时，如何继续学习。当你感觉自己从未获得第一个编码工作时，如何继续前进。</p><p>你发现自己在想：“也许我不是因为它而被切断了？”</p><p>这就像跟着你，模糊和歪曲事实云，因此它可以呈现的状况是多么糟糕无望如果那样的话，并和怎么也没有办法，你可以做到这一点。</p><p>嗯，我不知道你，但对我来说，这种情况每4-5天发生一次。</p><p>自2014年11月以来，我一直在学习编码，慢慢沉浸在这个领域。我使用了各种资源：书籍，在线课程，在线挑战，博客文章，教程等。freeCodeCamp对我的学习产生了很大的影响，通过对编码进行积极的转变，以及一条前进的明确路径。</p><p>在那段时间里，我经常不得不打击我的思想，吓跑我。我几乎可以肯定你也会经常遇到这种情况。</p><p>史蒂芬普莱斯菲尔德埃斯塔力在他的书艺之战有句名言被称为“抵抗”。我强烈建议你“读这本书。我发现自己每天都在使用它的课程（有些日子甚至是小时）。</p><p>在这篇文章中，我将分享一些心理技巧，用于消除消极性“云” - 抵抗 - 这可能是如此难以击败。所有的建议都是基于我到目前为止所学到的，如果你有其他想法 - 请在这里分享！</p><p>我将跳过最常见的激励建议（通常过于宽泛而无法采取行动），并专注于不寻常但有效的建议。我已经使用了这些技术并发现它们有效，我希望你也会这样做。</p><p>意识到每个人都经历过抵抗<br>在学习新技能时，许多人认为如果事情没有顺利进行，那就不适合他们。我们总是幻想在我们的如何，对某些人来说，一切都自然地流淌思想，只是他们迅速向前滑行所有的表面上，而不会遇到在他们的旅程的任何问题和障碍。</p><p>这不可能是事实。他们可能难以克服我们可能甚至不知道的事情。他们可能会被拒绝，失望，他们可能会感到绝望。我们不知道。不要以你想象的另一个人的旅程的标准判断自己。</p><p>当然，有一点可能会吃他们更容易，这可能是编码，但我向你保证，还有其他的10件事情，他们都希望自己能做得更多，但仍然轻松挣扎。</p><p>（为了让你了解这个抵抗力量有多强大：我在2015年12月开始写这篇文章。是的，我知道。）</p><p>如何练习：<br>不要再考虑困难，因为围绕着你建造的这些墙壁让你不能去你想去的地方。将它们视为实现目标的障碍 - 让您变得更强大的挑战。</p><p>不要让自己相信你经历这些情感这一事实意味着你不会因为编程而被裁掉。每个人在尝试学习新的东西时都会遇到同样不舒服的情绪。推动你的界限和你所谓的“限制”（嘘没有勺子）是痛苦的。</p><p>你觉得什么是抵抗。</p><p>它很自然，如果你用它作为你的指南针它可以成为你的朋友。这是一个告诉你正走在正确道路上的标志，也是个人成长的道路。</p><p>每天都在计算<br>当看到已经在技术领域的人时，很容易（相信我这一点）变得气馁。如果你专注于拥有数千名粉丝的开发人员以及对主题的大量了解，那就更容易让人气馁。</p><p>问题在于，这些是您在Twitter上看到的人，或者是谷歌搜索视频，教程和编码文章的结果。</p><p>您很少看到了解该领域98％左右的常规开发人员。</p><p>我并不是说你的目标应该是成为98％中的一员。 （你应该比这更进一步）。我要说的是，它很容易自己吓到，以为是有隐喻的大峡谷，你和专业的开发人员之间。</p><p>所以，你已经花了几个月的学习代码，但它好像你还是那么远从正反那你想知道：怎么可以这么遥遥领先他们？我有什么希望能够达到这个水平吗？</p><p>嗯，这是你的思想在你身上耍花招的地方。你不看专业的小提琴家，并认为对自己说：“哦，我一直在学习，现在打了一年小提琴，为什么我不能望其项背在执行自己的水平？”</p><p>但是通过编码，我们中的许多人每次都这样做。</p><p>你认为一个你认为是一个可靠的开发人员的人会忽略那个人的其他一切。你想：“这很简单。他们是一个伟大的程序员，我不是。就是这样。“</p><p>你不考虑如何可能有一个人与编程或数学奋斗和努力克服这些困难，或有可能下班后花了试图理解卡住的错误消息，并且担心同样的事情，你是无数个夜晚。或者他们如何在全日制大学学习软件开发方面花了4年时间。</p><p>没人说这很容易。学会做好事需要时间。很多时间。抵抗基本上告诉你，他们在那个级别怎么样，你不是？怎么了？应该很容易，必须有快速的方法，快捷方式，秘密，东西！</p><p>提醒自己，没有什么东西是无用的东西。关键是你应该知道你有可能到达那里。需要时间，是的，但那又怎么样？所有有价值的事情都需要时间。</p><p>如何练习：<br>这是我学习编码和技术的主要难题之一。如果没有这个，我可能已经放弃了编码，就像我放弃了多年来我试图学习的许多其他东西。</p><p>在这里，它是：想象有多少人摆脱了那些已经开始了大致相同的一天编码上像你一样已经停止 - 或将退出今天 - 在同一诱惑让步停止的痛苦和学习的不适。</p><p>想想你在旅程中发展的力量（心理，情感）。每当你做出更进一步的决定时，你的意志和韧性就会增加，不要停留在你的位置，不要承认失败。您每天编码都是您赢得的那一天。</p><p>全力以赴<br>因此，您已决定自学编码。什么阻止你在6个月没有看到你想看到的结果后退出？</p><p>你需要一个目标来努力。一旦你的目标，这将是难以停止，而不是一个情况涉足如果您正在使用的代码，或不特定的，定义明确的目标，学习。</p><p>我最初的目标是找到一份编码工作。这花了我大约14个月的时间。我在当时的营销全职工作，所以整天晚上我无法代码，但我试图在尽可能多的时间去挤，因为我可以编码到每一天。</p><p>明确目标的另一个好处是，您可以更轻松地在想要学习的主题之间进行选择。我相信这将是主要的JavaScript技术我在在职使用，所以它更容易说不改道成Python，Ruby和其他语言。</p><p>重点关注你的努力。如果它们看起来像风玫瑰，将单个光线带入中心，您就会变成激光。你知道激光器的效果如何。有时，我们都需要收集试图向四面八方传播的光线，并将其重点放在我们的目标上。</p><p>一旦你决定了你的目标，全力以赴。花费尽可能多的时间来编码。</p><p>谁在乎您是否有所有日子或每天只有1小时？如果你没有它，你有多少时间或没有多少都没关系。</p><p>我读过的人照顾小孩和学习的代码时，他们有片刻的故事，但我没有看到的“一个故事，我怎么有我的天免费一年，我还是没能学会编码“。你知道为什么吗？这些人没有故事可讲。</p><p>使用您“不知道你有时间：在编码下载有声读物，听它，得到一本书，读它在地铁或公共汽车，如果你上班地点或其他地方。尝试使用多种类型的学习，但请确保您遵守相同的主题。</p><p>不要过头，成为气馁 - 如果你觉得你不能拿的JavaScript或Python（或任何其他受你关注）了，一天的休息放松，做别的事情。</p><p>我想传达的概念是，如果你担心你没有足够的时间去学习的代码，这可能只是你的担心是骗你的。这发生在我身上 - 我常常会想：它需要多长时间我学习ESTA而全职工作？我有没有机会坚持到底？</p><p>请记住，你今天付出的努力越多（不打算明天投入），你到达那里的速度就越快。</p><p>如何练习：<br>确定一个具体，切合实际的目标。一个定义明确的目标将是：“我想找到一份工作，前端Web开发的未来12个月内”或者说：‘我将创建3个单独的iOS应用在接下来的8个月里。’</p><p>尽可能使用，并将所有精力集中在学习编码上。为什么呢？因为它是不容易的，时间越长你传播因为你的学习时间（除非你有具体时限的目标），你就越有可能会成为的“进展缓慢”的感觉气馁。</p><p>你足够聪明。<br>我开始学习之旅时的另一个大恐惧是，我不够聪明，无法比较那些花时间解决数学，物理和编程问题的人。他们在3岁时开始编程，并在5岁时构建编译器。</p><p>我误以为编程中的每个人都是拥有博士学位的工程师。来自常春藤联盟大学，对我来说已经太晚了。</p><p>首先，我已经知道科技行业中有这么多人，他们有不同的编码途径。所以我可以开始相对较晚。</p><p>其次，更重要的是，我仍然担心“如果我不能在那里获得最好的软件工程工作怎么办？”就像Google和Facebook一样。起初我可能不会，但我会全力以赴达到这个水平。</p><p>我确信的事情是 - 如果一个人长时间保持编码并使练习刻意 - 他们将达到他们渴望的任何水平。</p><p>通过刻意练习，我的意思是：</p><p>检查代码中的错误和问题<br>回到某些问题并试图以更好的方式解决它们<br>阅读其他人的代码，看看他们是如何解决这些问题的<br>重构你的旧代码<br>简单地说：做返工而不是尝试新事物并一直切换主题。</p><p>如何练习：<br>相信我，你足够聪明。相信你是，并且不要让“我不够好”的想法溜进来。它们本质上具有破坏性。</p><p>我将与您分享一个肯定，我不在乎您对肯定的看法：</p><p>“我配得上生活中最好的一面，我可以做任何我梦寐以求的事情！”</p><p>如果你发现自己害怕自己不够聪明，那就重复一下这个肯定。每当恐惧得到你的想法，或者你需要的那一天多次，你可能想要重复它5次。你的思维就像粘土一样，你的工作就是训练它并将它塑造成你的朋友。</p><p>看看我们我们和你一样。所有人都渴望编码并变得更好。我们都有同样的恐惧。</p><p>如果你将它作为一个专业的开发人员，最终的因素不是你的智商或你的“代码才能”，而是你的弹性和勇气。</p><p>有一座山 - 珠穆朗玛峰，更高的机会，你会不会做它，你会吓跑你自己，因为出来的成功，而不是不被其他一些人一样聪明（你的项目或人在谁在你的心中非凡的光彩）。</p><p>如果您对自我形象感兴趣，以及它与成功的关系，我建议您阅读Maxwell Maltz的Psycho-Cyber​​netics。</p><p>不要浪费你的努力<br>每当学习变得困难时 - 就像你在学习基础知识后开始学习中间部分一样 - 你会发现自己正在探索其他不那么密切相关的编程领域。</p><p>如果你专注于Ruby，你会突然开始发现Swift如此迷人和精彩，而且非常神奇。</p><p>那么如何保持正轨，同时也不会对同一主题过于厌倦？</p><p>如何练习：<br>首先，提醒自己你的目标。接下来，我的建议与您可能认为的相反。我说 - 去那个短暂的蜜月与那个新的令人兴奋的主题！</p><p>我建议您在接下来的几天里探索引起您兴趣的新亮点。没关系。</p><p>我用Ruby做过。我用Python做到了。然后，在那个喘息之后，我会提醒自己我的目标 - 寻找编码工作。我想：探索这个和那个会很好，但是我真的想在这一点上做得更好，所以我最好再一次关注它！我会以新发现的能量和热情回到学习JavaScript。</p><p>如果你不允许自己这样的呼吸怎么办？长时间研究一个主题就像节食一样。你会做得很好，很好，很开心，直到有一天你休息，再也不能接受它。比如说，你从一个完全不同的主题开始这个为期6个月的学习之旅，结果却发现你还没有掌握你尝试过的许多主题。</p><p>另外，值得深思：你从来没有听过“我用Ruby，JS，Python，C ++和Java编写代码，然后开始我成功的编码生涯”的故事。</p><p>为了开始，你应该至少有一件令人惊奇（或至少是好的）的东西。选择它，追求它，只允许自己短暂的转移，以保持你的理智。</p><p>数量一致性<br>当我们决定采取大的东西，喜欢学习的代码，我们通常会令“新年决议”的思想下星期一我们会下班后每天花费3-4小时学习代码的错误。</p><p>接下来发生什么？我们做了两天，然后我们被邀请参加一个朋友家吃饭，错过了一天，感觉太可怕了，我们只开始了几天后再次编码或更多已通过 - 如果我们回到它。</p><p>我们需要明白，缓慢但更加一致的进步总会胜过跳过几天的人的进步，然后试图通过塞满一整天，或者拉一个全能者来弥补它。</p><p>每天学习15到30分钟比周末学习10个小时要好。你会记得更多 - 并且学得更快 - 如果你每天都回来，而不是你想要记住你一周前所做的事情。</p><p>我知道这是常识，但是当我们从更快地获得更好的愿望中获得灵感时，我们常常会忘记这一切。</p><p>如何练习：<br>制定明确的“亮线”规则，每天至少编码30分钟。如果你能做得更多，那就去做吧。但是，如果你已经完成了30分钟的工作，那就给自己一个当天感觉完成的许可。</p><p>因此，您的努力将变得更加一致，您将更快地实现目标。</p><p>不要欺骗自己相信你必须回到大学或支付训练营才能成为开发者。事实并非如此<br>是的，有很多人通过回到大学获得第二学位或参加面对面的训练营来进入软件开发。但猜猜是什么？通过独立学习，有更多的人进入这个领域。所以不要让自己忘记这一点。</p><p>如何练习：<br>不要再担心这一点了，并且知道可以在没有做任何这些事情的情况下获得编码工作。</p><p>如果你可以获得学位或通过编码训练营，你可以考虑这样做。如果你做不到，不要让你沮丧一点。</p><p>此外，你花时间为自己感到难过的时间（我知道我已经做了很多），你可以花时间编写代码和学习。</p><p>好消息是对优秀的开发人员有很大的需求，并且有大量的免费资源。freeCodeCamp是一个很好的起点。</p><p>寻找志同道合的人<br>好的，这可能与您在每篇关于此主题的文章中找到的建议相同，但它很有意义。去黑客马拉松和其他技术活动。</p><p>首先，您将了解更多人并了解他们的故事。它将帮助您了解人们采用的数百万条不同的路径将它们带到现在的位置。</p><p>其次，您将会询问您所有的问题，并希望能够帮助解决您正在处理的项目遇到的任何问题。</p><p>虽然这些技术活动对初学者知识水平的人来说似乎有些吓人，但不要担心感到愚蠢或者不理解任何事情。大多数这些活动都欢迎初学者。</p><p>是什么让我意识到编码事件的重要性如下。 2014年底，我找到了freeCodeCamp。它的发展还处于早期阶段。该网站有一个城市列表，其中有一群人聚在一起学习编码，称为露营地。它还有关于在您所在城市建立露营地的说明，如果它还没有。</p><p>那时多伦多没有一个。我喜欢组织东西，所以我想：“哇，这是个什么样的机会！”我很快就创造了一个。</p><p>我很惊讶地看到人们开始加入新营地的速度有多快！随着团队的成长，我决定创建我们的第一个活动。</p><p>今天我们正在接近六月份的“周年纪念”聚会，这真是令人惊叹。该小组现在有800多名成员，我很享受我们的每一次会议。</p><p>最后，有一种社区感，不仅是我学会分享我的经历，我还遇到了我能在任何地方找到的最好的人。那些有兴趣发展自己，变得更好，做新事物，学习，并且通常会从生活中获得更多生活的人！</p><p>我认识的一些人是我真正的好朋友，我喜欢和他们以及参加活动的人分享资源，挑战和想法。</p><p>如何练习：<br>去编码活动，例如Free Code Camp的咖啡和代码活动，其中的重点不仅是编码，还关注社区意识。</p><p>我不知道你住的地方有哪些活动，但我很确定你会在你所在城市的freeCodeCamp露营地找到当地的咖啡和代码活动。</p><p>如果还没有，你知道该怎么做。</p><p>阅读其他人的编码起源故事<br>阅读其他人学习编码的方式既有信息又有动力。您可以快速了解他们的情况以及他们使用的资源。</p><p>我花了一两个月阅读这些，同时试图决定我应该开始学习哪种编程语言。一旦我决定专注于JavaScript，新的问题是我应该如何学习它。以后教自己和找工作是否现实？</p><p>我会诚实地说，其中一些故事 - 人们花费3个月到昂贵的训练营并在之后找到工作 - 对我来说并不鼓舞人心。我有工作和其他责任，我无法参加。但是，如果您正在考虑训练营，这些故事可能会对您产生不同的影响。</p><p>尽管如此，我还是读过一些单亲父母学习编码的故事，以及使用freeCodeCamp，课程，EdX和其他资源自学和成功的人。它帮助我获得了成功的勇气和信心。</p><p>如何练习：<br>阅读人们的故事，我保证你会受到启发，你的很多恐惧都会消失。</p><p>好吧，阅读够了，去写一些代码:)</p><p>如果您有任何关于学习编码的问题，这些问题会在您脑海中迸发出一个漏洞，那么请您离开 - 我非常乐意为您提供帮助！</p><p>如果您喜欢这篇文章，请告诉我 - 这将是我的一天！</p><p>如果您有兴趣，可以在Medium或Twitter上关注我：@ ka11away，我一定会写更多文章分享我的经历！</p><p>非常感谢您的阅读！</p><blockquote><p><a href="https://medium.freecodecamp.com/learning-to-code-when-it-gets-dark-e485edfb58fd" target="_blank" rel="noopener">Learning to Code: When It Gets Dark</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Soup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/2018/08/27/Docker%E5%85%A5%E9%97%A8/"/>
      <url>/2018/08/27/Docker%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzgc19tnhaj30ku0bqmy1.jpg" alt="docker"></p><a id="more"></a><h1 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h1><h2 id="初识Docker"><a href="#初识Docker" class="headerlink" title="初识Docker"></a>初识Docker</h2><h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><h4 id="Docker开源项目"><a href="#Docker开源项目" class="headerlink" title="Docker开源项目"></a>Docker开源项目</h4><p>Docker是基于Go语言实现的云开源项目，诞生于2013年初，最初发起者为dotCloud公司。Docker项目目前已加入Linux基金会，遵循Apache2.0协议，全部开源代码均在<a href="https://github.com/docker/docker" target="_blank" rel="noopener">https://github.com/docker/docker</a>上进行维护。</p><p>Docker的主要目标是”Build,ship and Run Any App,Anywhere“，即通过对应用组件的封装、分发、部署、运行等生命周期的管理，达到应用级别的”一次封装，到处运行“。这里的应用组件，可以是一个Web应用，也可以是一套数据库服务，甚至是一个操作系统或编译器。</p><h4 id="Linux容器技术"><a href="#Linux容器技术" class="headerlink" title="Linux容器技术"></a>Linux容器技术</h4><p>Docker引擎的基础是Linux容器(Linux Containers,LXC)技术（容器有效第将由单个操作系统管理的资源划分到孤立的组中，以便更好第在孤立的组之间平衡有冲突的资源使用需求。与虚拟化相比，这样既不需要指令级模拟，也不需要即时编译。容器可以在核心CPU本地运行指令，儿不需要任何专门的解释机制。此外，也避免了准虚拟化和系统调用替换中的复杂性。）</p><h4 id="从Linux容器到Docker"><a href="#从Linux容器到Docker" class="headerlink" title="从Linux容器到Docker"></a>从Linux容器到Docker</h4><p>在Linux容器的基础上，Docker进一步优化了容器的使用体验。Docker提供了各种容器管理工具（如分发、版本、移植等)让用户无需关注底层的操作，可以简单明了地管理和使用容器。</p><p>可以简单地将Docker容器理解为一种沙盒。每个容器内运行一个应用，不同的容器相互隔离，容器之间也可以建立通信机制。容器的创建和停止都十分快速，容器自身对资源的需求也十分有限，远远低于虚拟机。很多时候，甚至直接把容器当作应用本身也没有任何问题。</p><h3 id="为什么使用Docke"><a href="#为什么使用Docke" class="headerlink" title="为什么使用Docke"></a>为什么使用Docke</h3><h4 id="Docker容器虚拟化的好处"><a href="#Docker容器虚拟化的好处" class="headerlink" title="Docker容器虚拟化的好处"></a>Docker容器虚拟化的好处</h4><p>高效地构建应用</p><h4 id="Docker在开发和运维中的优势"><a href="#Docker在开发和运维中的优势" class="headerlink" title="Docker在开发和运维中的优势"></a>Docker在开发和运维中的优势</h4><ul><li>更快的交付和部署。使用Docker，开发人员可以使用镜像来快速构建一套标准的开发环境；测试和运维人员可以直接使用相同的开发环境来部署代码。Docker可以快速创建和删除容器，实现快速迭代，大量节约开发、测试、部署的时间。并且各个步骤都有明确的配置和操作，整个过程全程课件，使团队更容易理解应用的创建和工作过程。</li><li>更高效的资源利用。Docker容器的运行不需要额外的虚拟化管理程序支持，它是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。</li><li>更轻松的迁移和扩展。Docker容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。</li><li>更简单的更新管理。使用Dockerfile，只需要小小的配置修改，就可以替代以往大量的更新工作。并且所有修改都可以以增量的方式进行分发和更新，从而实现自动化并且高效的容器管理。</li></ul><h4 id="Dcoker与虚拟机比较"><a href="#Dcoker与虚拟机比较" class="headerlink" title="Dcoker与虚拟机比较"></a>Dcoker与虚拟机比较</h4><ul><li>Docker容器很快，启动和停止可以在秒级实现。</li><li>Docker容器对系统资源需求很少，一台主机可以同时运行数千个Docker容器。</li><li>Docker通过类似Git的操作来方便用户获取、分发和更新应用镜像，指令简明，学习成本较低。</li><li>Docker通过Dockerfile配置文件来支持灵活的自动化创建和部署机制，提高工作效率。</li></ul><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动速度</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr><tr><td>隔离性</td><td>安全隔离</td><td>完全隔离</td></tr></tbody></table><h4 id="虚拟化与Docker"><a href="#虚拟化与Docker" class="headerlink" title="虚拟化与Docker"></a>虚拟化与Docker</h4><p>在计算领域，一般指的是计算虚拟化，或通常说的服务器虚拟化。（维基百科：在计算机技术中，虚拟化是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以用比原本的组态更好的方式来应用这些资源。）</p><p>虚拟化技术分类</p><ul><li>基于硬件的虚拟化（不常见）</li><li>基于软件的虚拟化<ul><li>应用虚拟化</li><li>平台虚拟化<ul><li>完全虚拟化。虚拟机模拟完整的底层硬件环境和特权指令的执行过程，客户操作系统无需进行修改。</li><li>硬件辅助虚拟化：利用硬件辅助支持处理敏感指令来实现完全虚拟化的功能，客户操作系统无需进行修改。</li><li>部分虚拟化：只针对部分硬件资源进行虚拟化，客户操作系统需要进行修改。</li><li>超虚拟化：部分硬件接口以软件的形式提供给客户机操作系统，客户操作系统需要进行修改。</li><li>操作系统及虚拟化：内核通过创建多个虚拟的操作系统实例来隔离不同的进行。容器相关技术属于这个范畴。</li></ul></li></ul></li></ul><p>Docker和传统虚拟机方式的不同之处<br><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuooutd18sj30lp096wey.jpg" alt="38b79a7fd4361f03533adffa283d13bc.png"></p><h2 id="Docker的核心概念和安装"><a href="#Docker的核心概念和安装" class="headerlink" title="Docker的核心概念和安装"></a>Docker的核心概念和安装</h2><blockquote><p>三大核心概念：镜像、容器、仓库</p></blockquote><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h4><p>Docker镜像类似于虚拟机镜像，可以理解为一个面向Docker引擎的只读模板，包含了文件系统。</p><p>镜像是创建Docker容器的基础。通过版本管理和增量的文件系统，Docker提供了一套简单的机制来创建和更新现有的镜像，用户设置可以从网上下载一个已经做好的应用镜像，并通过简单的命令就可以直接使用。</p><h4 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h4><p>Docker容器类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例，可以将其启动、开始、停止、删除，而这些容器都是互相隔离、不可见的。</p><p>容器可以看做一个简易版的Linux系统环境（包括root用户权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序打包成应用盒子。</p><p>镜像自身是只读的。容器从镜像启动的时候，Docker会在镜像的最上层创建一个可写层，镜像本身保持不变。</p><h4 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h4><p>注册服务器是存放仓库的地方，不能将Docker仓库和注册服务器(Registry)混为一谈。</p><p>Docker仓库类似于代码仓库，是Docker集中存放镜像文件的场所。每个仓库放着某一类镜像，往往包括多个镜像文件，通过不同的标签(tag)来区分。<br>根据所存储的镜像公开与否，Docker仓库可以分为公开仓库和私有仓库两种形式。目前最大的公开仓库是Docker Hub，存放了数量庞大的镜像供用户下载。国内的公开仓库包括Docker Pool等，可以提供稳定的国内访问。Docker也支持用户在本地网络创建一个只能自己访问的私有仓库。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><ul><li>Ubuntu</li><li>CentOS</li><li>Windows</li><li>Mac OS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docker</span><br></pre></td></tr></table></figure><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><blockquote><p>镜像是Docker的三大核心概念之一。Docker运行容器前需要本地存在对应的镜像，如果镜像不存在本地，Docker会尝试先从默认镜像仓库下载，用户也可以通过配置，使用自定义的镜像仓库。</p></blockquote><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>镜像是Docker运行容器的前提。使用<code>docker pull</code>命令从网络上下载镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull NAME[:TAG]</span><br></pre></td></tr></table></figure><p>若不显式地指定TAG，则默认会选择latest标签，即下载仓库的最新版本的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br><span class="line"><span class="comment"># 指定TAG</span></span><br><span class="line">docker pull ubuntu:14.04</span><br><span class="line"><span class="comment"># 已下载</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">c64513b74145: Already exists</span><br><span class="line">01b8b12bad90: Already exists</span><br><span class="line">c5d85cf7a05f: Already exists</span><br><span class="line">b6b268720157: Already exists</span><br><span class="line">e12192999ff1: Already exists</span><br><span class="line">Digest: sha256:aade50db36e1ed96716662cfe748789e154c213a711931c66746c42ce34aa296</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:latest</span><br></pre></td></tr></table></figure><p>下载过程可以看出，镜像文件一般由若干层组成，行首的c64513b74145代表了各层的ID。下载过程中会获取病输出镜像的各层信息。层其实是AUFS(Advanced Union File System，一种联合文件系统)中的重要概念，是实现增量保存与更新的基础。</p><p>两条安装命令相当于：<code>docker pull registry.hub.docker.com/ubuntu:latest</code>，即从默认的注册服务器registry.hub.docker.com中的ubuntu仓库下载标记为latest的镜像。</p><p>指定完整的仓库注册服务器地址。例如从DockerPool社区的镜像源下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull dl.dockerpool.com:5000/ubuntu</span><br></pre></td></tr></table></figure><p>使用镜像创建容器并运行bash应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h3 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地主机上已有的镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 来源仓库     标签  镜像的ID号  创建时间  大小</span></span><br><span class="line"><span class="comment"># REPOSITORY  TAG  IMAGE ID  CREATED  SIZE</span></span><br></pre></td></tr></table></figure><p>TAG信息用来标记来自同一个仓库的不同镜像。仓库中有多个镜像，通过TAG信息来区分发行版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用docker tag为本地镜像添加新的标签</span></span><br><span class="line">docker tag dl.dockerpool.com:5000/ubuntu:latest ubuntu:latest</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuoovlxlhxj30jm010745.jpg" alt="a44f587ebdbb248faa256709056b4f7f.png"><br>不同标签的镜像的ID完全一致的，说明它们实际上指向了同一个镜像文件，只是别名不同。标签起到了引用或快捷方式的作用。</p><p><code>docker inspect</code>可以获取镜像的详细信息，<code>docker inspect</code>命令返回的是一个JSON格式的消息，若只要其中一项内容，可以使用-f参数指定。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 2cb0d9787c4d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定镜像ID时，通常使用该ID的前若干个字符组成的可区分字串来替代完整ID</span></span><br><span class="line">docker inspect -f &#123;&#123;<span class="string">".Architecture"</span>&#125;&#125; 550</span><br></pre></td></tr></table></figure><h3 id="搜寻镜像"><a href="#搜寻镜像" class="headerlink" title="搜寻镜像"></a>搜寻镜像</h3><p>使用<code>docker search</code>命令可以搜索远端仓库中的共享的镜像，默认搜索Docker Hub官方仓库中的镜像。</p><p>支持的参数：</p><ul><li>–automated=false 仅显示自动创建的镜像</li><li>–no-trunc=false 输出信息不截断显示</li><li>-s,–starts=0 指定仅显示评价为指定星级以上的镜像</li></ul><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>使用<code>docker rmi</code>可以删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IMAGE可以为标签或ID</span></span><br><span class="line">docker rmi IMAGE</span><br><span class="line"><span class="comment"># -f 参数强制执行</span></span><br><span class="line">docker rmi -f ubuntu</span><br></pre></td></tr></table></figure><p>当一个镜像拥有多个标签时，<code>docker rmi</code>只是删除了该镜像多个标签中的指定标签而已，并不影响镜像文件。但当只剩下一个标签时，执行<code>docker rmi</code>命令会删除这个镜像文件的所有AUFS层。</p><p>当使用<code>docker rmi</code>命令后面跟上镜像ID(也可以是ID能进行区分的部分前缀串)时，会先尝试删除所有指定该镜像的标签，然后删除镜像文件本身。</p><p>当有镜像创建的容器存在时，镜像文件默认是无法被删除的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除依赖该镜像的所有容器</span></span><br><span class="line">docker rm ubuntu</span><br><span class="line"><span class="comment"># 然后再删除镜像</span></span><br><span class="line">docker rmi ubuntu</span><br></pre></td></tr></table></figure></p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><blockquote><p>三种方法：基于已有镜像的容器创建、基于本地模板导入、基于Dockerfile创建</p></blockquote><h4 id="基于已有镜像的容器创建"><a href="#基于已有镜像的容器创建" class="headerlink" title="基于已有镜像的容器创建"></a>基于已有镜像的容器创建</h4><p>使用<code>docker commit</code>命令，格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p>主要选项包括：</p><ul><li>-a，–author=””作者信息</li><li>-m，–message=””提交信息</li><li>-p，–pause=true提交时暂停容器运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示</span></span><br><span class="line">docker run -ti ubuntu /bin/bash</span><br><span class="line">root@32fe63d85c53:/<span class="comment"># touch test</span></span><br><span class="line">root@32fe63d85c53:/<span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line">docker commit -m <span class="string">"add a new file "</span> 32fe63d85c53 <span class="built_in">test</span></span><br><span class="line">sha256:4ff6ec596961a2c5f25bcd31e912abd40cc108b7e7e35d53d239b1ef4ff13233</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用docker images查看本地镜像列表</span></span><br><span class="line">docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"><span class="built_in">test</span>                 latest              4ff6ec596961        6 seconds ago       83.5MB</span><br></pre></td></tr></table></figure><h4 id="基于本地模板导入"><a href="#基于本地模板导入" class="headerlink" title="基于本地模板导入"></a>基于本地模板导入</h4><p>使用OpenVZ提供的模板创建。OPENVZ模板的下载地址为<a href="https://download.openvz.org/template/precreated/" target="_blank" rel="noopener">https://download.openvz.org/template/precreated/</a><br>导入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04</span><br></pre></td></tr></table></figure><h3 id="存出和载入镜像"><a href="#存出和载入镜像" class="headerlink" title="存出和载入镜像"></a>存出和载入镜像</h3><p>可以使用<code>docker save</code>和<code>docker load</code>命令来存出和载入镜像</p><h4 id="存出镜像"><a href="#存出镜像" class="headerlink" title="存出镜像"></a>存出镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure><h4 id="载入镜像"><a href="#载入镜像" class="headerlink" title="载入镜像"></a>载入镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load --input ubuntu_14.04.tar</span><br><span class="line"></span><br><span class="line">docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><p>使用<code>docker push</code>命令上传镜像到仓库，默认上传到DockerHub官方仓库（需要登录），命令格式为<code>docker push NAME[:NAME]</code>，第一次使用时，会提示输入登录信息或进行注册。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><blockquote><p>容器时Docker的另一个核心概念，容器就是镜像的一个运行实例，不同的是，它带有额外的可写文件层。</p></blockquote><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><h4 id="新建容器"><a href="#新建容器" class="headerlink" title="新建容器"></a>新建容器</h4><p>使用<code>docker create</code>命令新建一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker create -it ubuntu:latest</span><br><span class="line">fb461fbaa2ffe5ebab82548feb5898a1b35b7a3d678b52e1085d94db0f08c6e5</span><br><span class="line">docker ps -a</span><br><span class="line">fb461fbaa2ff        ubuntu:latest       <span class="string">"/bin/bash"</span>         23 seconds ago      Up 5 seconds                            heuristic_lamport</span><br></pre></td></tr></table></figure><p>使用<code>docker create</code>新建的容器处于停止状态，可以使用<code>docker start</code>启动。</p><h4 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h4><p>启动容器的方式有两种</p><ul><li>基于镜像新建一个容器并启动</li><li>将在终止状态的容器重新启动</li></ul><p><code>docker run</code> = <code>docker create</code> + <code>docker start</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用如下命令输出一个‘hello world’，之后容器自动终止</span></span><br><span class="line">docker run ubuntu /bin/<span class="built_in">echo</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><p>当利用<code>docker run</code>创建并启动容器时，Docker在后台运行的标准操作：</p><ol><li>检查本地是否存在指定的镜像，不存在就从共有仓库下载。</li><li>利用镜像创建并启动一个容器。</li><li>分配一个文件系统，并在只读的镜像层外挂载一层可读写层。</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口道容器中去。</li><li>从地址池配置一个IP地址给容器。</li><li>执行用户指定的应用程序。</li><li>执行完毕后容器被终止。</li></ol><p>下面命令启动一个bash终端，允许用户进行交互</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:latest /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>-t：让Docker分配一个伪终端并绑定到容器的标准输出上<br>-i：让容器的标准输入保持打开</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti ubuntu /bin/bash</span><br><span class="line">root@d3df425445cf:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line">root@d3df425445cf:/<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">root@d3df425445cf:/<span class="comment"># ps</span></span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">    1 pts/0    00:00:00 bash</span><br><span class="line">   11 pts/0    00:00:00 ps</span><br><span class="line">root@d3df425445cf:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 使用exit退出后，容器自动处于终止状态</span></span><br></pre></td></tr></table></figure><h4 id="守护态运行"><a href="#守护态运行" class="headerlink" title="守护态运行"></a>守护态运行</h4><p><code>-d</code>参数可以让Docker容器在后台以守护态形式运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker run -d ubuntu /bin/bash -c <span class="string">"while true;do echo hello world;sleep 1;done"</span></span><br><span class="line">9c9db4515c703021cd2fc3e4583291cb62007ecafa28709f898cf2183eb914c1</span><br><span class="line">➜  ~ docker logs 9c9db4515c703</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">➜  ~ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">9c9db4515c70        ubuntu              <span class="string">"/bin/bash -c 'while…"</span>   41 seconds ago      Up 40 seconds                           elastic_brattain</span><br></pre></td></tr></table></figure><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><p><code>docker stop</code>可以用来终止一个运行中的容器，命令格式<code>docker stop [-t|--time[=10]]</code>它会首先向容器发送SIGTERM信号，等待一段时间后（默认为10s），再发送SIGKILL信号终止容器，当Docker容器中指定的应用终结时，容器也自动终止。</p><p>处于终止状态的容器，可以通过<code>docker start</code>重新启动</p><p><code>docker restart</code>可以重启一个运行中的容器。</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><h4 id="attach命令"><a href="#attach命令" class="headerlink" title="attach命令"></a>attach命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker run -idt ubuntu</span><br><span class="line">a9e625b70f57ec70c242e5baf5c9a4431515e0e4d239b81a4729fcc4c08a0eef</span><br><span class="line">➜  ~ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">a9e625b70f57        ubuntu              <span class="string">"/bin/bash"</span>              5 seconds ago       Up 4 seconds                            hungry_brown</span><br><span class="line">➜  ~ docker attach hungry_brown</span><br><span class="line">root@a9e625b70f57:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure><p>但是使用attach命令有时候并不方便。当多个窗口同时attach到同一个容器时，所有的窗口都会同步显示。当某个命令因命令阻塞时，其他窗口也无法执行操作。</p><h4 id="exec命令"><a href="#exec命令" class="headerlink" title="exec命令"></a>exec命令</h4><p>Docker自1.3版本起，提供了exec工具，可以直接在容器内运行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -ti a9e625 /bin/bash</span><br></pre></td></tr></table></figure><h4 id="nsenter工具"><a href="#nsenter工具" class="headerlink" title="nsenter工具"></a>nsenter工具</h4><p>nsenter工具在util-linux包2.33版本后包含。</p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p><code>docker rm</code>可以删除处于终止状态的容器，命令格式为<code>docker rm [OPTION] CONTAINER [CONTAINER...]</code>支持的选项包括：</p><ul><li>-f，–force=false强行终止并删除一个运行中的容器</li><li>-l，–link=false删除容器的连接，但保留容器</li><li>-v，–volume=false删除容器挂载的数据卷</li></ul><h3 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h3><h4 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h4><p>导出容器是指导出一个已经创建的容器到一个文件，不管此时这个容器是否处于运行状态，可以使用<code>docker export</code>命令，命令格式为<code>docker export CONTAINER</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> ce4 &gt; test_for_run.tar</span><br></pre></td></tr></table></figure><h4 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h4><p><code>docker import</code>可以导入文件成为镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test_for_run.tar | docker import - <span class="built_in">test</span>/ubuntu:v1.0</span><br></pre></td></tr></table></figure><blockquote><p>与docker load的区别：<br>docker load命令导入镜像存储文件到本地的镜像库<br>docker import命令导入一个容器快照到本地镜像库<br>容器快照文件将丢弃所有的历史记录和元数据信息（仅保留容器当时的快照状态），而镜像存储文件保留完整记录，体积也更大。此外，从容器快照文件导入可以重新指定标签等元数据信息。</p></blockquote><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><blockquote><p>仓库是集中存放镜像的地方，注册服务器是存放仓库的具体服务器，每个服务器上可以有多个仓库，每个仓库下面有多个镜像。仓库地址dl.dockerpool.com/ubuntu，dl.dockerpool.com是注册服务器，ubuntu是仓库名。</p></blockquote><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><p>基础操作</p><ul><li>docker pull 下载镜像到本地</li><li>docker search 搜索公共仓库镜像</li><li>docker push 将本地奖项推动到Docker Hub</li></ul><p>镜像资源分为两类</p><ol><li>类似ubuntu这样的基础镜像，成为基础或根镜像。这些镜像由Docker公司创建、验证、支持、提供，这样的镜像往往使用单个单词作为名字</li><li>类似user/ubuntu这样的镜像，它是由DockerHub的用户user闯将并维护的，带有用户名称前缀，</li></ol><blockquote><p>查找时可以通过-s N参数指定仅显示评价为N星以上的镜像。</p></blockquote><h4 id="自动创建"><a href="#自动创建" class="headerlink" title="自动创建"></a>自动创建</h4><p>自动创建使用户通过Docker Hub指定跟踪一个目标网站（目前支持GitHub或BitBucket）上的项目，一旦项目发现新的提交，则自动执行创建。<br>步骤：</p><ol><li>创建并登陆Docker Hub，以及目标网站；*在目标网站中连接账户到Docker Hub</li><li>在Docker Hub中配置一个自动创建</li><li>选取一个目标网站中的项目（需要含Dockerfile）和分支</li><li>指定Dockerfile的位置，并提交创建。</li></ol><p>之后可以在Docker Hub的“自动创建”页面中跟踪每次创建的动态。</p><h3 id="创建和使用私有仓库"><a href="#创建和使用私有仓库" class="headerlink" title="创建和使用私有仓库"></a>创建和使用私有仓库</h3><h4 id="使用registry镜像创建私有仓库"><a href="#使用registry镜像创建私有仓库" class="headerlink" title="使用registry镜像创建私有仓库"></a>使用registry镜像创建私有仓库</h4><p>通过官方的registry镜像简单搭建一套本地私有仓库环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 registry</span><br></pre></td></tr></table></figure><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><blockquote><p>用户在使用Docker的过程中，需要能查看容器内应用产生的数据，或者需要把容器内的数据进行备份，甚至多个容器之间进行数据共享，必然涉及到容器内的数据管理操作。容器中管理数据的方式主要有两种方式：1.数据卷 2.数据卷容器</p></blockquote><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>数据卷是一个可供容器使用的特殊目录，它绕过文件系统，提供很多有用的特性：</p><ol><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>卷会一致存在，知道没有容器使用</li></ol><p>数据卷的使用用，类似于Linux下对目录或文件进行mmount操作。</p><h4 id="在容器内创建一个数据卷"><a href="#在容器内创建一个数据卷" class="headerlink" title="在容器内创建一个数据卷"></a>在容器内创建一个数据卷</h4><p>使用<code>docker run</code>命令的时候，使用-v编辑可以在容器内创建一个数据卷。多次会用-v标记可以创建多个数据卷。</p><p>使用training/webapp镜像创建一个Web容器，并创建一个数据卷挂载到容器的/web目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name web -v /webapp training/webapp python app.py</span><br></pre></td></tr></table></figure><blockquote><p>-P是允许外部访问容器需要暴露的端口</p></blockquote><h4 id="挂载一个本地主机文件作为数据卷"><a href="#挂载一个本地主机文件作为数据卷" class="headerlink" title="挂载一个本地主机文件作为数据卷"></a>挂载一个本地主机文件作为数据卷</h4><p>-v标记也可以从主机上挂载单个文件到容器中作为数据卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it -v ~/.zshrc ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h2 id="网络基础配置"><a href="#网络基础配置" class="headerlink" title="网络基础配置"></a>网络基础配置</h2><h3 id="端口映射实现访问"><a href="#端口映射实现访问" class="headerlink" title="端口映射实现访问"></a>端口映射实现访问</h3><h3 id="从外部访问容器应用"><a href="#从外部访问容器应用" class="headerlink" title="从外部访问容器应用"></a>从外部访问容器应用</h3><p>可以通过<code>-P</code>或<code>-p</code>参数来指定端口映射。当使用<code>-P</code>标记时，Docker会随机映射一个49000~49900的端口至容器内部开放的网络端口。<code>-p</code>则可以指定要映射的端口，并且在一个指定端口上只可以绑定一个容器。支持的格式有：<code>ip:hostport:containerPort | ip::containerPort | hostPort:containerPort</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P training/webapp python app.py</span><br><span class="line">docker ps -l</span><br><span class="line">d5c545dc020f        training/webapp     <span class="string">"python app.py"</span>     7 seconds ago       Up 6 seconds        0.0.0.0:32774-&gt;5000/tcp   infallible_varahamihira</span><br></pre></td></tr></table></figure><h4 id="映射所有的接口地址"><a href="#映射所有的接口地址" class="headerlink" title="映射所有的接口地址"></a>映射所有的接口地址</h4><p>将本地的5000端口映射到容器的5000端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><p>亦可以多次使用<code>-p</code>标记绑定多个端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 -p 3000:80 training/webapp python app.py</span><br></pre></td></tr></table></figure><h4 id="映射到指定地址的指定端口"><a href="#映射到指定地址的指定端口" class="headerlink" title="映射到指定地址的指定端口"></a>映射到指定地址的指定端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><h4 id="映射到指定地址的任意端口"><a href="#映射到指定地址的任意端口" class="headerlink" title="映射到指定地址的任意端口"></a>映射到指定地址的任意端口</h4><p>使用<code>ip::containerPort</code>绑定localhost的任意端口到容器的5000端口，本地主机会自动分配一个端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1::5000 training/webapp python app.py</span><br><span class="line"><span class="comment"># 使用ud标记来指定udp端口</span></span><br><span class="line">docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br></pre></td></tr></table></figure><h4 id="查看映射端口配置"><a href="#查看映射端口配置" class="headerlink" title="查看映射端口配置"></a>查看映射端口配置</h4><p>使用<code>docker port</code>查看当前映射的端口配置，也可以查看到绑定的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port DOCKERNAME containerPort</span><br></pre></td></tr></table></figure><blockquote><p>容器有自己的内部网络和IP地址(<code>docker inspert + 容器ID</code>可以获取所有的变量值)。</p></blockquote><h3 id="容器互联实现容器间通信"><a href="#容器互联实现容器间通信" class="headerlink" title="容器互联实现容器间通信"></a>容器互联实现容器间通信</h3><blockquote><p>容器的连接系统是除了端口映射外另一种可以与容器中应用进行交互的方式。它会在源和接收容器之间创建一个隧道，接收容器可以看到源容器指定的信息。</p></blockquote><p>连接系统根据容器的名称来执行，因此需要先自定义一个好记的容器命名。使用<code>--name</code>标记可以为容器自定义命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name web training/webapp python app.py</span><br></pre></td></tr></table></figure><h2 id="八、使用Dockerfile创建镜像"><a href="#八、使用Dockerfile创建镜像" class="headerlink" title="八、使用Dockerfile创建镜像"></a>八、使用Dockerfile创建镜像</h2><blockquote><p>Dockerfile是一个文本格式的配置文件，用户可以使用Dockerfile快速创建自定义的镜像。</p></blockquote><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>Docker由一行行命令语句组成，并且支持以#开头的注释行。一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动执行指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This dockerfile uses the ubuntu image</span></span><br><span class="line"><span class="comment"># VERSION 2 - EDITION 1</span></span><br><span class="line"><span class="comment"># Author:docker_user</span></span><br><span class="line"><span class="comment"># Command format: Instruction [arguments / command]...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一行必须指定基于的基础镜像</span></span><br><span class="line">From ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 维护者信息</span></span><br><span class="line">MAINTAINER entercoder entercoder1993@gmail.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像的操作指令</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"deb http://archive.ubuntu.com/ubuntu/ raring main universe"</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nginx</span><br><span class="line">Run <span class="built_in">echo</span> <span class="string">"\nadaemon off;;"</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动时执行指令</span></span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure><ul><li>Example1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">From ubuntu</span><br><span class="line">MAINTAINER entercoder entercoder1993@gmail.com</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y inotify-tools nginx apache2 openssh-server%</span><br></pre></td></tr></table></figure><ul><li>Example2</li></ul><p>基于ubuntu，安装firfox和vnc软件，启动后，用户可以通过5900端口通过vnc方式使用firefox</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y xllvnc xvfb firefox</span><br><span class="line">RUN mkdir /.vnc</span><br><span class="line">RUN xllvnc -storepasswd 1234 ~/.vnc/passwd</span><br><span class="line">RUN bash -c <span class="string">'echo "firefox" &gt;&gt; /.bashrc'</span></span><br><span class="line"></span><br><span class="line">EXPOSE 5900</span><br><span class="line">CMD [<span class="string">"xllvnc,"</span>-forever<span class="string">","</span>-usepw<span class="string">","</span>-create<span class="string">"]</span></span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令的一般格式为INSTRUCTION arguments，指令包括FROM、MAINTAINER、RUN等</p><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>第一条必须为FROM指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令。<br>格式：<code>FROM &lt;image&gt;或FROM &lt;image&gt;:&lt;tag&gt;</code></p><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><p>指定维护者的信息<br>格式：<code>MAINTAINER &lt;name&gt;</code></p><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>在shell终端中运行命令，即<code>/bin/sh -c</code><br>格式：<code>RUN &lt;command&gt;</code><br>使用exec执行命令，指定其他终端可以用这种方式实现<br>格式：<code>RUN [&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;echo hello&quot;]</code><br>每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以用\来换行。</p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>支持三种形式</p><ol><li><code>CMD [”executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>使用exec执行，推荐方式</li><li><code>CMD command param1 param2</code>在<code>/bin/bash</code>中执行，</li><li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code>提供给ENTRYPOINT的默认参数</li></ol><p>指定启动容器时执行的命令，每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器时制定了运行的命令，则会覆盖掉CMD指定的命令。</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>告诉Docker服务端容器暴露的端口号，供互联网使用。在启动容器时需要通过-P，Docker主机会自动分配一个端口转发到指定的端口；使用-p，则可以指定哪个本地端口映射过来。<br>格式：<code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code></p><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>指定一个环境变量，会被后续RUN指令使用，并在容器运行时保持。<br>格式：<code>ENV &lt;key&gt; &lt;value&gt;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENV PG_MAJOR 9.3</span><br><span class="line">ENV PG_VERSIOIN 9.3.4</span><br><span class="line">RUN curl -SL http://example.com/postgres-<span class="variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; ...</span><br><span class="line">ENV PATH /usr/<span class="built_in">local</span>/postgress-<span class="variable">$PG_MAJOR</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>将复制指定的<code>&lt;src&gt;</code>到容器中的<code>&lt;dest&gt;</code>。其中<code>&lt;src&gt;</code>可以是Dockerfile所在目录的一个相对露冷静(文件或目录)；也可以是一个URL；还可以是一个tar文件(自动解压为目录)。<br>格式：<code>ADD &lt;src&gt; &lt;dest&gt;</code></p><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>复制指定的<code>&lt;src&gt;</code>(为Dockerfile所在目录的相对路径，文件或目录)为容器中的<code>&lt;dest&gt;</code>。目标路径不存在，会自动创建。使用本地目录为源目录时，推荐使用COPY<br>格式：<code>COPY &lt;src&gt; &lt;dest&gt;</code></p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>配置容器启动后执行的命令，并且不可被docker run提供的参数覆盖。每个Dockerfile中只能有一个ENTRYPOINT，当指定多个ENTRYPOINT时，只有最后一个生效。<br>格式：<br><code>ENTRYPOINT [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code><br><code>ENTRYPOINT command param1 param2(shell中执行)</code></p><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。<br>格式：<code>VOLUME [&quot;/data&quot;]</code></p><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>指定运行容器时的用户名或UID，后续的RUN也会使用指定用户。当服务不需要管理员权限时，可以通过该命令指定运行用户，并且可以在之前创建所需要的用户，例如：<code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code>。要临时获取管理员权限可以使用gosu，而不推荐sudo。<br>格式：<code>USER daemon</code></p><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。可以使用多个WORKDIR指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。<br>格式：<code>WORKDIR /path/to/workdir</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WORDDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 则最终路径为/a/b/c</span></span><br></pre></td></tr></table></figure><h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><p>配置当所创建的镜像作为其他新创建镜像的基础镜像时所操作的指令。<br>格式：<code>ONBUILD [INSTRUCTION]</code></p><h3 id="Dockerfile创建镜像"><a href="#Dockerfile创建镜像" class="headerlink" title="Dockerfile创建镜像"></a>Dockerfile创建镜像</h3><p>编写完成Dockerfile后，通过<code>docker build</code>命令来创建镜像。<br>格式：<code>docker build [option] path</code><br>该命令将读取指定路径下(包括子目录)的Dockerfile，并将该路径下所有内容发给Docker服务端，由服务端来创建镜像。因此一般建议放置Dockerfile的目录为空目录。</p><p>通过.dockerignore文件(每行添加一条匹配模式)来让Docker忽略路径下的目录和文件。</p><p>通过<code>-t</code>选项可以指定镜像的标签信息。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫与信息提取</title>
      <link href="/2018/07/01/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96/"/>
      <url>/2018/07/01/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Python网络爬虫与信息提取"><a href="#Python网络爬虫与信息提取" class="headerlink" title="Python网络爬虫与信息提取"></a>Python网络爬虫与信息提取</h1><a id="more"></a><ul><li><p>文本工具类IDE</p><ul><li>IDLE — 自带、默认、常用（适用于Python入门）</li><li>Sublime Text — 第三方专用编程工具</li></ul></li><li><p>集成工具类IDE</p><ul><li>PyCharm</li><li>Anaconda &amp; Spyder</li></ul></li></ul><h2 id="Requests库入门"><a href="#Requests库入门" class="headerlink" title="Requests库入门"></a>Requests库入门</h2><h3 id="Request库的安装"><a href="#Request库的安装" class="headerlink" title="Request库的安装"></a>Request库的安装</h3><p>终端运行下列命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pip</span> install requests</span><br></pre></td></tr></table></figure><p>获得源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> git://github.com/kennethreitz/requests.git</span><br></pre></td></tr></table></figure><p>也可以下载tarball</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$curl</span> -OL https://github.com/requests/requests/tarball/master</span><br></pre></td></tr></table></figure><p>现在完成后，使用如下命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> requests</span><br><span class="line"><span class="variable">$pip</span> install .</span><br></pre></td></tr></table></figure><p>简单使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">print(r.status_code) <span class="comment"># 200</span></span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.text) <span class="comment"># baidu的html源码</span></span><br></pre></td></tr></table></figure><h3 id="Requests库的7个主要方法"><a href="#Requests库的7个主要方法" class="headerlink" title="Requests库的7个主要方法"></a>Requests库的7个主要方法</h3><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuonzvzjn7j30f409rt8v.jpg" alt="Requests7"></p><h4 id="Requests库的get"><a href="#Requests库的get" class="headerlink" title="Requests库的get()"></a>Requests库的get()</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsshyc4nm3j30g106vtdz.jpg" alt="屏幕快照 2018-06-30 上午12.06.26"></p><ul><li><p>使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url,params=<span class="keyword">None</span>,**kwargs)</span><br></pre></td></tr></table></figure><ul><li>url：拟获取页面的url链接</li><li>params：url中的额外参数，字典或字节流格式，可选</li><li>**kwargs：12个控制访问的参数</li></ul></li><li><p>Response对象的属性</p></li></ul><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuoo209mqjj30h006idg0.jpg" alt="requests_shuxing"></p><p>  <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fssi9kew65j30bv068wf1.jpg" alt="image-20180630001738309"></p><p>栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">'&lt;!DOCTYPE html&gt;\r\n&lt;!--STATUS OK--&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>r.encoding：如果header中不存在charset，则认为编码为ISO-8859-1</p></blockquote><ul><li><p>Requests库的异常</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuoo3lg19yj30mb07kglt.jpg" alt="exception_requests"></p></li><li><p>状态响应码status_code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="comment"># 为方便引用，Requests还有一个内置的状态码查询对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code == requests.codes.ok</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="comment"># 如果是一个错误请求，可以通过Response.raise_for_status()来抛出异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bad_r = requests.get(<span class="string">'http://httpbin.org/status/404'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bad_r.status_code</span><br><span class="line"><span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bad_r.raise_for_status()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"requests/models.py"</span>, line <span class="number">832</span>, <span class="keyword">in</span> raise_for_status</span><br><span class="line">    <span class="keyword">raise</span> http_error</span><br><span class="line">requests.exceptions.HTTPError: <span class="number">404</span> Client Error</span><br><span class="line"><span class="comment"># r.status == 200,当我们调用raise_for_status()时，得到的是</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.raise_for_status()</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure></li><li><p>爬取网页的通用代码框架TTP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,time=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment">#如果状态不是200，将引发HTTPError异常</span></span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>：</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">"__main__"</span>:</span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure></li></ul><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ul><li><p>HTTP，Hypertext Transfer Protocol，超文本传输协议。</p></li><li><p>HTTP是一个基于“请求与响应”模式的、装状态的应用层协议。</p></li><li><p>HTTP协议采用URL作为定位网络资源的标识</p></li><li><p>URL格式 <code>http://host[:port][path]</code> </p><ul><li>host：合法的Internet主机域名或IP地址</li><li>port：端口号，缺省端口为80</li><li>path：请求资源的路径</li></ul></li><li><p>HTTP协议对资源的操作</p><p>  <img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuoo6nadp0j30mb07kjrm.jpg" alt="source_http"></p><p>  <img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsued0uqbtj30l005dn17.jpg" alt="image-20180701153345007"></p></li><li><p>理解PATCH和PUT的区别</p><ul><li>采用PATCHA，仅向URL提交局部更新的请求</li><li>采用PUT，必须将所有字段一并提交到URL，未提交字段被删除</li></ul></li><li><p>Requests库的head()方法</p><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.head(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers</span><br><span class="line">&#123;<span class="string">'Cache-Control'</span>: <span class="string">'private, no-cache, no-store, proxy-revalidate, no-transform'</span>, <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>, <span class="string">'Content-Encoding'</span>: <span class="string">'gzip'</span>, <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>, <span class="string">'Date'</span>: <span class="string">'Sun, 01 Jul 2018 07:38:20 GMT'</span>, <span class="string">'Last-Modified'</span>: <span class="string">'Mon, 13 Jun 2016 02:50:26 GMT'</span>, <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span>, <span class="string">'Server'</span>: <span class="string">'bfe/1.0.8.18'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p>Requests库的post()方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(<span class="string">'http://www.baidu.com/post'</span>,data = payload)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.text)</span><br><span class="line">&#123; <span class="comment"># 向URL POST一个字典，自动编码为form(表单)</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"form"</span>:&#123;</span><br><span class="line">        <span class="string">"key2"</span>:<span class="string">"value2"</span>,</span><br><span class="line">        <span class="string">"key1"</span>:<span class="string">"value2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Requests库的put()方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.put(<span class="string">"http://www.baidu.com/put',data = payload"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.text)</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">      &lt;head&gt;</span><br><span class="line">      &lt;title&gt;405 Method Not Allowed&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">      &lt;h1&gt;Method Not Allowed&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;The requested method PUT <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">for</span> the URL          /put<span class="string">',data=payload.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">  &lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Requests库主要方法解析"><a href="#Requests库主要方法解析" class="headerlink" title="Requests库主要方法解析"></a>Requests库主要方法解析</h3><ul><li><p>requests.request(method,url,**kwargs)</p><ul><li><p>method：请求方式，对应get/put/post等7种</p><ul><li>r = requests.request(‘GET’,url,*kwargs)</li><li>r = requests.request(‘HEAD’,url,*kwargs)</li><li>r = requests.request(‘POST’,url,*kwargs)</li><li>r = requests.request(‘PUT’,url,*kwargs)</li><li>r = requests.request(‘PATCH’,url,*kwargs)</li><li>r = requests.request(‘delete’,url,*kwargs)</li><li>r = requests.request(‘OPTIONS’,url,*kwargs)</li></ul></li><li><p>url：获取页面的url链接</p></li><li><p>**kwargs：控制访问参数，共13个</p><ul><li><p>params：字典或字节序列，作为参数增加到url种</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com/s'</span>,params=kv)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.url)</span><br><span class="line">http://www.baidu.com/s?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure></li><li><p>data：字典、字节序列或文件对象，作为Request的内容，向服务器提交资源时使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>,<span class="string">'http://www.baidu.com/s'</span>,data=kv)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>body = <span class="string">'主体内容'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>,<span class="string">'http://www.baidu.com/s'</span>,data=body)</span><br></pre></td></tr></table></figure></li><li><p>json：JSON格式的数据，作为Request的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>,<span class="string">'http://www.baidu.com/s'</span>,json=kv)</span><br></pre></td></tr></table></figure></li><li><p>headers：字典，HTTP定制头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hd = &#123;<span class="string">'user-agent'</span>:<span class="string">'Chrome/10'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>,<span class="string">'http://python123.io/ws'</span>,headers=hd)</span><br></pre></td></tr></table></figure></li><li><p>cookies：字典或CookieJar，Request中的cookie</p></li><li><p>auth：元组，支持HTTP认证功能</p></li><li><p>file：字典类型，传输文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fs = &#123;<span class="string">'file'</span>:open(<span class="string">'data.xls'</span>,<span class="string">'rb'</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>,<span class="string">'http://python123.io/ws'</span>,files=fs)</span><br></pre></td></tr></table></figure></li><li><p>timeout：设定超时时间，秒为单位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,timeout=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>proxies：字典类型，设定访问代理服务器，可以增加登录认证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pxs = &#123;<span class="string">'http'</span>:<span class="string">'http://user:pass@10.10.10.1:1234'</span>,<span class="string">'https'</span>:<span class="string">'https://10.10.10.1:4321'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,proxies=pxs)</span><br></pre></td></tr></table></figure></li><li><p>allow_redirects：True/False，默认为True，重定向开关</p></li><li><p>stream：True/False，默认为True，获取内容立即下载开关</p></li><li><p>verify：True/False，默认为True，认证SSL证书开关</p></li><li><p>cert：本地SSL证书路径</p></li></ul></li></ul></li></ul><h2 id="网络爬虫的盗亦有道"><a href="#网络爬虫的盗亦有道" class="headerlink" title="网络爬虫的盗亦有道"></a>网络爬虫的盗亦有道</h2><ul><li>网络爬虫的尺寸</li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsuhzdxon1j30oz07s0u3.jpg" alt="img"></p><ul><li><p>网络爬虫的法律风险</p><ul><li>服务器上的数据有产权归属</li><li>网络爬虫获取数据后牟利将带来法律风险</li></ul></li><li><p>网络爬虫泄露数据</p></li><li><p>网络爬虫的限制</p><ul><li>来源审查：判断User-Agent进行限制<ul><li>检查来访HTTP协议头的User-Agent域，只响应浏览器或友好爬虫的访问</li></ul></li><li>发布公告：Robots协议<ul><li>告知所有爬虫网站的爬取策略，要求爬虫遵守</li></ul></li></ul></li><li><p>Robots协议（Robots Exclusion Standard 网络爬虫排除标准）</p><ul><li><p>作用：网站告知网络爬虫哪些页面可以抓取，哪些不行 </p></li><li><p>形式：在网站根目录下的robots.txt文件</p></li><li><p><a href="https://www.jd.com/rboots.txt" target="_blank" rel="noopener">https://www.jd.com/rboots.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">User-agent: * </span><br><span class="line">Disallow: /?* </span><br><span class="line">Disallow: /pop/*.html </span><br><span class="line">Disallow: /pinpai/*.html?* </span><br><span class="line">User-agent: EtaoSpider </span><br><span class="line">Disallow: / </span><br><span class="line">User-agent: HuihuiSpider </span><br><span class="line">Disallow: / </span><br><span class="line">User-agent: GwdangSpider </span><br><span class="line">Disallow: / </span><br><span class="line">User-agent: WochachaSpider </span><br><span class="line">Disallow: /</span><br><span class="line"># 注释 * 代表所有 /代表根目录</span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure></li><li><p>遵守方式</p><ul><li>网络爬虫：自动或人工识别robots.txt，再进行内容爬取</li><li>约束性：Robots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险</li></ul></li><li><p>理解</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsuinx4kc6j30np05wgmm.jpg" alt="img"></p></li></ul></li></ul><h2 id="Requests库爬取实例"><a href="#Requests库爬取实例" class="headerlink" title="Requests库爬取实例"></a>Requests库爬取实例</h2><h3 id="实例1：京东商品页面的爬取"><a href="#实例1：京东商品页面的爬取" class="headerlink" title="实例1：京东商品页面的爬取"></a>实例1：京东商品页面的爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://item.jd.com/2967929.html'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[:<span class="number">1000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'爬取失败'</span>)</span><br></pre></td></tr></table></figure><h3 id="实例2：亚马逊商品的爬取"><a href="#实例2：亚马逊商品的爬取" class="headerlink" title="实例2：亚马逊商品的爬取"></a>实例2：亚马逊商品的爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"https://www.amazon.cn/dp/B00QJDOLIO/ref=lp_1536596071_1_1?s=amazon-devices&amp;ie=UTF8&amp;qid=1530439999&amp;sr=1-1"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">    r = requests.get(url,headers=kv)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_coding</span><br><span class="line">    print(r.text[<span class="number">1000</span>:<span class="number">2000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h3 id="实例3：百度和360搜索关键字提交"><a href="#实例3：百度和360搜索关键字提交" class="headerlink" title="实例3：百度和360搜索关键字提交"></a>实例3：百度和360搜索关键字提交</h3><ul><li>百度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'wd'</span>:keyword&#125;</span><br><span class="line">    r = requests.get(<span class="string">"http://www.baidu.com/s"</span>,params=kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    print(len(r.text))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><ul><li>360</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'q'</span>:keyword&#125;</span><br><span class="line">    r = requests.get(<span class="string">"http://www.so.com/s"</span>,params=kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    print(len(r.text))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h3 id="实例4：网络图片的爬取和存储"><a href="#实例4：网络图片的爬取和存储" class="headerlink" title="实例4：网络图片的爬取和存储"></a>实例4：网络图片的爬取和存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">root = <span class="string">"/Users/entercoder/Documents/123.jpg"</span></span><br><span class="line">url = <span class="string">"https://ws2.sinaimg.cn/large/006tNc79gy1fsuinx4kc6j30np05wgmm.jpg"</span></span><br><span class="line">path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">        os.mkdir(root)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(<span class="string">"save successful"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"file already exists"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"download fail"</span>)</span><br></pre></td></tr></table></figure><h3 id="实例5：IP地址归属地自动查询"><a href="#实例5：IP地址归属地自动查询" class="headerlink" title="实例5：IP地址归属地自动查询"></a>实例5：IP地址归属地自动查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://ip138.com/ips138.asp?ip="</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url + <span class="string">'202.204.80.112'</span>)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[<span class="number">-500</span>:])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup入门"><a href="#BeautifulSoup入门" class="headerlink" title="BeautifulSoup入门"></a>BeautifulSoup入门</h2><h3 id="BeautifulSoup库的安装"><a href="#BeautifulSoup库的安装" class="headerlink" title="BeautifulSoup库的安装"></a>BeautifulSoup库的安装</h3><ul><li><p>使用pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pip3</span> install BeautifulSoup4</span><br></pre></td></tr></table></figure></li><li><p>源码安装</p><ul><li><p><a href="http://www.crummy.com/software/BeautifulSoup/download/4.x/" target="_blank" rel="noopener">下载源码</a></p></li><li><p>通过setup.py安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Python</span> setup.py install</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装解析器</p><ul><li><p>lxml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pip3</span> install lxml</span><br></pre></td></tr></table></figure></li><li><p>html5lib</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pip3</span> install html5lib</span><br></pre></td></tr></table></figure></li></ul></li><li><p>主要解析器及使用方法</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuoo8mjummj30mb067mx7.jpg" alt="method"></p></li><li><p>测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'https://python123.io/ws/demo.html'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 需要解析的html格式的内容和解析器</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.prettify())</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   This <span class="keyword">is</span> a python demo page</span><br><span class="line">  &lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;p class="title"&gt;</span><br><span class="line">   &lt;b&gt;</span><br><span class="line">    The demo python introduces several python courses.</span><br><span class="line">   &lt;/b&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class="course"&gt;</span><br><span class="line">   Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line">   &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;</span><br><span class="line">    Basic Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;</span><br><span class="line">    Advanced Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   .</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="BeautifulSoup库的基本元素"><a href="#BeautifulSoup库的基本元素" class="headerlink" title="BeautifulSoup库的基本元素"></a>BeautifulSoup库的基本元素</h3><ul><li><p>BeautifulSoup库是解析、遍历、维护“标签树”的功能库</p></li><li><p>BeautifulSoup类的基本元素</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuoo961ekjj30ma06h0sy.jpg" alt="beautifulsoup"></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsuqg0h7bvj30nb09d3zm.jpg" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://python123.io/ws/demo.html"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.title</span><br><span class="line">&lt;title&gt;This is a python demo page&lt;/title&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag = soup.a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.name</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.parent.name</span><br><span class="line"><span class="string">'p'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.parent.parent.name</span><br><span class="line"><span class="string">'body'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag.attrs</span><br><span class="line">&#123;<span class="string">'href'</span>: <span class="string">'http://www.icourse163.org/course/BIT-268001'</span>, <span class="string">'class'</span>: [<span class="string">'py1'</span>], <span class="string">'id'</span>: <span class="string">'link1'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag.attrs[<span class="string">'class'</span>]</span><br><span class="line">[<span class="string">'py1'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag.attrs[<span class="string">'href'</span>]</span><br><span class="line"><span class="string">'http://www.icourse163.org/course/BIT-268001'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tag.attrs)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(tag)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">soup</span>.<span class="title">a</span>.<span class="title">string</span></span></span><br><span class="line"><span class="class">'<span class="title">Basic</span> <span class="title">Python</span>'</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">soup</span>.<span class="title">p</span>.<span class="title">string</span></span></span><br><span class="line"><span class="class">'<span class="title">The</span> <span class="title">demo</span> <span class="title">python</span> <span class="title">introduces</span> <span class="title">several</span> <span class="title">python</span> <span class="title">courses</span>.'</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(soup.p.string)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; newsoup = BeautifulSoup("&lt;b&gt;&lt;!-- This is a comment --&gt;&lt;/b&gt;&lt;p&gt;This is not a comment&lt;/p&gt;","html.parser")</span><br><span class="line"><span class="comment"># 不常用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newsoup.b.string</span><br><span class="line"><span class="string">' This is a comment '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(newsoup.b.string)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Comment</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">newsoup</span>.<span class="title">p</span>.<span class="title">string</span></span></span><br><span class="line"><span class="class">'<span class="title">This</span> <span class="title">is</span> <span class="title">not</span> <span class="title">a</span> <span class="title">comment</span>'</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(newsoup.p.string)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="基于bs4库的HTML内容遍历方法"><a href="#基于bs4库的HTML内容遍历方法" class="headerlink" title="基于bs4库的HTML内容遍历方法"></a>基于bs4库的HTML内容遍历方法</h3><ul><li><p>遍历方式</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsuqjfmvegj30no08ojse.jpg" alt="img"></p><ul><li><p>标签树的下行遍历</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuoob3mfdyj30m904ddfv.jpg" alt="tag_tree"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.head</span><br><span class="line">&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.head.contents</span><br><span class="line">[&lt;title&gt;This is a python demo page&lt;/title&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.body.contents</span><br><span class="line">['\n', &lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;, '\n', &lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;, '\n']</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(soup.body.contents)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.body.contents[<span class="number">1</span>]</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="comment"># 遍历儿子节点</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">    print(child)</span><br><span class="line"><span class="comment"># 遍历子孙节点</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">    print(children)</span><br></pre></td></tr></table></figure></li><li><p>标签树的上行遍历</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuoodamsj0j30m803c746.jpg" alt="tag_tree_up"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.title.parent</span><br><span class="line">&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.html.parent</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.parent</span><br><span class="line"><span class="comment"># 标签树的上行遍历</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">      <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            print(parent)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(parent.name)</span><br></pre></td></tr></table></figure></li><li><p>标签树的平行遍历</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuoodfxtxgj30m905gaa8.jpg" alt="tag"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.next_sibling</span><br><span class="line"><span class="string">' and '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.next_sibling.next_sibling</span><br><span class="line">&lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.previous_sibling</span><br><span class="line"><span class="string">'Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.previous_sibling.previous_sibling</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签树的平行遍历</span></span><br><span class="line"><span class="comment"># 遍历后续节点</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings</span><br><span class="line">  print(sibling)</span><br><span class="line"><span class="comment"># 遍历前续节点</span></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure></li><li><p>总结</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fsurizrbltj30ns0bfgne.jpg" alt="img"></p></li></ul></li></ul><h3 id="基于bs4库的HTML格式输出"><a href="#基于bs4库的HTML格式输出" class="headerlink" title="基于bs4库的HTML格式输出"></a>基于bs4库的HTML格式输出</h3><ul><li><p>prettify()方法可以格式化输出HTML文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.prettify()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.prettify())</span><br></pre></td></tr></table></figure></li></ul><h2 id="信息标记的三种形式"><a href="#信息标记的三种形式" class="headerlink" title="信息标记的三种形式"></a>信息标记的三种形式</h2><ul><li><p>三种形式</p><ul><li>XML – eXtensible Markup Language</li><li>JSON – JavaScript Object Notation</li><li>YAML – </li></ul></li><li><p>三种信息标记形式的比较</p></li><li><p>信息提取的一般方法</p></li><li><p>基于bs4库的HTML内容查找方法</p><ul><li><p>&lt;&gt;.find_all(name,attrs,recursive,string,**kwargs) 返回一个列表类型，存储查找结果</p><ul><li><p>name：对标签名称的检索字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;, &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all([<span class="string">'a'</span>,<span class="string">'b'</span>])</span><br><span class="line">[&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;, &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;, &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="keyword">True</span>):</span><br><span class="line">  print(tag.name)</span><br><span class="line">html</span><br><span class="line">head</span><br><span class="line">title</span><br><span class="line">body</span><br><span class="line">p</span><br><span class="line">b</span><br><span class="line">p</span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.compile(<span class="string">'b'</span>)):</span><br><span class="line">  print(tag.name)</span><br><span class="line">body</span><br><span class="line">b</span><br></pre></td></tr></table></figure></li><li><p>attrs：对标签属性值的检索字符窜，可标注属性检索</p></li><li><p>recursive：是否对子孙全部检索，默认True</p></li><li><p>string：\&lt;&gt;…\&lt;/&gt;中字符串区域的检索字符串</p></li></ul></li><li><p>\<tag>(…)等价于\<tag>.find_all(…) </tag></tag></p></li><li><p>soup(…)等价于soup.find_all(…)</p></li><li><p>七个常用扩展方法</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuoolf9cgsj30mc08mwez.jpg" alt="method_7"></p></li></ul></li></ul><h3 id="实例1：中国大学排名定向爬虫"><a href="#实例1：中国大学排名定向爬虫" class="headerlink" title="实例1：中国大学排名定向爬虫"></a>实例1：中国大学排名定向爬虫</h3><ul><li><p>功能描述</p><ul><li>输入：大学排名URL连接</li><li>输出：大学排名信息的屏幕输出（排名，大学名称，总分）</li><li>技术路线：<strong>requests-bs4</strong></li><li>定向爬去：仅对输入URL进行爬取，不扩展爬取</li></ul></li><li><p>程序的结构设计</p><ol><li>从网络上获取大学排名网页内容 – getHTMLText()</li><li>提取网页内容中信息到合适的数据结构 – fillUnivList()</li><li>利用数据结构展示并输出结果 – fillUnivList()</li></ol></li><li><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"except"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr,bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">'td'</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"排名"</span>, <span class="string">"学校"</span>, <span class="string">"分数"</span>,chr(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(tplt.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">'http://zuihaodaxue.com/zuihaodaxuepaiming2018.html'</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo, html)</span><br><span class="line">    printUnivList(uinfo, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式是用来简洁表达一组字符串的表达式。</p><ul><li><p>编译：将符合正则表达式语法的字符串转换成正则表达式特征</p></li><li><p>语法</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuoofze618j30mb0g0gmd.jpg" alt="yufa"></p></li></ul><h3 id="Re库的基本使用"><a href="#Re库的基本使用" class="headerlink" title="Re库的基本使用"></a>Re库的基本使用</h3><p>Re库是Python的标准库，主要用于字符串匹配，调用方式：import re</p><ul><li><p>正则表达式的表示类型</p><ul><li>raw string类型（原生字符串类型）</li><li>string类型</li></ul></li><li><p>Re库主要功能函数</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuoogavtpkj30ma07jmxk.jpg" alt="re"></p><ul><li><p>re.search(pattern,string,flags=0)</p><ul><li><p>pattern：正则表达式的字符串或原生字符串表示</p></li><li><p>string：待匹配字符串</p></li><li><p>flags：正则表达式使用时的控制标记</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuooiba5jcj30md04g3ym.jpg" alt="flags"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'bit 100081'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line">  print(match.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">100081</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>re.match(pattern,string,flags=0)</p><ul><li><p>pattern：正则表达式的字符串或原生字符串表示</p></li><li><p>string：待匹配字符串</p></li><li><p>flags：正则表达式使用时的控制标记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'100081 bit'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>re.findall(pattern.string.flags=0)</p><ul><li><p>pattern：正则表达式的字符串或原生字符串表示</p></li><li><p>string：待匹配字符串</p></li><li><p>flags：正则表达式使用时的控制标记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = re.findall(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'bit100081 tsu 100084'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">'100081'</span>, <span class="string">'100084'</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>re.split(pattern,string,maxsplit=0,flags=0)</p><ul><li><p>pattern：正则表达式的字符串或原生字符串表示</p></li><li><p>string：待匹配字符串</p></li><li><p>maxsplit：最大分个数，剩余部分作为最后一个元素输出</p></li><li><p>flags：正则表达式使用时的控制标记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'bit100081 tsu100084'</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">'bit'</span>, <span class="string">' tsu100084'</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>re.finditer(pattern,string,flags=0)</p><ul><li><p>pattern：正则表达式的字符串或原生字符串表示</p></li><li><p>string：待匹配字符串</p></li><li><p>flags：正则表达式使用时的控制标记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'bit100081 tsu100084'</span>):</span><br><span class="line">  <span class="keyword">if</span> m:</span><br><span class="line">    print(m.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">100081</span></span><br><span class="line"><span class="number">100084</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>re.sub(pattern,repl,string,count=0,flags=0)</p><ul><li><p>pattern：正则表达式的字符串或原生字符串表示</p></li><li><p>repl：替换匹配字符串的字符串</p></li><li><p>string：待匹配字符串</p></li><li><p>count：匹配的最大替换次数</p></li><li><p>flags：正则表达式使用时的控制标记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re = re.sub(<span class="string">r'[123]'</span>,<span class="string">'456'</span>,<span class="string">'1237878712398798123'</span>,count=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re</span><br><span class="line"><span class="string">'45645637878712398798123'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Re库的另一种等价用法</p><ul><li><p>函数式用法：一次性操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'bit 100081'</span>)</span><br></pre></td></tr></table></figure></li><li><p>面向对象用法：编译后多次操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = pat.search(<span class="string">'bit 100081'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>regex = re.compile(pattern,flags=0) – 将正则表达式的字符串形式编译成正则表达式对象</p><ul><li>regex.search()</li><li>regex.match()</li><li>regex.findall()</li><li>regex.split()</li><li>regex.finditer()</li><li>regex.sub()</li></ul></li><li><p>Re库的Match函数</p><ul><li><p>Match对象的属性</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuoonju4x1j30md05k74a.jpg" alt="match_"></p></li><li><p>Match对象的方法</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuoopmpp8pj30m905gdft.jpg" alt="match_method"></p></li></ul></li><li><p>Re库的贪婪匹配和最小匹配</p><ul><li><p>贪婪匹配：Re库默认采用贪婪匹配，即输出匹配最长的子串</p></li><li><p>最小匹配</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuooqmcxj4j30mb05jt8q.jpg" alt="min_"></p></li></ul></li></ul><h3 id="实例2-淘宝商品比价定向爬虫"><a href="#实例2-淘宝商品比价定向爬虫" class="headerlink" title="实例2 淘宝商品比价定向爬虫"></a>实例2 淘宝商品比价定向爬虫</h3><ul><li><p>功能描述</p><ul><li>目标：获取淘宝搜索页面的信息，提取其中的商品名称和价格</li><li>理解：淘宝的搜索接口和翻页的处理</li><li>技术路线：requests-re</li></ul></li><li><p>程序的设计结构</p><ol><li>提交商品搜索请求，循环获取页面</li><li>对于每个商品，提取商品名称和价格信息</li><li>将信息输出到屏幕上</li></ol></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span><span class="params">(ilt,html)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r'"view_price":"[\d.]*"'</span>,html)</span><br><span class="line">        tlt = re.findall(<span class="string">r'"raw_title":".*?"'</span>,html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt)):</span><br><span class="line">            price = eval(plt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            title = eval(tlt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            ilt.append([price,title])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodsList</span><span class="params">(ilt)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"xuhao"</span>,<span class="string">"jiage"</span>,<span class="string">"shangpin name"</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        print(tplt.format(count,g[<span class="number">0</span>],g[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    goods = <span class="string">'shubao'</span></span><br><span class="line">    depth = <span class="number">2</span></span><br><span class="line">    start_url = <span class="string">'https://s.taobao.com/search?q=%'</span> + goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">'&amp;s='</span> + str(<span class="number">44</span>*i)</span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(infoList,html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></li></ul><h3 id="实例3-股票数据定向爬虫"><a href="#实例3-股票数据定向爬虫" class="headerlink" title="实例3 股票数据定向爬虫"></a>实例3 股票数据定向爬虫</h3><ul><li><p>功能描述</p><ul><li>目标：获取上交所和深交所所有股票的名称和交易信息</li><li>输出：保存到文件中</li><li>技术路线：requests-bs4-re</li></ul></li><li><p>程序结构设计</p><ol><li>从东方财富网选取股票列表</li><li>根据股票列表逐个到百度股票获取个股信息</li><li>将结果存储到文件</li></ol></li><li><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url,code=<span class="string">'utf-8'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = code</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockURL)</span>:</span></span><br><span class="line">    html = getHTMLText(stockURL)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            lst.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockURL, fpath)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</span><br><span class="line">        url = stockURL + stock + <span class="string">".html"</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> html == <span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            infoDict = &#123;&#125;</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">            stockInfo = soup.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'stock-bets'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            name = stockInfo.find(attrs=&#123;<span class="string">'class'</span>:<span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">            infoDict.update(&#123;<span class="string">'stockname'</span>: name.text.split()[<span class="number">0</span>]&#125;)</span><br><span class="line"></span><br><span class="line">            keyList = stockInfo.find_all(<span class="string">'dt'</span>)</span><br><span class="line">            valueList = stockInfo.find_all(<span class="string">'dd'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst)):</span><br><span class="line">                <span class="comment"># if i == 20:</span></span><br><span class="line">                <span class="comment">#     break</span></span><br><span class="line">                key = keyList[i].text</span><br><span class="line">                val = valueList[i].text</span><br><span class="line">                infoDict[key] = val</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(str(infoDict) + <span class="string">'\n'</span>)</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">                print(<span class="string">'\r当前速度：&#123;:.2f&#125;%'</span>.format(count*<span class="number">100</span>/len(lst)), end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">            print(<span class="string">'\r当前速度：&#123;:.2f&#125;%'</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">''</span>)</span><br><span class="line">            <span class="comment"># traceback.print_exc()</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stock_list_url = <span class="string">"http://quote.eastmoney.com/stocklist.html"</span></span><br><span class="line">    stock_info_url = <span class="string">"https://gupiao.baidu.com/stock/"</span></span><br><span class="line">    output_file = <span class="string">"/Users/entercoder/Documents/stock.txt"</span></span><br><span class="line">    slist = []</span><br><span class="line">    getStockList(slist, stock_list_url)</span><br><span class="line">    getStockInfo(slist, stock_info_url, output_file)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2018/04/05/JavaScript/"/>
      <url>/2018/04/05/JavaScript/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaScript，通常缩写为JS，是一种高级的，解释执行的编程语言。 JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。 它提供语法来操控文本、数组、日期以及正则表达式等，不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。</p></blockquote><a id="more"></a><h1 id="JavaScript笔记-一"><a href="#JavaScript笔记-一" class="headerlink" title="JavaScript笔记(一)"></a>JavaScript笔记(一)</h1><h2 id="一、JavaScript简介"><a href="#一、JavaScript简介" class="headerlink" title="一、JavaScript简介"></a>一、JavaScript简介</h2><blockquote><p>JavaScript和ECMAScript通常都被人们用来表达相同的含义，但JavaScript的含义却比ECMA-262中规定的要多的多。</p></blockquote><p>完整的JavaScript实现由三个不同的部分组成</p><ul><li>核心(ECMAScript)</li><li>文档对象模型(DOM)</li><li>浏览器对象模型(BOM)</li></ul><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuqvork5jhj308303bmwy.jpg" alt="javascript"></p><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><blockquote><p>ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会）通过ECMA-262标准化的脚本程序设计语言。 这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。</p></blockquote><p>ECMA-262规定了ECMAScript语言的组成部分:</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>对象</li></ul><p>ECMAScript就是对实现该标准的各个方面内容的描述。JavaScript实现了ECMAScript，Adobe ActionScript同样也实现了ECMAScript。</p><h4 id="什么是ECMAScript兼容"><a href="#什么是ECMAScript兼容" class="headerlink" title="什么是ECMAScript兼容"></a>什么是ECMAScript兼容</h4><h3 id="文档对象模型-DOM"><a href="#文档对象模型-DOM" class="headerlink" title="文档对象模型(DOM)"></a>文档对象模型(DOM)</h3><p>文档对象模型(DOM，Document Object Model)是针对XML但经过扩展用于HTML的应用程序编程接口(API,Application Progrmaming Interface)。DOM把整个页面映射为一个多层节点结构。HTML或XML页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuqw7plym9j309f09idfo.jpg" alt="dom"></p><p>通过DOM创建的这个表示文档的树形图，开发人员可以控制页面的内容和结构。借助DOM提供的API，可以对节点进行删除、添加、替换或修改。</p><h3 id="浏览器对象模型"><a href="#浏览器对象模型" class="headerlink" title="浏览器对象模型"></a>浏览器对象模型</h3><p>浏览器对象模型(BOM，Browser Object Model)可以访问和操作浏览器窗口。开发人员使用BOM可以控制浏览器显示的页面的一部分。从根本上讲，BOM只处理浏览器窗口和框架；但习惯上吧所有针对浏览器的扩展算作是BOM的一部分。比如以下扩展：</p><ul><li>弹出新浏览器窗口的功能；</li><li>移动、缩放和关闭浏览器的功能；</li><li>提供浏览器详细信息的navigator对象；</li><li>提供浏览器所加载页面的详细信息的location对象；</li><li>提供用户显示器分辨率详细信息的screen对象；</li><li>对cookies的支持</li><li>项XMLHttpRequest和IE的ActiveXObject这样的自定义对象。</li></ul><h2 id="二、在HTML中使用JavaScript"><a href="#二、在HTML中使用JavaScript" class="headerlink" title="二、在HTML中使用JavaScript"></a>二、在HTML中使用JavaScript</h2><h3 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="&lt;script&gt;元素"></a><code>&lt;script&gt;</code>元素</h3><p>使用<code>&lt;script&gt;</code>元素可以向HTML页面中插入JavaScript。HTML4.01为<code>&lt;script&gt;</code>定义了6个属性：</p><ul><li>async：可选。表示应该立即下载脚本，但不妨碍页面中的其他操作。只对外部脚本文件有效。</li><li>charset：可选。通过src属性指定代码的字符集，大多数浏览器会忽略它的值。</li><li>defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。</li><li>language：已废弃。</li><li>src：可选。表示包含要执行代码的外部文件。</li><li>type：可选。可以看成是language的替代属性；表示编写代码使用的脚本语言的内容类型(也称为MIME类型。))</li></ul><p>使用<code>&lt;script&gt;</code>元素的两种方式：嵌入式和外本文件，在使用<code>&lt;script&gt;</code>元素嵌入JavaScript代码时，只须魏<code>&lt;script&gt;</code>指定type属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"Hi!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>包含在<code>&lt;script&gt;</code>元素的代码将从上至下依次解释。</p><p>通过<code>&lt;script&gt;</code>元素来包含外部JavaScript文件，必须包含src属性。这个属性的值指向外部JavaScript文件的链接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"example.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>一般外部的JavaScript文件带有.js扩展名。但不是必须的，李兰器不会检查包含JavaScript文件的扩展名。因此，也可以使用JSP、PHP或其他服务器端语言动态生成JavaScript代码。</p></blockquote><p>外部文件example.js将被加载到当前页面中。与解析嵌入式JavaScript代码一样，在解析外部JavaScript文件(包括下载该文件)时，页面的处理会暂时停止。如果是在XHTML文档中，可以省略<code>&lt;/script&gt;</code>标签。</p><p><strong>带有src属性的<code>&lt;script&gt;</code>元素会忽略<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标签内的代码，scr属性也可以包含外部域的JavaScript文件。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://www.somewhere.com/afile.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="标签的位置"><a href="#标签的位置" class="headerlink" title="标签的位置"></a>标签的位置</h4><p><code>&lt;script&gt;</code>元素应该放在页面的<code>&lt;head&gt;</code>元素中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样意味着必须等到全部的JavaScript代码都被下载、解析和执行完成后才开始呈现页面的内容。若JavaScript代码很多，这将会导致浏览器在呈现页面时出现明显的延迟，因此现代的Web应用程序一般把全部JavaScript引用放在<code>&lt;body&gt;</code>元素中页面内容的后面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="延迟脚本"><a href="#延迟脚本" class="headerlink" title="延迟脚本"></a>延迟脚本</h4><p>HTML4.01为<code>&lt;script&gt;</code>标签定义了defer属性。这个属性表明脚本在执行时不会影响页面的构造。即脚本会被延迟到整个页面都解析完毕后再运行。浏览器会立即下载，但延迟执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">defer</span>=<span class="string">"defer"</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>延迟脚本并不一定按照顺序执行，因此最好只包含一个延迟脚本。且defer属性只适用于外部脚本文件。HTML5的实现会默认忽略嵌入脚本设置的defer属性。</p><blockquote><p>在XHTML文档中，要把defer属性设置为defer=”defer”。</p></blockquote><h4 id="异步脚本"><a href="#异步脚本" class="headerlink" title="异步脚本"></a>异步脚本</h4><p>HTML5为<code>&lt;script&gt;</code>元素定义了async属性。async只适用于外部脚本文件，浏览器会立即下载文件，但标记为async的脚本并不保证按照指定它们的先后顺序执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在以上代码中，第二个脚本可能会在第一个脚本执行前执行。因此要确保两者之间互不依赖。指定async属性目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。异步脚本不要再加载期间修改DOM。</p><blockquote><p>在XHTML文档中，要把async属性设置为async=”async”。</p></blockquote><h4 id="在XHTML中的用法"><a href="#在XHTML中的用法" class="headerlink" title="在XHTML中的用法"></a>在XHTML中的用法</h4><p>XHTML(Extensible HyperText Markup Language，可扩展超文本标记语言)是将HTML作为XML的应用重新定义的一个标准。XHTML代码的规则必HTML要严格得多，而且直接影响嵌入的JavaScript代码是否有效。</p><h3 id="嵌入代码与外部文件"><a href="#嵌入代码与外部文件" class="headerlink" title="嵌入代码与外部文件"></a>嵌入代码与外部文件</h3><p>使用外部文件引入JavaScript代码的优点：</p><ul><li>可维护性：遍及不同HTML页面的JavaScript会造成维护问题。</li><li>可缓存：浏览器可以根据具体的设置换轮链接的所有外部JavaScript文件。</li><li>适应未来：HTML和XHTML包含外部文件的语法是相同的。</li></ul><h3 id="lt-noscript-gt-元素"><a href="#lt-noscript-gt-元素" class="headerlink" title="&lt;noscript&gt;元素"></a><code>&lt;noscript&gt;</code>元素</h3><p>若浏览器不支持JavaScript时，可以使用<code>&lt;noscript&gt;</code>元素显示替代的内容。这个元素可以出现在任何HTML元素(<code>&lt;script&gt;</code>元素除外)。包含在<code>&lt;noscript&gt;</code>元素的内容只在浏览器不支持脚本或脚本被禁用的情况下再回显示出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>本页面需要浏览器支持(启用)JavaScript。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、基本概念"><a href="#三、基本概念" class="headerlink" title="三、基本概念"></a>三、基本概念</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>区分大小写</li><li>标识符：<ul><li>第一个字符必须是字母、下划线(_)或美元符号($)。</li><li>其他字符可以使字母、下划线、美元符号或数字。</li><li>ECMAScript标识符采用驼峰大小写格式。</li></ul></li><li>注释<ul><li>//单行注释</li><li>/<em> 多行注释  </em>/</li></ul></li><li>严格模式：在函数内部上方包含<code>&quot;use strict&quot;;</code>编译指示。</li><li>语句<ul><li>语句结尾建议使用一个分号结尾。</li><li>始终在控制语句中使用代码块——即使代码块中只有一条语句。</li></ul></li></ul><blockquote><p>不能把关键字、保留字、true、false和null用作标识符。</p></blockquote><h3 id="关键字和保留字"><a href="#关键字和保留字" class="headerlink" title="关键字和保留字"></a>关键字和保留字</h3><p>关键字：用于表示语句的开始或结束，或者用于执行特定操作等。<br><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuubt4bzkaj30du042dfq.jpg" alt="keywork"></p><p>保留字：保留字在JavaScript中还没有任何特定的用途，但他们有可能在将来被用作关键字。<br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuububz8wqj30db01fmwy.jpg" alt="keep"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>ECMAScript的变量是松散类型的(可以用来保存任何类型的数据)。即每个变量仅仅是一个用于保存值得占位符。定义变量时使用var操作符。<code>var message;</code>,未经过初始化的变量会保存一个特殊的值——undefined。ECMAScript支持直接初始化变量<code>var message = &quot;hi&quot;;</code></p><blockquote><p>用var操作符定义的变量将成为定义该变量的作用域中的局部变量，该变量在函数退出后就会被销毁。</p></blockquote><p>省略var操作符创建的变量为全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    message = <span class="string">"hi"</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure><p>可以使用一条语句定义多个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"hi"</span>,</span><br><span class="line">    found = <span class="literal">false</span>,</span><br><span class="line">    age = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>5中简单数据类型(基本数据类型)：</p><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li></ul><p>复杂数据类型——Object(由一组无序的键值对组成)</p><h4 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h4><p>对值使用typeof操作符可能返回下列某个字符串：</p><ul><li>“undefined” —— 如果这个值未定义；</li><li>“boolean” —— 如果这个值是布尔值；</li><li>“string” —— 如果这个值是字符串；</li><li>“number” —— 如果这个值是树脂；</li><li>“object” —— 如果这个值是对象或null；</li><li>“function” —— 如果这个值是函数。</li></ul><h4 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h4><p>Undefined类型只有一个值，即特殊的undefined。使用var声明变量但却未初始化，这个变量的值就是undefined。对未初始化和未声明的变量执行typeof操作符都可以返回undefined值。</p><h4 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h4><p>Null类型也只有一个值，即特殊的null。null值表示一个空对象指针，使用typeof检测时返回”object”。若定义的变量用于保存对象，那么最好将变量初始化为null值而不是其他。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="一院操作符"><a href="#一院操作符" class="headerlink" title="一院操作符"></a>一院操作符</h4><h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><h4 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h4><h4 id="乘兴操作符"><a href="#乘兴操作符" class="headerlink" title="乘兴操作符"></a>乘兴操作符</h4><h4 id="加性操作符"><a href="#加性操作符" class="headerlink" title="加性操作符"></a>加性操作符</h4><h4 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h4><h4 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h4><h4 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h4><h4 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h4><h4 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h4><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><h4 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h4><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><h4 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h4><h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h4 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h4><p>#### </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS层叠样式表</title>
      <link href="/2018/03/31/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
      <url>/2018/03/31/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h1><blockquote><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p></blockquote><a id="more"></a><p><img src="https://ws1.sinaimg.cn/large/e8c3586egy1fpxkpjnodkj220o28vwuu" alt="CSS层叠样式表"></p><h2 id="使用CSS样式的方式"><a href="#使用CSS样式的方式" class="headerlink" title="使用CSS样式的方式"></a>使用CSS样式的方式</h2><ul><li>HTML声明标签<code>&lt;!DOCTYPE&gt;</code><ul><li>定义与用法<ul><li><code>&lt;!DOCTYPE&gt;</code>必须是HTML文档的第一行</li><li><code>&lt;!DOCTYPE&gt;</code>声明不是HTML标签，它是指示web浏览器关于页面使用哪个浏览器版本进行编写的指令</li><li></li></ul></li><li>各个版本的声明<ul><li>HTML5 <code>&lt;!DOCTYPE HTML&gt;&lt;meta charset=&quot;utf-8&quot;&gt;</code></li><li>HTML4.01</li></ul></li></ul></li><li>内链样式表<ul><li>格式：<code>&lt;body style=&quot;backgroudcolor:green;font-size:20px&quot;&gt;&lt;/body&gt;</code></li></ul></li><li>嵌入式样式表<ul><li>语法格式：<code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;</code></li><li>样式放在<head></head>中</li></ul></li><li>引入式样式表<ul><li>语法格式：<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</code></li></ul></li></ul><h2 id="定义样式表"><a href="#定义样式表" class="headerlink" title="定义样式表"></a>定义样式表</h2><ul><li><p>HTML标记定义</p><ul><li><code>&lt;p&gt;...&lt;/p&gt;</code></li><li>p{属性1:属性值;属性2:属性值}</li><li>p可以叫做选择器，定义标记中的内容执行其中的样式</li></ul></li><li><p>Class定义</p><ul><li>格式：<code>&lt;p class=&quot;p&quot;&gt;...&lt;/p&gt;</code></li><li>class选择器是以”.”开始的</li><li><code>.p{属性1:属性值;属性2:属性值}</code></li></ul></li><li>ID定义<ul><li>唯一选择器</li><li>格式：<code>&lt;p id=&quot;p&quot;&gt;...&lt;/p&gt;</code></li><li>ID选择器是以”#”开始的</li><li><code>#p{属性1:属性值;属性2:属性值}</code></li></ul></li><li>优先级问题<ul><li>ID &gt; CLASS &gt; HTML</li><li>同级时选择离元素最近的一个</li></ul></li><li>组合选择器(同时控制多个元素)<ul><li>选择器组合可以使用”.”隔开</li><li>例如：<code>h1,h2,h3 {color:red;font-size:14px}</code></li></ul></li><li>伪元素选择器<ul><li>a:link – 正常连接的样式</li><li>a:hover – 鼠标放上去的样式</li><li>a:active – 选择链接时的样式</li><li>a:visited – 已经访问过的链接的样式</li></ul></li></ul><blockquote><p>CSS注释：/<em> 注释内容 </em>/</p></blockquote><h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><ul><li>颜色属性<ul><li>color属性定义文本的颜色</li><li>color:green;</li><li>color:#ff6600(简写：color:#f60) – 红 绿 蓝</li><li>color:rgb(255,255,255)</li><li>color:rgba(255,255,255,1)</li></ul></li><li>字体属性<ul><li>font-size<ul><li>px</li><li>%</li><li>smaller</li><li>larger</li><li>inheritt – 继承父元素</li></ul></li><li>font-family<ul><li>多个字体使用”,”隔开，若字体不存在则直接使用下一个</li></ul></li><li>font-weight – 字体加粗<ul><li>normal – 400</li><li>bold – 700</li><li>bolder</li><li>lighter</li></ul></li><li>font-style –字体样式<ul><li>normal</li><li>italic – 斜体</li><li>oblique – 倾斜</li><li>inherit – 继承</li></ul></li><li>font-variant – 小型大写字母显示文本</li></ul></li><li>文本属性<ul><li>text-align – 横向排列</li><li>line-height – 文本行高<ul><li>%</li><li>数值</li></ul></li><li>text-indent – 首行缩进<ul><li>%</li><li>数值</li><li>inherit </li></ul></li><li>letter-space – 字符间距<ul><li>normal</li><li>length(可设置为负值)</li><li>inherit</li></ul></li><li>word-space – 单词间距<ul><li>normal</li><li>px</li><li>inherit</li></ul></li><li>direction – 文本方向<ul><li>ltr</li><li>rtl</li><li>inherit</li></ul></li><li>text-transform – 文本大小写<ul><li>capitalize – 每个单词以大写字母开头</li><li>uppercase</li><li>lowercase</li><li>inherit</li></ul></li></ul></li><li><p>背景属性</p><ul><li>背景颜色background-color</li><li>背景图片background-image<ul><li>格式：<code>background-image:url(图片路径)</code></li><li>background-image:none</li></ul></li><li>背景重复background-repeat<ul><li>格式：<code>background-repeat:repeat</code></li><li>repeat-x</li><li>repeat-y</li><li>no-repeat – 不重复</li></ul></li><li><p>背景位置background-position</p><ul><li>格式：<code>background-postion:(x) (y)</code></li><li>垂直方向默认居中</li><li>right</li><li>left</li><li>center</li><li>top</li><li>bottom</li><li>也可以用数值表示位置</li></ul></li><li><p>简写方式</p><ul><li>background:背景颜色 url(图像) 重复 位置</li><li>例：<code>background:#f60 url(image/bg.jpg) no-repeat top center</code></li></ul></li></ul></li><li>边框属性<ul><li>border-style – 边框风格<ul><li>单独定义某一方向<ul><li>border-bottom-style</li><li>border-top-style</li><li>border-left-style</li><li>border-right-style</li></ul></li><li>边框风格样式属性值<ul><li>none – 无边框</li><li>solid – 直线边框</li><li>dashed – 虚线边框</li><li>dotted – 点状边框</li><li>double – 双线边框</li></ul></li></ul></li><li>border-width<ul><li>单独定义某一方向</li><li>属性值<ul><li>thin</li><li>medium</li><li>thick</li><li>px</li><li>inherit</li></ul></li></ul></li><li>border-color<ul><li>单独定义某一方向</li><li>属性值<ul><li>rgb</li><li>rgba</li><li>十六进制</li><li>inherit</li></ul></li><li>属性值的四种情况<ul><li><code>border-color:red</code> – 上下左右红</li><li><code>border-color:red blue</code> – 上下红左右蓝</li><li><code>border-color:blue red blue</code> 上下蓝左右红</li><li><code>border-color:blue white black red</code> </li></ul></li></ul></li><li>简写方式 <code>border:solid 2px #f60</code></li></ul></li><li>列表属性<ul><li>list-style-type – 标记类型<ul><li>none – 无标记</li><li>disc – 实心圆</li><li>circle – 空心圆</li><li>square – 实心方框</li><li>decinal – 数字</li><li>…</li></ul></li><li>list-style-position – 标记的位置<ul><li>inside</li><li>outside(默认值)</li><li>inherit</li></ul></li><li>list-style-image – 设置图像列表标记<ul><li>URL</li><li>none</li><li>inherit</li></ul></li><li>简写方式：<code>list-style:square inside url(/image/1.jpg)</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标记语言</title>
      <link href="/2018/03/28/HTML%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/"/>
      <url>/2018/03/28/HTML%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML标记语言基础"><a href="#HTML标记语言基础" class="headerlink" title="HTML标记语言基础"></a>HTML标记语言基础</h1><blockquote><p>超文本标记语言(HTML)是一种用于创建网页的标准标记语言</p></blockquote><a id="more"></a><p><img src="https://ws1.sinaimg.cn/large/e8c3586egy1fpsyefgexxj22210p045m" alt="html思维导图"></p><blockquote><p>浏览器：Chrome<br>开发工具：IDEA</p></blockquote><h2 id="HTML的语法"><a href="#HTML的语法" class="headerlink" title="HTML的语法"></a>HTML的语法</h2><ul><li>什么是HTML标记语言 –&gt; 表示网页信息的符号标记语言</li><li><p>特色：</p><ul><li>可以设置文本格式</li><li>可以创建列表</li><li>可以插入图像和媒体</li><li>可以建立表格</li><li>超链接</li></ul></li><li><p>HTML的标记和他的属性</p><ul><li>保存格式<ul><li><code>.html</code></li><li><code>.htm</code></li><li><code>.xhtml</code></li></ul></li><li><p>标记和被标记的内容构建出HTML文档</p><ul><li><code>&lt;标记&gt;内容&lt;/标记&gt;</code></li></ul></li><li><p>标记的属性 –&gt; 用来控制内容的显示</p><ul><li>格式 <code>&lt;标记 属性1=&quot;属性值&quot; 属性2=&quot;属性值&quot;&gt;内容&lt;/标记&gt;</code></li><li>例如 <code>&lt;body bgcolor=&quot;red&quot;&gt;hello world&lt;/body&gt;</code></li></ul></li></ul></li><li>语法不区分字母大小写</li><li>文档注释<ul><li><code>&lt;!-- 注释内容 --&gt;</code></li></ul></li><li>代码格式</li><li>字符实体<ul><li>字符实体 –&gt; 在HTML中，某些字符是预留的，例如在HTML中不能使用小于号(&lt;)或大于号(&gt;)，因此想要正确显示预留字符，必须在HTML代码中使用字符实体。</li><li>常见字符实体见引用</li></ul></li></ul><blockquote><p>字符实体</p></blockquote><h2 id="HTML的基本机构"><a href="#HTML的基本机构" class="headerlink" title="HTML的基本机构"></a>HTML的基本机构</h2><ul><li><code>&lt;html&gt;</code>内容<code>&lt;/html&gt;</code><ul><li>HTML文档的文档标记，也称为HTML开始标记</li><li>功能：这对标记位于网页的最前端和最后端</li></ul></li><li><code>&lt;head&gt;</code>内容<code>&lt;/head&gt;</code><ul><li>HTML文件的头标记，也称为HTML头信息开始标记</li><li>功能：用来包含文件的基本信息，例如网页的标记、关键字</li><li>可以放<code>&lt;title&gt;&lt;/title</code>、<code>&lt;meta&gt;&lt;/meta&gt;</code>、<code>&lt;style&gt;&lt;/style&gt;</code>等。</li><li><head></head>标记内的内容不会再浏览器中显示</li></ul></li><li><code>&lt;title&gt;</code>内容<code>&lt;/title&gt;</code><ul><li>HTML文件的标题标记</li><li>功能：网页的主题，显示在浏览器的窗口的左上角</li><li><code>&lt;tilt&gt;&lt;/title&gt;</code>中不能包含其他标记</li></ul></li><li><code>&lt;body&gt;</code>内容<code>&lt;/body&gt;</code><ul><li>HTML文档的主体标记</li><li>功能：<code>&lt;body&gt;&lt;/body&gt;</code>是网页的主体部分，包含段落、标题、链接等标记。</li><li>常见属性：<ul><li>bgcolor – 设置背景颜色 <code>&lt;body bgcolor=&quot;red&quot;&gt;&lt;/body&gt;</code></li><li>text – 设置文本颜色 <code>&lt;body text=&quot;green&quot;&gt;&lt;/body&gt;</code></li><li>link – 设置连接颜色 <code>&lt;body link=&quot;blue&quot;&gt;&lt;/body&gt;</code></li><li>vlink – 已经访问了的链接颜色 <code>&lt;body vlink=&quot;yellow&quot;&gt;&lt;/body&gt;</code></li><li>alink – 正在被点击的链接颜色 <code>&lt;body alink=&quot;red&quot;&gt;&lt;/body&gt;</code></li></ul></li></ul></li><li><code>&lt;meta&gt;</code>内容<code>&lt;/meta&gt;</code><ul><li>页面的元信息(meta-information)</li><li>功能：提供有关页面的元信息，比如针对搜索引擎和更新频度的描述和关键词</li><li>必须属性：content，定义name属性相关的元信息</li><li>常见的属性<ul><li>author</li><li>keywords</li><li>description</li><li>others</li></ul></li><li><code>&lt;meta name=&quot;keywords&quot; content=&quot;test&quot;&gt;</code></li><li>必须放在head元素里面</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"helloworld"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"entercoder1993"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"this is html document"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"others"</span> <span class="attr">content</span>=<span class="string">"i don't know write what"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"gray"</span> <span class="attr">text</span>=<span class="string">"red"</span> <span class="attr">link</span>=<span class="string">"blue"</span> <span class="attr">alink</span>=<span class="string">"yellow"</span> <span class="attr">vlink</span>=<span class="string">"orange"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello  my html code<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span>&gt;</span>nihao<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- this is annotation --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://i8.mifile.cn/a1/pms_1527735134.03584233!560x560.jpg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文档设置标记"><a href="#文档设置标记" class="headerlink" title="文档设置标记"></a>文档设置标记</h2><h3 id="格式标记"><a href="#格式标记" class="headerlink" title="格式标记"></a>格式标记</h3><table><thead><tr><th>标记</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;br&gt;</code></td><td>强制换行标记</td><td>让图片、文字、表格显示在下一行</td></tr><tr><td><code>&lt;p&gt;</code></td><td>换段落标记</td><td></td></tr><tr><td><code>&lt;center&gt;</code></td><td>居中对齐标志</td><td>让段落或者文字相对于父标记居中显示</td></tr><tr><td><code>&lt;pre&gt;</code></td><td>预格式化标记</td><td>保留预先编排好的格式</td></tr><tr><td><code>&lt;li&gt;</code></td><td>列表项目标记</td><td>每一个列表使用一个<code>&lt;li&gt;</code>标记</td></tr><tr><td><code>&lt;ul&gt;</code></td><td>无序列表标记</td><td>配置列表项目标记使用</td></tr><tr><td><code>&lt;ol&gt;</code></td><td>有序列表标记</td><td>可以显示特定序号，有属性值type可以定义显示序号，属性value改变起始值</td></tr><tr><td><code>&lt;dl&gt;</code></td><td>定义型列表标记</td><td>对列表条目进行简短说明</td></tr><tr><td><code>&lt;dt&gt;</code></td><td>定义型列表标记</td><td>对列表条目进行简短说明</td></tr><tr><td><code>&lt;dd&gt;</code></td><td>定义型列表标记</td><td>对列表条目进行简短说明</td></tr><tr><td><code>&lt;hr&gt;</code></td><td>水平割线标记</td><td>段落间的分割线</td></tr><tr><td><code>&lt;div&gt;</code></td><td>分区显示标记</td><td>编排一大段HTML段落，也可用于格式化表，科多层嵌套</td></tr></tbody></table><ul><li><code>&lt;ul&gt;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;ol&gt;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;dl&gt;&lt;dd&gt;&lt;dt&gt;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本标记"><a href="#文本标记" class="headerlink" title="文本标记"></a>文本标记</h3><table><thead><tr><th>标记</th><th>名称及作用</th></tr></thead><tbody><tr><td>hn</td><td>标题标记</td></tr><tr><td>font</td><td>字体设置标记，size，color，face常用属性</td></tr><tr><td>b</td><td>粗字体标记</td></tr><tr><td>i</td><td>斜字体标记</td></tr><tr><td>sub</td><td>文字下标字体标记</td></tr><tr><td>sup</td><td>文字上标字体标记</td></tr><tr><td>tt</td><td>打印机字体标记</td></tr><tr><td>cite</td><td>引用方式的字体，通常是斜体</td></tr><tr><td>em</td><td>表示强调，通常为斜体字</td></tr><tr><td>stromg</td><td>表示强调，通常为粗体字</td></tr><tr><td>small</td><td>小型字体标记</td></tr><tr><td>big</td><td>大型字体标记</td></tr><tr><td>u</td><td>下划线字体标记</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图像标记"><a href="#图像标记" class="headerlink" title="图像标记"></a>图像标记</h2><ul><li><p><code>&lt;img&gt;</code>图像标记</p><ul><li>使用方法 <code>&lt;img src=&quot;路径/文件名.图片格式&quot; width=&quot;属性值&quot; height=&quot;属性值&quot; border=&quot;属性值&quot; alt=&quot;属性值&quot;&gt;</code></li><li><p>注意</p><ul><li><code>&lt;img&gt;</code>为单标记</li><li>路径或文件名或文件格式错误，将无法加载图片</li></ul></li><li><p><code>&lt;img&gt;</code>标记的属性</p><ul><li><code>src</code>属性 – 指定要加载的图片的路径和图片的名称以及图片格式</li><li><code>width</code>属性 – 指定图片宽度，单位px，em，cm，mm</li><li><code>height</code>属性 – 指定图片的高度，单位px、em、cm、mm</li><li><code>border</code>属性 – 指定图标的边框宽度，单位px、em、cm、mm</li><li><code>alt</code>属性<ul><li>当图片加载完成，鼠标移动到图片上，显示这个图片指定的属性文字</li><li>图像加载失败，使用文字代替图像显示</li><li>搜索引擎可以通过这个属性的文字来抓取图片</li></ul></li></ul></li></ul></li></ul><h2 id="超链接的使用"><a href="#超链接的使用" class="headerlink" title="超链接的使用"></a>超链接的使用</h2><ul><li><code>&lt;a&gt;</code>超链接<ul><li>基本语法 <code>&lt;a href=&quot;&quot; target=&quot;打开方式&quot; name=&quot;页面锚点名称&quot;&gt;链接文字或图片&lt;/a&gt;</code></li><li>属性<ul><li>href属性 – 链接地址可以是网页、视频、图片或音乐等</li><li>target属性<ul><li>_blank – 在新的窗口打开链接</li><li>_seif(默认值) – 在当前窗口打开链接</li><li>_parent – 在父窗口中打开页面(框架中使用较多)</li><li>_top – 在顶层窗口中打开文件(框架中使用较多)</li></ul></li><li>name属性 – 页面锚点</li></ul></li></ul></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="lt-table-gt-标记"><a href="#lt-table-gt-标记" class="headerlink" title="&lt;table&gt;标记"></a><code>&lt;table&gt;</code>标记</h3><ul><li>基本格式：<code>&lt;table attr1=&quot;value1&quot; attr2=&quot;value2&quot; ...&gt;</code>表格内容<code>&lt;/table&gt;</code></li><li>属性<ul><li>width</li><li>height</li><li>border</li><li>align</li><li>cellspacing – 单元格之间的间距，默认2px</li><li>cellpadding – 单元格内容与单元格边框的显示距离</li><li>frame 控制表格边框最外层的四条现况<ul><li>void – (默认值)无边框</li><li>above – 仅有顶部边框</li><li>below – 仅有底部边框</li><li>hsides – 仅有顶部和底部边框</li><li>lhs – 仅有左侧</li><li>rhs – 仅有右侧</li><li>vsides – 仅有左右侧边框</li><li>box – 四个边框</li><li>border – 四个边框</li></ul></li><li>rules – 控制是否显示及如何显示单元格之间的分割线<ul><li>none(默认值) – 无分割线</li><li>all – 所有分割线</li><li>rows – 仅有行分割线</li><li>clos – 仅有列分割线</li><li>groups – 尽在行组和列组之间有分割线</li></ul></li></ul></li></ul><h3 id="lt-caption-gt-标记"><a href="#lt-caption-gt-标记" class="headerlink" title="&lt;caption&gt;标记"></a><code>&lt;caption&gt;</code>标记</h3><ul><li>表格标题<code>&lt;caption&gt;</code></li><li><code>&lt;caption&gt;</code>属性位于<code>&lt;table&gt;</code>属性之后，在<code>&lt;tr&gt;</code>属性之前</li><li>align属性<ul><li>top – 在顶部 </li><li>bottom – 在底部</li><li>left – 在左部</li><li>right – 在右部</li></ul></li></ul><h3 id="lt-tr-gt-标记"><a href="#lt-tr-gt-标记" class="headerlink" title="&lt;tr&gt;标记"></a><code>&lt;tr&gt;</code>标记</h3><ul><li>定义表格的一行，都是由一对<code>&lt;tr&gt;</code>…<code>&lt;/tr&gt;</code>标记表示你</li><li>每一行<code>&lt;tr&gt;</code>标记可以嵌套多个<code>&lt;td&gt;</code>或者<code>&lt;th&gt;</code>标记</li><li>可选属性<ul><li>bgcolor</li><li>align – 垂直对齐方式<ul><li>bottom – 靠顶端对齐</li><li>top – 靠底部对齐</li><li>middle – 居中对齐</li></ul></li><li>vlign – 水平对齐方向<ul><li>left – 靠左对齐</li><li>right – 靠右对齐</li><li>center – 居中对齐</li></ul></li></ul></li></ul><h3 id="lt-td-gt-和-lt-th-gt-标记"><a href="#lt-td-gt-和-lt-th-gt-标记" class="headerlink" title="&lt;td&gt;和&lt;th&gt;标记"></a><code>&lt;td&gt;</code>和<code>&lt;th&gt;</code>标记</h3><ul><li><code>&lt;td&gt;</code>和<code>&lt;th&gt;</code>都是单元格的标记，必须嵌套在<code>&lt;tr&gt;</code>标签内</li><li><code>&lt;th&gt;</code>是表头标记，通畅位于首行或者首列，<code>&lt;th&gt;</code>中的中文默认会被加粗，而<code>&lt;td&gt;</code>不会</li><li><code>&lt;td&gt;</code>是数据标记，表示该单元的具体数据</li><li>属性<ul><li>bgcolor</li><li>align</li><li>valign</li><li>width</li><li>height</li><li>rowspan – 单元格所占行数</li><li>colspan – 单元格所占列数</li></ul></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>表格练习</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"500px"</span> <span class="attr">height</span>=<span class="string">"250px"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0px"</span> <span class="attr">cellpadding</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>title<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"gray"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>class<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>score<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>one<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>john<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>two<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>lili<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>three<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.网页布局练习</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">topmargin</span>=<span class="string">"0"</span> <span class="attr">leftmargin</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"font-size: 20px;color: white"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"960px"</span> <span class="attr">width</span>=<span class="string">"960px"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"gray"</span> <span class="attr">height</span>=<span class="string">"90px"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"left"</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span> <span class="attr">width</span>=<span class="string">"30%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        网页的左部</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">bgcolor</span>=<span class="string">"blue"</span> <span class="attr">width</span>=<span class="string">"70%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        网页的右部</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span> <span class="attr">height</span>=<span class="string">"90px"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML框架"><a href="#HTML框架" class="headerlink" title="HTML框架"></a>HTML框架</h2><ul><li>框架将浏览器划分成不同的部分，每一部分加载不同的网页，实现在同一浏览器窗口中加载多个页面的效果。</li><li><code>&lt;frame&gt;</code>划分框架标记</li><li>语法格式<code>&lt;frameset&gt;...&lt;/frameset&gt;</code></li><li><p>属性</p><ul><li>cols<ul><li>使用像素数和%分割左右窗口哦，”*”表示剩余部分</li><li>使用”<em>,</em>“表示框平均分成两个</li><li>使用”<em>,</em>,*”表示平均分成三个</li></ul></li><li>rows – 使用像素数和%分割上下窗口，”<em>,</em>“表示剩余部分</li><li>frameborder – 指定是否显示边框，0不显示，1显示</li><li>border – 设置边框的大小，默认5px</li></ul></li><li><p>`<frame>子窗口标记</p></li><li><code>&lt;frame&gt;</code>是一个单标记，该标记必须放在<code>&lt;frameset&gt;</code>中使用，在<code>&lt;frameset&gt;</code>中设置了几个窗口，就必须使用几个<code>&lt;frame&gt;</code>框架，还必须使用src属性指定一个网页</li><li>属性<ul><li>src – 加载网页文件的URL地址</li><li>name – 框架名称，是链接标记的target所要的参数</li><li>noresize – 表示不能调整边框的大小，没有设置时就可以调整</li><li>scrolling<ul><li>auto 自动出现</li><li>yes 有</li><li>no 无</li></ul></li><li>frameborder – 1显示边框，0不显示边框</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"90,*,90"</span> <span class="attr">frameborder</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">name</span>=<span class="string">"top"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"20%,80%"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">frame</span> <span class="attr">name</span>=<span class="string">"left"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">frame</span> <span class="attr">name</span>=<span class="string">"right"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">name</span>=<span class="string">"bottom"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单设计"><a href="#表单设计" class="headerlink" title="表单设计"></a>表单设计</h2><ul><li>表单标记<ul><li>定义表单的开始位置和结束位置，表单提交时的内容就是<code>&lt;form&gt;</code>里的内容</li><li>格式：<code>&lt;form action=&quot;服务器端地址(接收表单内容的地址)&quot; name=&quot;表单名称&quot; method=&quot;post|get&quot;&gt;...&lt;/form&gt;</code></li><li>常用属性<ul><li>name – 表单名称</li><li>method<ul><li>get – 表单的内容会附加在URL地址后面，因此限制了提交的内容的长度，不超过8192个字符，不具备保密性</li><li>post – 将表单中的数据一并包含在表单主体中，一起传送到服务器中处理，无数据大小限制</li></ul></li><li>action – 表单数据的处理程序的URL地址，为空则使用当前文档的URL地址，不需要使用action属性也要指定其属性为”no”</li><li>enctype – 设置表单的资料的编码类似</li><li>target – 和超链接的属性类似，用来指定窗口</li></ul></li></ul></li><li>文本域和密码<ul><li><code>&lt;input&gt;</code>标记<ul><li>语法 <code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; size=&quot;&quot; maxlength=&quot;&quot;&gt;</code></li><li>属性<ul><li>type<ul><li>text – 文本输入域</li><li>password – 密码域</li></ul></li><li>name – 定义控件的名称</li><li>value – 初始化值</li><li>size – 设置控件的长度</li><li>maxlength – 允许输入的最大的字符数</li></ul></li></ul></li></ul></li><li>提交、重置、普通按钮<ul><li>提交 – <code>&lt;input type=&quot;submit&quot;&gt;</code></li><li>重置 – <code>&lt;input type=&quot;reset&quot;&gt;</code></li><li>普通 – <code>&lt;input type=&quot;button&quot;&gt;</code></li></ul></li><li>单选框和复选框<ul><li>单选框 – <code>&lt;input type=&quot;radio&quot;&gt;</code></li><li>复选框 – <code>&lt;input type=&quot;checkbox</code>&gt;</li><li>注意：两者都可以使用”checked”属性设置默认值</li></ul></li><li>隐藏域<ul><li>隐藏域 – <code>&lt;input type=&quot;hidden&quot;&gt;</code></li></ul></li><li>多行文本域<ul><li>使用<code>&lt;textaera&gt;</code>可以实现一个可以输入多行文本的区域</li><li>语法格式：<code>&lt;textaera name=&quot;&quot; rows=&quot;&quot; cols=&quot;&quot; value=&quot;&quot;&gt;...&lt;/textaera&gt;</code></li></ul></li><li>菜单下拉列表域<ul><li>使用<code>&lt;select&gt;</code>标记实现菜单下拉域</li><li>语法格式：<code>&lt;select name=&quot;&quot; size=&quot;value&quot; multiple&gt;&lt;option value=&quot;&quot; selected&gt;选项1&lt;/option&gt;&lt;option value=&quot;value2&quot;&gt;选项2&lt;/option&gt;&lt;/select&gt;</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数式编程</title>
      <link href="/2017/11/23/Python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/23/Python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Python高阶函数"><a href="#Python高阶函数" class="headerlink" title="Python高阶函数"></a>Python高阶函数</h1><blockquote><p>函数式Python内建支持的一种封装，通过吧大段代码拆成函数，通过一层层调用，就可以把复杂的任务分解成简单的任务，这种分解称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！</p></blockquote><a id="more"></a><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="变量可以指向函数"><a href="#变量可以指向函数" class="headerlink" title="变量可以指向函数"></a>变量可以指向函数</h3><p>函数本身可以赋给变量，即：变量可以指向函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = abs</span><br><span class="line">f</span><br><span class="line">&lt;built-<span class="keyword">in</span> function abs&gt;</span><br><span class="line">f(<span class="number">-10</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="函数名也是变量"><a href="#函数名也是变量" class="headerlink" title="函数名也是变量"></a>函数名也是变量</h3><p>当把abs指向10后，就无法调用abs函数了，因为abs这个变量已经不再指向求绝对值的函数而是指向一个整数。如果要恢复abs函数，只能重启Python交互环境。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abs = <span class="number">10</span></span><br><span class="line">abs(<span class="number">-10</span>)</span><br><span class="line">Error</span><br></pre></td></tr></table></figure><h3 id="传入函数"><a href="#传入函数" class="headerlink" title="传入函数"></a>传入函数</h3><p>一个函数可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line">add(<span class="number">-5</span>,<span class="number">6</span>,abs)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><h3 id="map-、reduce-、filter-和sorted"><a href="#map-、reduce-、filter-和sorted" class="headerlink" title="map()、reduce()、filter()和sorted()"></a>map()、reduce()、filter()和sorted()</h3><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数一次作用到序列的每个元素，并把结果作为新的Iterator返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> x * x</span><br><span class="line">r = map(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">list(r)</span><br><span class="line">[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">36</span>,<span class="number">49</span>,<span class="number">64</span>,<span class="number">81</span>]</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>reduce()把一个函数作用在一个序列[x1,x2,x3,…]上，reduce()<strong>必须接收两个函数</strong>，reduce把结果继续和序列的下一个元素做累积计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把序列转化为整数</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line"></span><br><span class="line">reduce(fn,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>])</span><br><span class="line"><span class="number">13579</span></span><br></pre></td></tr></table></figure><p>把str转换为int的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x,y)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</span><br><span class="line"></span><br><span class="line">reduce(fn,map(char2num,<span class="string">'13579'</span>))</span><br><span class="line"><span class="number">13579</span></span><br></pre></td></tr></table></figure><p>整理成一个<strong>str2int</strong>的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</span><br><span class="line">    <span class="keyword">return</span> reduce(fn,map(char2num,s))</span><br></pre></td></tr></table></figure><p>使用lambda函数简化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y:x * <span class="number">10</span> + y,map(char2num,s))</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>filter()用于过滤序列，filter()接收一个函数和一个序列两个参数，filter把传入的函数依次作用于每个元素，然后根据返回值是True或False决定保留或丢弃该元素。filter函数返回的是一个Iterator，需要用list()函数获得所有的结果并放回list。</p><p>在一个list钟，删除偶数保留基数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">list(filter(is_odd,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>]))</span><br></pre></td></tr></table></figure><p>去掉序列中的空字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line">list(filter(not_empty,[<span class="string">'a'</span>,<span class="string">' '</span>,<span class="string">'c'</span>,<span class="string">'  '</span>]))</span><br></pre></td></tr></table></figure><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h4><p>sorted()函数是一个高阶函数，可以接收一个key函数来实现自定义的排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">-1</span>,<span class="number">36</span>,<span class="number">24</span>,<span class="number">5</span>,<span class="number">-20</span>])</span><br><span class="line">[<span class="number">-20</span>,<span class="number">-1.5</span>,<span class="number">24</span>,<span class="number">36</span>]</span><br><span class="line"></span><br><span class="line">sorted([<span class="number">-1</span>,<span class="number">36</span>,<span class="number">24</span>,<span class="number">5</span>,<span class="number">-20</span>],key=abs,reverse=<span class="keyword">True</span>)</span><br><span class="line">[<span class="number">36</span>, <span class="number">24</span>, <span class="number">-20</span>, <span class="number">5</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><h3 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h3><p>高阶函数除了可以接收函数作为参数外，还可以把函数作为结果值返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    ax = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        ax = ax + n</span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure><p>如果不需要立刻求和，而是在后面的代码中根据需要在计算，可以不返回求和的结果，而是返回求和的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="What"><a href="#What" class="headerlink" title="What"></a>What</h4><p>在函数中定义函数，并且内部函数可以引用外部函数的参数和局部变量，当外函数返回内函数时，相关参数和变量都保存在返回的函数中，这种方式是称为“闭包”。</p><p>一般情况下，函数中的局部变量仅在函数的执行期间可用，一旦函数执行过后，局部变量将不再可用。闭包可以使得局部变量在函数外被访问编程可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># print_msg是外围函数</span></span><br><span class="line">    msg = <span class="string">"The Zen of Python"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printer</span><span class="params">()</span>:</span></span><br><span class="line">        print(msg)</span><br><span class="line">    <span class="keyword">return</span> printer</span><br><span class="line"></span><br><span class="line">another = print_msg()</span><br><span class="line"><span class="comment"># 输出The Zen of Python</span></span><br><span class="line">another()</span><br></pre></td></tr></table></figure><h4 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h4><p>闭包避免使用全局变量，还能降函数与所操作的某些数据（环境）关联起来。一般来说，党对象中只有一个方法时，使用闭包时更好的选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adder</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">adder5 = adder(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#输出15</span></span><br><span class="line">adder5(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#输出6</span></span><br><span class="line">adder5(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><h3 id="What-1"><a href="#What-1" class="headerlink" title="What"></a>What</h3><p>匿名函数，就是没有名字的函数。关键字lambda可以创建匿名函数，匿名函数有一个限制，就是只能有一个表达式，不用写return，返回追就是该表达式的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数: 表达式</span><br><span class="line"></span><br><span class="line">add = <span class="keyword">lambda</span> x,y : x + y</span><br><span class="line">add(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="Why-1"><a href="#Why-1" class="headerlink" title="Why"></a>Why</h3><p>lambda函数一般适用于创建一些临时性的，小巧的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(g,arr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [g(x) <span class="keyword">for</span> x <span class="keyword">in</span> arr]</span><br><span class="line"></span><br><span class="line">arr = func(<span class="keyword">lambda</span> x: x + <span class="number">1</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>希望增强函数的额功能，但是又不希望修改函数的定义，这种在代码运行期间动态的增加功能的方式，称之为“装饰器”，本质上，装饰器就是一个返回函数的高阶函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'foo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(func)</span>:</span></span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line">bar(foo)</span><br></pre></td></tr></table></figure><h3 id="简单装饰器"><a href="#简单装饰器" class="headerlink" title="简单装饰器"></a>简单装饰器</h3><p>use_logging就是一个装饰器，它是一个普通的函数，把真正业务逻辑的函数func包裹在其中，use_logging返回的也是一个函数，这个函数的名字叫wrapper。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">use_logging</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'%s is running'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am foo'</span>)</span><br><span class="line"></span><br><span class="line">foo = use_logging(foo)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><p>@符号就是装饰器的语法糖，它放在函数开始定义的地方，这样就可以省略最后一步再次赋值的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">use_logging</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'%s is running'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper()</span><br><span class="line"></span><br><span class="line"><span class="meta">@use_logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am foo'</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>partial函数可以固定函数参数，并返回一个新的函数，当函数的参数太多，需要固定某些参数时，可以使用functools.partial创建一个新的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">functools.partial(func[,*args],[\*\*kwargs])</span><br></pre></td></tr></table></figure><p>转换二进制字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x,base=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(x,base)</span><br></pre></td></tr></table></figure><p>使用functools.partial创建一个偏函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">int2 = functools.partial(int,base=<span class="number">2</span>)</span><br><span class="line">int2(<span class="string">'1000000'</span>)</span><br><span class="line"><span class="number">64</span></span><br></pre></td></tr></table></figure><p>参考教程：<br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317852443934a86aa5bb5ea47fbbd5f35282b331335000" target="_blank" rel="noopener">廖雪峰的Python教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac常用快捷键</title>
      <link href="/2017/11/22/Mac%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2017/11/22/Mac%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac常用快捷键"><a href="#Mac常用快捷键" class="headerlink" title="Mac常用快捷键"></a>Mac常用快捷键</h1><blockquote><p>熟练使用快捷键可以节约大量的时间，因此掌握系统和一些常用工具的快捷键可以提高工作效率，而且双手放在键盘上啪啪啪，不会中断思路，最重要的是还可以装逼哈。</p></blockquote><a id="more"></a><h2 id="系统常用"><a href="#系统常用" class="headerlink" title="系统常用"></a>系统常用</h2><h3 id="一、通用"><a href="#一、通用" class="headerlink" title="一、通用"></a>一、通用</h3><ul><li>Command + X 剪切，可用于文本，文件</li><li>Command + C 复制，可用于文本，文件</li><li>Command + V 粘贴，可用于文本，文件</li><li>Command + A 全选，可用于文本，文件</li><li>Command + Z 撤销，可用于文本，文件</li><li>Command + S 保存</li><li>Command + Shift + S 另存为</li><li>Command + O 打开</li><li>Command + N 新建</li><li>Command + M 最小化</li><li>Command + H 隐藏窗口</li><li>Command + W 关闭</li><li>Command + Q 退出</li><li>Command + P 打印</li><li>Command + Space 打开Spotlight</li><li>Control + Command + Space 打开emoji表情</li></ul><h3 id="二、文件管理器"><a href="#二、文件管理器" class="headerlink" title="二、文件管理器"></a>二、文件管理器</h3><ul><li>Command + Tab 在应用程序切换</li><li>Command + ` 在应用程序中的窗口切换</li><li>Command + I 显示简介</li><li>Command + N 新建文件夹</li><li>Command + F 搜索，适用于文本，浏览器，文件</li><li>Command + 1/2/3/4 切换文件夹显示模式</li><li>Command + Backspace </li></ul><h3 id="三、截屏"><a href="#三、截屏" class="headerlink" title="三、截屏"></a>三、截屏</h3><ul><li>Command + Shift + 3 截取整个屏幕并保存到桌面</li><li>Command + Shift + 4 截取选择区域并保存到桌面</li><li>Command + Shift + 4 + Space 截取选择窗口并保存到桌面</li><li>Control + Command + Shift + 3 截取整个屏幕并粘贴到剪贴板</li><li>Control + Command + Shift + 4 截取选择区域并粘贴到剪贴板</li><li>Control + Command + Shift + 4 + Space 截取选择窗口并粘贴到剪贴板</li></ul><h3 id="四、浏览器"><a href="#四、浏览器" class="headerlink" title="四、浏览器"></a>四、浏览器</h3><ul><li>Command + +/- 放大/缩小</li><li>Command + N 新建窗口</li><li>Command + T 新建一个标签</li><li>Command + R 刷新</li><li>Command + W 关闭当前标签</li><li>Command + D 添加到收藏夹</li><li>Command + L 光标移动到地址框</li><li>Space 下一页</li><li>Command + Shift + T 重新打开关闭页面</li><li>Command + Z Safari重新打开关闭页面</li></ul><h3 id="五、应用"><a href="#五、应用" class="headerlink" title="五、应用"></a>五、应用</h3><h4 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h4><ul><li>Control + Command + A 微信/QQ截图</li></ul><h2 id="VIM常用"><a href="#VIM常用" class="headerlink" title="VIM常用"></a>VIM常用</h2><h3 id="一、编辑"><a href="#一、编辑" class="headerlink" title="一、编辑"></a>一、编辑</h3><h2 id="PyCharm常用"><a href="#PyCharm常用" class="headerlink" title="PyCharm常用"></a>PyCharm常用</h2><h3 id="一、编辑-1"><a href="#一、编辑-1" class="headerlink" title="一、编辑"></a>一、编辑</h3><ul><li>Control + Space 基本的代码补全</li><li>Control + Shift + Space 智能代码补全</li><li>Command + / 注释/取消注释一行</li><li>Command + 展开当前</li><li>Command - 折叠当前</li><li>Shift + Command + 展开所有</li><li>Shift + Command - 折叠所有</li><li>Shift + Enter 下行另起一行</li><li>Control + Y 删除当前行</li><li>Control + D 复制所选区域或行到后面或下一行</li><li>Control + Alt + O 自动导入</li><li>Command + Alt + L 代码格式化</li><li>Control + Alt + I 自动缩进</li><li>Control + Q 快速查看文档</li><li>Command + F1 显示错误描述或警告信息</li><li>Control + J 快速查看文档</li><li>Control + O 覆盖方法</li><li>Control + I 实现方法</li><li>Command + Alt + T 包围代码（if else or try catch）</li><li>Command + Shift + U 大小写转换</li></ul><h3 id="二、查找和替换"><a href="#二、查找和替换" class="headerlink" title="二、查找和替换"></a>二、查找和替换</h3><h3 id="三、编译和运行"><a href="#三、编译和运行" class="headerlink" title="三、编译和运行"></a>三、编译和运行</h3><h3 id="四、导航"><a href="#四、导航" class="headerlink" title="四、导航"></a>四、导航</h3><h3 id="五、重构"><a href="#五、重构" class="headerlink" title="五、重构"></a>五、重构</h3><h3 id="六、通用"><a href="#六、通用" class="headerlink" title="六、通用"></a>六、通用</h3><p>此文有待更新。</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 常用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac常用命令</title>
      <link href="/2017/09/15/Mac%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/09/15/Mac%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>macOS常用命令整理,此文记录了平常使用终端的一些基本命令，使用命令行进行操作还是很有成就感的，建议使用Mac的用户可以学习一下一些基本的命令。</p><a id="more"></a><ol><li><p>man</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$man</span> <span class="built_in">command</span>-name</span><br><span class="line">eg:</span><br><span class="line"><span class="variable">$man</span> ls</span><br><span class="line"><span class="variable">$man</span> -k <span class="comment">#search all command</span></span><br></pre></td></tr></table></figure></li><li><p>pwd cd ls</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ls</span> -la</span><br><span class="line"><span class="variable">$pwd</span></span><br><span class="line"><span class="variable">$cd</span></span><br></pre></td></tr></table></figure></li><li><p>cat less which file</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> <span class="comment">#check test file</span></span><br><span class="line"><span class="variable">$cat</span> a.txt &gt;&gt; b.txt</span><br><span class="line"><span class="variable">$less</span> <span class="comment">#high grade than cat</span></span><br><span class="line">    <span class="comment">#spacekey-&gt;paging</span></span><br><span class="line">    <span class="comment">#/ search</span></span><br><span class="line">    <span class="comment">#Q quit</span></span><br><span class="line">    <span class="comment">#v go to vi editor</span></span><br><span class="line"><span class="variable">$whicch</span> <span class="built_in">command</span>-name</span><br><span class="line"><span class="variable">$file</span> filename <span class="comment">#check file</span></span><br></pre></td></tr></table></figure></li><li><p>find &amp; mdfind</p></li><li><p>edit file and directory</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> -p a/b/c/d/e</span><br><span class="line"><span class="variable">$cp</span> -R &lt;file&gt; a/b/   file --&gt; b/</span><br><span class="line"><span class="variable">$mv</span> -R &lt;file&gt; a/b/   file --&gt; b/</span><br><span class="line"><span class="variable">$rm</span> -R directory/file</span><br></pre></td></tr></table></figure></li><li><p>vi and nano</p></li><li><p>su and sudo</p></li><li><p>open .</p></li><li><p>control + c</p></li><li><p>history</p></li><li><p>control + l == clear</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础教程</title>
      <link href="/2017/09/12/Git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2017/09/12/Git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基础教程"><a href="#Git基础教程" class="headerlink" title="Git基础教程"></a>Git基础教程</h1><p>Git学习笔记,此文记录一些常用Git命令，熟练使用Git应该是开发者必须要掌握的一门技术。</p><a id="more"></a><h2 id="安装git和初始化"><a href="#安装git和初始化" class="headerlink" title="安装git和初始化"></a>安装git和初始化</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brew</span> install git</span><br></pre></td></tr></table></figure><h3 id="用户名和邮箱设置"><a href="#用户名和邮箱设置" class="headerlink" title="用户名和邮箱设置"></a>用户名和邮箱设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> config --global user.name <span class="string">"yourname"</span></span><br><span class="line"><span class="variable">$git</span> config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><h3 id="添加SSH到github"><a href="#添加SSH到github" class="headerlink" title="添加SSH到github"></a>添加SSH到github</h3><ol><li><p>生成本地ssh-key</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-keygen -t rsa -code <span class="string">"youremail@example"</span></span><br></pre></td></tr></table></figure></li><li><p>打开主目录中的id_rsa.pub文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vim</span> /User/用户名/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>添加ssh-key到github-settings-SSH and GPG keys</p></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span> -T git@github.com</span><br><span class="line">Hi entercoder1993! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> &lt;url&gt; <span class="comment">#克隆远程版本库</span></span><br><span class="line"><span class="variable">$git</span> init <span class="comment">#初始化版本库</span></span><br></pre></td></tr></table></figure><h3 id="把文件添加到仓库，可以添加一个或多个"><a href="#把文件添加到仓库，可以添加一个或多个" class="headerlink" title="把文件添加到仓库，可以添加一个或多个"></a>把文件添加到仓库，可以添加一个或多个</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> add &lt;-A/--all&gt;</span><br></pre></td></tr></table></figure><h3 id="把文件提交到仓库，可以一次提交多个文件"><a href="#把文件提交到仓库，可以一次提交多个文件" class="headerlink" title="把文件提交到仓库，可以一次提交多个文件"></a>把文件提交到仓库，可以一次提交多个文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"message"</span></span><br></pre></td></tr></table></figure><h3 id="查看仓库的状态"><a href="#查看仓库的状态" class="headerlink" title="查看仓库的状态"></a>查看仓库的状态</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure><h3 id="查看文件修改内容"><a href="#查看文件修改内容" class="headerlink" title="查看文件修改内容"></a>查看文件修改内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> diff</span><br></pre></td></tr></table></figure><h3 id="查看提交历史记录"><a href="#查看提交历史记录" class="headerlink" title="查看提交历史记录"></a>查看提交历史记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">log</span> &lt;--pretty=oneline&gt;</span><br></pre></td></tr></table></figure><h3 id="在Git中，HEAD表示当前版本，上一个版本就是HEAD-，上上个版本就是HEAD"><a href="#在Git中，HEAD表示当前版本，上一个版本就是HEAD-，上上个版本就是HEAD" class="headerlink" title="在Git中，HEAD表示当前版本，上一个版本就是HEAD^，上上个版本就是HEAD^^"></a>在Git中，HEAD表示当前版本，上一个版本就是HEAD^，上上个版本就是HEAD^^</h3><h3 id="使用git-reflog可以记录每一次的命令"><a href="#使用git-reflog可以记录每一次的命令" class="headerlink" title="使用git reflog可以记录每一次的命令"></a>使用<code>git reflog</code>可以记录每一次的命令</h3><h3 id="工作区-本地目录"><a href="#工作区-本地目录" class="headerlink" title="工作区 本地目录"></a>工作区 本地目录</h3><ul><li>版本库 .git中包含index、master和指针HEAD</li><li>暂存区(index) git add –&gt;暂存区</li><li>master分支 git commit –&gt;master</li></ul><h3 id="查看工作区与版本库的区别"><a href="#查看工作区与版本库的区别" class="headerlink" title="查看工作区与版本库的区别"></a>查看工作区与版本库的区别</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD -- <span class="params">&lt;file&gt;</span> <span class="meta">#如果修改之后没有git add到暂存区，使用git commit就不会将修改提交到master中</span></span><br></pre></td></tr></table></figure><h3 id="如果要丢弃工作区的修改，可以使用"><a href="#如果要丢弃工作区的修改，可以使用" class="headerlink" title="如果要丢弃工作区的修改，可以使用"></a>如果要丢弃工作区的修改，可以使用</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- <span class="params">&lt;file&gt;</span> <span class="meta">#即文件在工作区的修改全部撤销，撤销后文件会回到最后一次git commit或git add的状态</span></span><br></pre></td></tr></table></figure><h3 id="git-reset-HEAD-lt-file-gt-可以把暂存区的修改撤销，重新放回工作区"><a href="#git-reset-HEAD-lt-file-gt-可以把暂存区的修改撤销，重新放回工作区" class="headerlink" title="git reset HEAD &lt;file&gt;可以把暂存区的修改撤销，重新放回工作区"></a><code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销，重新放回工作区</h3><h3 id="删除一个文件"><a href="#删除一个文件" class="headerlink" title="删除一个文件"></a>删除一个文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> rm &lt;file&gt;</span><br></pre></td></tr></table></figure><h2 id="远程版本库"><a href="#远程版本库" class="headerlink" title="远程版本库"></a>远程版本库</h2><p>登陆后再右上角找到Create a new repo，创建一个新的远程仓库，填入对应的仓库名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> remote add origin git@github.com:&lt;name&gt;/&lt;reponame&gt;.git</span><br><span class="line"><span class="variable">$git</span> push -u origin master <span class="comment">#第一次推送master分支的所有内容</span></span><br><span class="line"><span class="variable">$git</span> push origin master    <span class="comment">#后续使用此命令极客推送</span></span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并"><a href="#创建与合并" class="headerlink" title="创建与合并"></a>创建与合并</h3><ol><li>查看分支 <code>git branch</code></li><li>创建分支 <code>git branch &lt;name&gt;</code></li><li>切换分支 <code>git checkout &lt;name&gt;</code></li><li>创建+切换分支 <code>git checkout -b &lt;name&gt;</code></li><li>合并某分支到当前分支 <code>git merge &lt;name&gt;</code></li><li>删除分支 <code>git branch -d &lt;name&gt;</code></li></ol><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>在分支中的修改与master中的修改冲突时，使用<code>git merge</code>合并时会存在冲突，可以使用<code>git status</code>查看冲突，并需要到修改的文件中解决冲突，解决完成后再进行add&amp;commit就可以解决分支中的冲突问题，解决完成后就可以使用<code>git branch -d &lt;name&gt;</code>删除冲突，也可以使用<code>git log --graph</code>查看分支的合并情况。</p><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>合并分支时，Git会使用Fast forward模式，这种模式，删除分支后，会丢掉分支信息，如果禁用Fast forwar模式，Git就会在merge时生成一个新的commmit，这样就可以在分支历史中看出分支信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> merge --no-ff -m <span class="string">"message"</span> &lt;baranchname&gt;</span><br></pre></td></tr></table></figure><h3 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h3><p>若master分支出现bug，需要及时修改，我们可以使用<code>git stash</code>把目前修改的分支储存起来，然后将分支切换到出现bug的分支，并创建bug分支，解决完成后，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> stash list   <span class="comment">#查看分支存储信息</span></span><br><span class="line"><span class="variable">$git</span> stash apply  <span class="comment">#恢复储存信息，但stash的内容不删除</span></span><br><span class="line"><span class="variable">$git</span> stash drop   <span class="comment">#将储存信息删除</span></span><br><span class="line"><span class="variable">$git</span> stash pop    <span class="comment">#恢复的同事删除储存信息</span></span><br></pre></td></tr></table></figure><h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>未被合并的分支，需要删除分支的，使用<code>git branch -D &lt;branchname&gt;</code></p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>使用<code>git remote</code>查看远程仓库的信息加上-v可以查看详细信息</p><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>将本地分支的所有提交提交到远程库，推送时要指定本地分支，这样git就会把该分支推送到远程库对应的分支上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> push origin master</span><br><span class="line"><span class="variable">$git</span> push origin dev</span><br></pre></td></tr></table></figure><h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><ol><li>查看远程库信息，使用<code>git remote -v</code></li><li>从本地推送分支，使用<code>git push origin branchname</code></li><li>若推送失败，先用<code>git pull</code>抓取远程的新提交</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branchname origin/branchname</code>本地和远程分支的名称最好一致</li><li>建立本地分支与远程分支的关联，使用<code>git branch --set-upstream branchnanme origin/branchname</code></li><li>从远程抓取分支，使用git pull，如果有冲突，要先才处理冲突</li></ol><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>虽然可以使用commit id来退回版本，但是并不好找，所以使用tag标记为容易记住的有意义的名字，跟某个commit绑定在一起</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p><code>git tag &lt;name&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id<br><code>git tag -a &lt;tagname&gt; -m &quot;message&quot;</code>可以指定标签信息<br><code>git tag -s &lt;tagname&gt; -m &quot;message&quot;</code>可以用PGP签名标签<br><code>git tag</code>可以查看所有标签</p><h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3><p><code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签<br><code>git push origin --tags</code>可以推送全部未推送过的本地标签<br><code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签<br><code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装配置MySQL</title>
      <link href="/2017/09/05/Mac%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMySQL/"/>
      <url>/2017/09/05/Mac%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac下安装配置MySQL"><a href="#Mac下安装配置MySQL" class="headerlink" title="Mac下安装配置MySQL"></a>Mac下安装配置MySQL</h1><p>Mac下MySQL的安装其实是很简单，用brew一行代码就解决了，但是安装完成后并不能直接开始用，会出现一些错误，此文可以解决安装后无法使用的问题。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用命令行执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brew</span> install MySQL</span><br></pre></td></tr></table></figure><p>即可安装完成</p><!--more--><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>命令行输入</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> chown -R <span class="string">'Mac用户名'</span> /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>连接</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brew</span> link --overwrite mysql</span><br></pre></td></tr></table></figure></li><li><p>命令行输入</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> TMPDIR</span><br><span class="line"></span><br><span class="line"><span class="variable">$bash</span> mysql_install_db --verbose --user=root</span><br><span class="line">--basedir=<span class="string">"<span class="variable">$(brew --prefix mysql)</span>"</span>--datadir=/usr/<span class="built_in">local</span>/var/mysql --tmpdir=/tmp</span><br></pre></td></tr></table></figure></li><li><p>启动mysql</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mysql</span>.server start</span><br></pre></td></tr></table></figure></li><li><p>关闭mysql</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mysql</span>.server stop</span><br></pre></td></tr></table></figure></li></ol><h2 id="常用Mysql用法"><a href="#常用Mysql用法" class="headerlink" title="常用Mysql用法"></a>常用Mysql用法</h2><blockquote><p>待补充</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Mac </tag>
            
            <tag> Setting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的Mac小技巧</title>
      <link href="/2017/09/05/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Mac%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/09/05/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Mac%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac可以添加自定义功能"><a href="#Mac可以添加自定义功能" class="headerlink" title="Mac可以添加自定义功能"></a>Mac可以添加自定义功能</h1><blockquote><p>主要是利用Automator来添加快捷功能，例例如右键添加复制文件或文件夹路径等。</p></blockquote><a id="more"></a><p>1.在Finder中打开应用程序</p><p>2.双击打开Automator.app</p><p>3.选择服务，点击选取</p><p>4.设置服务受到选定的文件或文件夹，位于Finder</p><p>5.在资源库中找到拷贝到剪贴板，拖动到右边窗口中</p><p>6.退出保存，将名称改为拷贝到剪贴板即可。</p><h1 id="Mac下显示和隐藏文件"><a href="#Mac下显示和隐藏文件" class="headerlink" title="Mac下显示和隐藏文件"></a>Mac下显示和隐藏文件</h1><p>打开终端，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//此命令显示隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">//此命令关闭显示隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>命令运行之后需要重新加载Finder：快捷键option+command+esc，选中Finder，重新启动即可</p><h1 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h1><ul><li>将屏幕图片存储为文件 <code>Shift + Command + 3</code></li><li>将屏幕图片拷贝到剪贴板 <code>Ctrl + Shift + Command + 3</code></li><li>将所选区域的图片存储为文件 <code>Shift + Command + 4</code></li><li>将所选区域的图片拷贝到剪贴板 <code>Ctrl + Shift + Command + 4</code></li></ul><h1 id="Split-Screen分屏功能"><a href="#Split-Screen分屏功能" class="headerlink" title="Split Screen分屏功能"></a>Split Screen分屏功能</h1><p>按住窗口的最大会绿色按钮不放，选择放置在左边或者右边，然后选择另一个应用即可进行分屏，可以拖动中间的分割线调整左右区域的大小</p><hr><p>2018.09.05更新</p><hr>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 常用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高级特性</title>
      <link href="/2017/09/02/Python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
      <url>/2017/09/02/Python%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Python高级特性"><a href="#Python高级特性" class="headerlink" title="Python高级特性"></a>Python高级特性</h1><blockquote><p>在Python中，代码不是越多越好，而是越少越好。代码不是越复杂越好，而是越简单越好</p></blockquote><a id="more"></a><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片就是对字符串进行各种截取操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = list(range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#0-3</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[:<span class="number">3</span>] <span class="comment">#0-3</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">-2</span>:] <span class="comment">#倒数切片</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[::<span class="number">3</span>] <span class="comment">#每隔三个数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[:]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)[:<span class="number">3</span>] <span class="comment">#tuple</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abcdefg'</span>[:<span class="number">3</span>] <span class="comment">#字符串切片</span></span><br><span class="line"><span class="string">'abc'</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>通过for循环来遍历list或tuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">'abc'</span>:</span><br><span class="line"><span class="meta">... </span>    print(ch)</span><br><span class="line">...</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>默认情况下迭代value，可以用for value in d.value()<br>同时迭代key和value，可以用for k,v in d.items<br>可以用Iterable判断一个对象是否为可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>,Iterable)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],Iterable)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>,Iterable)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>通过enumerate可以把一个list变成索引-元素对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,value <span class="keyword">in</span> enumerate([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]):</span><br><span class="line"><span class="meta">... </span>    print(i,value)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> a</span><br><span class="line"><span class="number">1</span> b</span><br><span class="line"><span class="number">2</span> c</span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'abc'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'xyz'</span>]</span><br><span class="line">[<span class="string">'ax'</span>, <span class="string">'ay'</span>, <span class="string">'az'</span>, <span class="string">'bx'</span>, <span class="string">'by'</span>, <span class="string">'bz'</span>, <span class="string">'cx'</span>, <span class="string">'cy'</span>, <span class="string">'cz'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>)]</span><br><span class="line">[<span class="string">'.android'</span>, <span class="string">'.atom'</span>, <span class="string">'.bash_history'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'x'</span>:<span class="string">'a'</span>,<span class="string">'y'</span>:<span class="string">'b'</span>,<span class="string">'z'</span>:<span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[k + <span class="string">'='</span> + v <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()]</span><br><span class="line">[<span class="string">'x=a'</span>, <span class="string">'y=b'</span>, <span class="string">'z=c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'Hello'</span>,<span class="string">'Word'</span>,<span class="string">'IBM'</span>,<span class="string">'Apple'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> l]</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'word'</span>, <span class="string">'ibm'</span>, <span class="string">'apple'</span>]</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>一边循环一边计算的列表成为列表生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x10eecc200</span>&gt;</span><br></pre></td></tr></table></figure><p>l和g的区别仅在于最外层的[]和()，l是一个list，而g是一个generator，需要通过next()函数才能获得generator的下一个返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>generator保存的是算法，每次调用next(g)，直到最后一个元素时就会抛出StopIteration的错误。可以使用for循环来迭代generator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line"><span class="meta">... </span>    n,a,b=<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &lt; max:</span><br><span class="line"><span class="meta">... </span>         <span class="keyword">yield</span> b</span><br><span class="line"><span class="meta">... </span>         a,b = b,a+b</span><br><span class="line"><span class="meta">... </span>         n = n + <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">6</span>)</span><br><span class="line">&lt;generator object fib at <span class="number">0x10eecc2b0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">6</span>):</span><br><span class="line"><span class="meta">... </span>    print(n)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>可以直接作用于for循环的数据类型：</p><ul><li>集合数据类型，如list、tuple、dict、set、str等；</li><li>generator，包括生成器和带yield的generator function。</li></ul><p>这些可以直接作用于for循环的对象称为可迭代对象：Iterable，可以使用isinstance()判断一个对象是否是Iterable对象。<br>生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator<br>可以使用iter()函数把Iterable变成Iterator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter(<span class="string">'abc'</span>),Iterator)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p>Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器搭建流程</title>
      <link href="/2017/08/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
      <url>/2017/08/31/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="云服务器搭建流程"><a href="#云服务器搭建流程" class="headerlink" title="云服务器搭建流程"></a>云服务器搭建流程</h1><blockquote><p>正好京东云搞服务，弄了一个月体验时间，这边文章是使用京东云的服务器体验云服务器整个搭建的流程。</p></blockquote><a id="more"></a><h2 id="登录京东云服务器后台"><a href="#登录京东云服务器后台" class="headerlink" title="登录京东云服务器后台"></a>登录京东云服务器后台</h2><p>浏览器输入<code>http://www.jcloud.com</code>输入京东账号密码进入京东云管理界面，创建系统版本为Ubuntu16.04 64位，创建完成后在云主机上就可以查看到公网/内网IP地址</p><h2 id="使用ssh登录远程连接"><a href="#使用ssh登录远程连接" class="headerlink" title="使用ssh登录远程连接"></a>使用ssh登录远程连接</h2><p>打开终端，在终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span> root@116.196.109.126 <span class="comment">#该IP地址为公网IP地址</span></span><br></pre></td></tr></table></figure><p>然后输入密码，密码会以短信形式发送到手机上，在/home目录下新建一个文件夹dzd，把相关文件都放在这个目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> /home</span><br><span class="line"><span class="variable">$mkdir</span> dzd</span><br><span class="line"><span class="variable">$cd</span> dzd</span><br></pre></td></tr></table></figure><h2 id="下载安装jdk"><a href="#下载安装jdk" class="headerlink" title="下载安装jdk"></a>下载安装jdk</h2><p>因为Tomact服务器是依赖jdk的，所以这里要先下载安装jdk<br>下载jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$wget</span> --no-cookies --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie"</span> http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz</span><br><span class="line">tar -zxvf /home/dzd/jdk-8u144-linux-x64.tar.gz -C /usr/java/</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="comment">#在最下面添加java环境变量配置信息</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_144</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#退出vi编辑器，输入下行命令使配置文件立即生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="下载安装Tomact"><a href="#下载安装Tomact" class="headerlink" title="下载安装Tomact"></a>下载安装Tomact</h2><p>下载Tomact服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$wget</span> http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.81/bin/apache-tomcat-7.0.81.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tar</span> -zxf apache-tomcat-7.0.81.tar.gz</span><br></pre></td></tr></table></figure><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换到bin目录下</span></span><br><span class="line"><span class="keyword">cd</span> apache-tomcat-7.0.81.tar.gz/bin</span><br><span class="line"><span class="comment">#运行startup.sh启动服务器</span></span><br><span class="line"><span class="string">./startup.sh</span></span><br></pre></td></tr></table></figure><p>打开浏览器，输入<br><a href="http://116.196.109.126:8080/" target="_blank" rel="noopener">http://116.196.109.126:8080/</a><br>就可以看到服务器启动成功的页面</p><h2 id="添加静态页面或json文件"><a href="#添加静态页面或json文件" class="headerlink" title="添加静态页面或json文件"></a>添加静态页面或json文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> ..</span><br><span class="line"><span class="variable">$cd</span> webapps/ROOT/</span><br><span class="line"><span class="variable">$vi</span> hello.html</span><br></pre></td></tr></table></figure><p>在浏览器输入116.196.109.126:8080/hello.html就可以访问到刚才创建的html静态页面了</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li><p>问题1：解压jdk压缩包错误，使用tar -zxvf 文件始终无法解压文件</p><p>使用file查看jdk压缩包发现是html文件格式，因此无法进行解压缩，删除文件后重新进行下载，若使用wget的话，一定要在后面加上这个参数–no-cookies –header “Cookie: oraclelicense=accept-securebackup-cookie”</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$wget</span> --no-cookies --header <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie"</span> jdk下载链接</span><br></pre></td></tr></table></figure><p>  这样下载的jdk压缩包就可以进行解压缩了</p></li><li><p>问题2：创建静态文件后，使用vi编辑，输入中文乱码</p><p>  打开vi的配置文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vi</span> /etc/vim/vimrc</span><br><span class="line"><span class="comment">#去掉#if has("autocmd") 及下面2行的注释</span></span><br><span class="line"><span class="comment">#并在最下方加入</span></span><br><span class="line"><span class="built_in">set</span> fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line"><span class="built_in">set</span> termencoding=utf-8</span><br><span class="line"><span class="built_in">set</span> encoding=utf-8</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac常用软件</title>
      <link href="/2017/08/31/Mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
      <url>/2017/08/31/Mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>记录自己使用Mac下载的软件及相关配置，备忘</p><a id="more"></a><h1 id="Mac安装软件下载及配置"><a href="#Mac安装软件下载及配置" class="headerlink" title="Mac安装软件下载及配置"></a>Mac安装软件下载及配置</h1><h2 id="AppStore安装"><a href="#AppStore安装" class="headerlink" title="AppStore安装"></a>AppStore安装</h2><ol><li>QQ</li><li>微信</li><li>迅雷</li><li>百度网盘</li><li>网易云</li><li>Alfred</li><li>有道词典</li><li>印象笔记</li><li>Dr. Clean</li><li>Excel Word PowperPoint</li><li>搜狗输入法</li><li>IINA</li><li>坚果云</li></ol><h2 id="程序员必备"><a href="#程序员必备" class="headerlink" title="程序员必备"></a>程序员必备</h2><ol><li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a><ul><li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">ohmyzsh</a></li><li><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a></li><li><a href="http://www.jianshu.com/p/59a3f1601cfc" target="_blank" rel="noopener">zsh-syntax-highlighting</a></li><li><a href="http://www.jianshu.com/p/59a3f1601cfc" target="_blank" rel="noopener">zsh-autosuggestions</a></li></ul></li><li>Dash</li><li><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime Test3</a></li><li><a href="https://developer.android.com/index.html" target="_blank" rel="noopener">Android Studio</a></li><li><a href="https://www.python.org/" target="_blank" rel="noopener">Python</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li><li><a href="https://spacelauncherapp.com/" target="_blank" rel="noopener">SpaceLauncher</a></li><li><a href="https://www.spectacleapp.com/" target="_blank" rel="noopener">Spectacle</a></li><li>PyCharm</li><li>Parallels</li><li>Eclipse</li><li>Node.js</li><li>npm</li><li><a href="https://github.com/cask/cask" target="_blank" rel="noopener">cask</a></li><li><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a></li><li>谷歌浏览器</li><li><a href="https://lai.yuweining.cn/archives/32/" target="_blank" rel="noopener">SSR</a></li><li><a href="http://zipzapmac.com/Go2Shell" target="_blank" rel="noopener">Go2shell</a></li><li><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a></li><li>MacDown</li><li>PDF Expert</li><li>MindNote</li><li>实验楼</li><li>Focus</li></ol><h2 id="chrome插件"><a href="#chrome插件" class="headerlink" title="chrome插件"></a>chrome插件</h2><ol><li>1Player for 网易云音乐</li><li>AdBlock</li><li>Bookmark Sidebar</li><li>ChaZD</li><li>Google Keep</li><li>Google 翻译</li><li>Infinity新标签页</li><li>Octotree</li><li>Save to Pocket</li><li>search2</li><li>Stylish</li><li>Vimium</li><li>印象笔记·剪藏</li><li>滴答清单</li></ol><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><ol><li><a href="https://github.com/soimort/you-get" target="_blank" rel="noopener">you-get</a></li><li><a href="https://github.com/darknessomi/musicbox/" target="_blank" rel="noopener">musicbox</a></li><li><a href="https://brew.sh/" target="_blank" rel="noopener">HomeBrew</a></li><li><a href="https://caskroom.github.io/" target="_blank" rel="noopener">BrewCask</a></li><li><a href="http://www.asty.org/cmatrix/" target="_blank" rel="noopener">cmatrix</a></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brew</span> cask install software-name</span><br><span class="line"></span><br><span class="line"><span class="variable">$brew</span> install package-name</span><br></pre></td></tr></table></figure><p>update:2017.11.22</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Setting </tag>
            
            <tag> 常用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2017/08/30/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/08/30/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><blockquote><p>Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。目前，Python已经成为最受欢迎的语言之一。人生苦短，我用Python。</p></blockquote><a id="more"></a><p>基本语法规则</p><ul><li>以#开头的语句时注释</li><li>当语句以:号结尾时，缩进的语句视为代码块</li><li>缩进按照约定俗成的管理为4个空格</li><li>Python时大小写敏感的</li></ul><h2 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h2><ol><li><p>整型：在程序中和数学上的写法一致，当使用十六进制表示整数时，用<em>0x</em>前缀和0～9，a～f表示</p></li><li><p>浮点数：浮点数也就是小数，对于很大或很小的浮点数，使用科学计数法表示，把10用e替代，1.23*e9表示1.23乘以10的九次方，0.000012可以写成1.2e-5</p></li><li><p>字符串：字符串以’或”括起来的任意文本，’’或””本身是一种表示方式，不是字符串的一部分，如果’或”也是字符的一部分，可以用””或’’括起来，若内部包含’和”，可以用\来表示，如果字符串有很多字符都需要转义，可以使用r’’…’’表示内部的字符默认不转义，如果字符串内部有很多换行，可以使用’’’…’’’表示多行内容（\n表示换行，\t表示制表符，\\表示\）</p></li><li><p>布尔值：布尔值只有True和False两种值（注意大小写），布尔值也可以用and、or和not运算</p></li><li><p>空值：空值是Python里的一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值</p></li><li><p>变量：变量在程序中用一个变量名表示，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，在Python中，可以把热议数据类型赋值个变量，同一个变量可以反复赋值，而且可以是不同类型的变量。这种变量类型不固定的语言称之为动态语言</p></li><li><p>常量：所谓常量就是不能变的变量，用全部大写的变量名表示出常量只是一个习惯上的用法。在Python中有两种除法，一种除法是/，/除法计算结果是浮点数，即使是两个整数恰好相除，结果也是浮点数，还有一种除法是//，称为地板除，两个整数的除法仍然是整数：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.333333333333</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">6</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> // <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>因为计算机只能处理数字，如果要处理文本，需要先把文本转化为数字才能处理。中国汉字编码<code>GB2312</code>。<br>Python中默认的编码模式是ASCII格式，需要在Python文件开头加入<br><code># -*- coding: UTF-8 -*-</code>或<code>#coding=utf-8</code>即可</p><h3 id="Python字符串"><a href="#Python字符串" class="headerlink" title="Python字符串"></a>Python字符串</h3><ol><li><p>在Python中，字符串是以Unicode编码的，对于单个字符的编码Python提供了ord()函数获取字符的整数表示，char()函数把编码转换为对应的字符</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;ord(<span class="string">'A'</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line">&gt;&gt;&gt;chr(<span class="number">26460</span>)</span><br><span class="line"><span class="string">'杜'</span></span><br></pre></td></tr></table></figure><p> 十六进制</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">'\u4e2d\u6587'</span></span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure></li><li><p>由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。’ABC’是字符串</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = <span class="string">b'ABC'</span></span><br><span class="line">&gt;&gt;&gt;y = <span class="string">'ABC'</span></span><br><span class="line">&gt;&gt;&gt;print(x == y)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure></li><li><p>纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。</p><p> 反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure></li><li><p>len()函数可以用来要计算str包含的字符数也可以计算bytes的字节数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;len(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;len(<span class="string">'中文'</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;len(<span class="string">b'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;len(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p> 1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 #linux/OS X系统下为可执行程序</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*- #按UTF-8读取源代码</span></span><br></pre></td></tr></table></figure></li><li><p>格式化</p><p> 在Python中格式化的方式和C一样使用%输出格式化字符<br> %运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%f表示用浮点数替换，%x表示用十六进制替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">s1 = int(input(<span class="string">'去年的成绩：'</span>))</span><br><span class="line">s2 = int(input(<span class="string">'今年的成绩：'</span>))</span><br><span class="line">r = (s2 - s1) / s1 * <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> s1 &gt; s2:</span><br><span class="line">    print(<span class="string">'下降了：'</span><span class="string">'%.1f %%'</span> % r)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'提升了：'</span><span class="string">'%.1f %%'</span> % r)</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用list和tuple"><a href="#使用list和tuple" class="headerlink" title="使用list和tuple"></a>使用list和tuple</h2><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。索引从0开始，超出列表长度时会报错，最后一个元素的索引是len(list)-1，还以用len[-1]直接获取最后一个元素，list中元素类型可以不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;len(list)      <span class="comment">#可以获得list列表的长度</span></span><br><span class="line">&gt;&gt;&gt;list.appen()   <span class="comment">#追加元素到list的末尾</span></span><br><span class="line">&gt;&gt;&gt;list.insert(i) <span class="comment">#插入元素到指定位置</span></span><br><span class="line">&gt;&gt;&gt;list.pop(i)    <span class="comment">#删除末尾的元素，用pop()，使用pop(i)删除指定位置的元素</span></span><br><span class="line">                  <span class="comment">#若要替换元素，则直接赋值给对应的索引位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(list)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改。<br>定义tuple时，tuple的元素必须被确定下来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;t</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;t = ()</span><br><span class="line">&gt;&gt;&gt;t</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt;t = (<span class="number">1</span>,)</span><br><span class="line">&gt;&gt;&gt;t</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>若tuple中包含list，则该tuple中的list元素可变，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#if语句的完整形式</span></span><br><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"True"</span>) <span class="comment">#只要x是非零数值、非空字符串、非空list等，就判断为True，否则为False</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ol><li>for循环</li></ol><pre><code>for x in ...循环就是把每个元素代入变量x，然后执行缩进块的语句。range()函数可以生成一个整数序列，通过list()函数装换为list。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,]</span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li><p>while循环</p><p> while循环，只要条件满足，就不断循环，条件不满足时退出循环。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ...  <span class="comment">#条件</span></span><br><span class="line">    ...    <span class="comment">#条件满足时执行</span></span><br><span class="line">print()    <span class="comment">#条件不满足执行</span></span><br></pre></td></tr></table></figure></li><li><p>break和continue</p><p> 在循环中，在满足break语句前的if语句条件时执行，可以提前退出循环。<br> continue的作用是提前结束本轮循环，不会执行满足if条件时的语句，直接开始下一轮循环。<br> <em>注意</em>：不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。</p></li></ol><h2 id="使用dict和set"><a href="#使用dict和set" class="headerlink" title="使用dict和set"></a>使用dict和set</h2><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>dict在其他语言中也称为map，使用键-值存储，具有极快的查找速度，一个key只能对应一个value，多次对一个key放入value，后面的值会把前面的值替换掉。若key不存在，则dict报错，可以通过in或get方法判断key是否存在。dict的key必须是<em>不可变对象</em>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">'abc'</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;d.get(<span class="string">'abc'</span>)</span><br><span class="line">&gt;&gt;&gt;d.get(<span class="string">'abc'</span>,x)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><p>可以通过pop(key)方法删除对应的key，dict内部存放的顺序和key放入的顺序无关。<br>list相比，dict特点：</p><ol><li>查找和插入的速度快，不会是UI这key的增加而增加</li><li>占用大量内存，浪费内存</li></ol><p>list相反：</p><ol><li>查找和插入的时间随着元素的增加而增加</li><li>占用空间小，浪费内存少</li></ol><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，<em>没有重复</em>的key。<br>注意：传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。<br>要创建一个set，需要提供一个list作为输入集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;x = set([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">&gt;&gt;&gt;x</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;s.add(<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">&gt;&gt;&gt;x.remove(<span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;x</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">#set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等</span></span><br><span class="line">&gt;&gt;&gt;s &amp; x</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">&gt;&gt;&gt;s | x</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>函数是最基本的一种代码抽象的方式</p></blockquote><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p><a href="http://docs.python.org/3/library/functions.html" target="_blank" rel="noopener">官方文档</a></p><p>要调用函数首先要知道函数的名称和参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">100</span>)</span><br><span class="line"><span class="number">100</span></span><br><span class="line">abs(<span class="number">-100</span>)</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>若传参个数或类型错误，都会报TypeError错误</p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>Python内指定额常用函数还包括数据类型转寒函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'12.34'</span>)</span><br><span class="line"><span class="number">12.34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</span><br><span class="line"><span class="string">'1.23'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">100</span>)</span><br><span class="line"><span class="string">'100'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = abs <span class="comment"># 变量a指向abs函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">-1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在Python中，定义一个函数使用def语句<br>def name(args):<br>    return 执行语句<br>若没有return语句，则返回None。return None == return<br><code>from x import y</code>用来导入x.py文件中定义的y函数。</p><h3 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dep nop():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>pass语句什么也不做，但是可以用来作为占位符</p><h3 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h3><p>内置函数会检查出参数错误，而我们定义的函数没有参数检查，两种同样的错误就会导致语句中出错的原因不同。可以用isinstance()做参数数据类型检查。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">people</span><span class="params">(name,age)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(name,(str)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</span><br><span class="line">    <span class="keyword">return</span> print(name,age)</span><br></pre></td></tr></table></figure><h3 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle=<span class="number">0</span>)</span>:</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x, y)</span><br><span class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></span><br><span class="line"><span class="comment">#返回值放在一个tuple中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r)</span><br><span class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</span><br></pre></td></tr></table></figure><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ol><li>位置参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dep power(x):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><p>对于power(x)函数，参数x就是一个位置参数。<br>当调用power函数时，必须传入有且仅有的一个参数x</p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>参考教程：<br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">Python教程,廖雪峰的官方网站</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
